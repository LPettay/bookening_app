{"version":3,"file":"index.js","sources":["../../../../src/components/withPropsMapping/index.tsx"],"sourcesContent":["import React, {\n  useImperativeHandle,\n  useMemo,\n  ComponentType,\n  useCallback,\n  useRef,\n} from 'react';\nimport { kebabCase } from '@descope/sdk-helpers';\nimport { transformAttrValue, transformKey } from './utils';\n\n/**\n * withPropsMapping is a React HOC that adapts React props to work seamlessly\n * with web components by setting attributes and properties.\n *\n * - Props ending in `.prop` are set as properties on the web component.\n * - Props ending in `.attr` are transformed to kebab-case and set as attributes on the web component.\n * - All other props are set as kebab-case props\n *\n * This resolves attribute/property behavior differences in React 19.\n *\n * @see https://github.com/facebook/react/issues/29037\n */\nconst withPropsMapping = <P extends Record<string, any>>(\n  Component: ComponentType<any>,\n) =>\n  React.forwardRef<HTMLElement, P>((props, ref) => {\n    const { prop, attr, rest } = useMemo(\n      () =>\n        Object.entries(props).reduce(\n          (acc, [key, value]) => {\n            const { trimmedKey, category } = transformKey(key);\n            if (category === 'prop') acc.prop.push([trimmedKey, value]);\n            else if (category === 'attr')\n              acc.attr.push([kebabCase(trimmedKey), transformAttrValue(value)]);\n            else Object.assign(acc.rest, { [kebabCase(trimmedKey)]: value });\n            return acc;\n          },\n          { attr: [], prop: [], rest: {} },\n        ),\n      [props],\n    );\n\n    const currRef = useRef<HTMLElement | null>(null);\n\n    const setInnerRef = useCallback(\n      (innerRef) => {\n        currRef.current = innerRef;\n        if (innerRef) {\n          prop.forEach(([key, value]) => {\n            currRef.current[key] = value;\n          });\n\n          attr.forEach(([key, value]) => {\n            if (value === undefined || value === null) {\n              innerRef.removeAttribute(key);\n            } else {\n              innerRef.setAttribute(key, value);\n            }\n          });\n        }\n      },\n      [prop, attr, currRef],\n    );\n\n    useImperativeHandle(ref, () => currRef.current);\n\n    return <Component ref={setInnerRef} {...rest} />;\n  });\n\nexport default withPropsMapping;\n"],"names":["Component","React","forwardRef","props","ref","prop","attr","rest","useMemo","Object","entries","reduce","acc","key","value","trimmedKey","category","transformKey","push","kebabCase","transformAttrValue","assign","currRef","useRef","setInnerRef","useCallback","innerRef","current","forEach","removeAttribute","setAttribute","useImperativeHandle","createElement"],"mappings":"mOAuBEA,GAEAC,EAAAA,QAAMC,YAA2B,CAACC,EAAOC,KACvC,MAAMC,KAAEA,EAAIC,KAAEA,EAAIC,KAAEA,GAASC,EAAAA,SAC3B,IACEC,OAAOC,QAAQP,GAAOQ,QACpB,CAACC,GAAMC,EAAKC,MACV,MAAMC,WAAEA,EAAUC,SAAEA,GAAaC,EAAYA,aAACJ,GAK9C,MAJiB,SAAbG,EAAqBJ,EAAIP,KAAKa,KAAK,CAACH,EAAYD,IAC9B,SAAbE,EACPJ,EAAIN,KAAKY,KAAK,CAACC,EAASA,UAACJ,GAAaK,EAAkBA,mBAACN,KACtDL,OAAOY,OAAOT,EAAIL,KAAM,CAAE,CAACY,EAAAA,UAAUJ,IAAcD,IACjDF,CAAG,GAEZ,CAAEN,KAAM,GAAID,KAAM,GAAIE,KAAM,CAAA,KAEhC,CAACJ,IAGGmB,EAAUC,SAA2B,MAErCC,EAAcC,eACjBC,IACCJ,EAAQK,QAAUD,EACdA,IACFrB,EAAKuB,SAAQ,EAAEf,EAAKC,MAClBQ,EAAQK,QAAQd,GAAOC,CAAK,IAG9BR,EAAKsB,SAAQ,EAAEf,EAAKC,MACdA,QACFY,EAASG,gBAAgBhB,GAEzBa,EAASI,aAAajB,EAAKC,EAC5B,IAEJ,GAEH,CAACT,EAAMC,EAAMgB,IAKf,OAFAS,EAAAA,oBAAoB3B,GAAK,IAAMkB,EAAQK,UAEhC1B,UAAA+B,cAAChC,EAAUS,OAAAY,OAAA,CAAAjB,IAAKoB,GAAiBjB,GAAQ"}