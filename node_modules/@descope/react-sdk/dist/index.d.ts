import React, { FC, DOMAttributes } from 'react';
import * as _descope_web_js_sdk from '@descope/web-js-sdk';
import { CookieConfig, OidcConfig } from '@descope/web-js-sdk';
import AccessKeyManagementWidget from '@descope/access-key-management-widget';
import ApplicationsPortalWidget from '@descope/applications-portal-widget';
import AuditManagementWidget from '@descope/audit-management-widget';
import RoleManagementWidget from '@descope/role-management-widget';
import TenantProfileWidget from '@descope/tenant-profile-widget';
import UserManagementWidget from '@descope/user-management-widget';
import UserProfileWidget from '@descope/user-profile-widget';
import * as _descope_web_component from '@descope/web-component';
import _descope_web_component__default, { ILogger, ThemeOptions, AutoFocusOptions } from '@descope/web-component';
export { ILogger } from '@descope/web-component';
import * as _1 from '@descope/core-js-sdk';
import * as _2 from 'oidc-client-ts';

interface IAuthProviderProps {
    projectId: string;
    baseUrl?: string;
    baseStaticUrl?: string;
    baseCdnUrl?: string;
    persistTokens?: boolean;
    autoRefresh?: boolean;
    sessionTokenViaCookie?: CookieConfig;
    oidcConfig?: OidcConfig;
    storeLastAuthenticatedUser?: boolean;
    keepLastAuthenticatedUserAfterLogout?: boolean;
    refreshCookieName?: string;
    getExternalToken?: () => Promise<string>;
    children?: React.ReactNode;
}
declare const AuthProvider: FC<IAuthProviderProps>;

declare const createSdkWrapper: <P extends {
    projectId: string;
    logger?: {
        error: {
            (...data: any[]): void;
            (message?: any, ...optionalParams: any[]): void;
        };
        debug: {
            (...data: any[]): void;
            (message?: any, ...optionalParams: any[]): void;
        };
        log: {
            (...data: any[]): void;
            (message?: any, ...optionalParams: any[]): void;
        };
        warn: {
            (...data: any[]): void;
            (message?: any, ...optionalParams: any[]): void;
        };
    };
    baseUrl?: string;
    hooks?: {
        beforeRequest?: ((config: _1.RequestConfig) => _1.RequestConfig) | ((config: _1.RequestConfig) => _1.RequestConfig)[];
        afterRequest?: ((req: _1.RequestConfig, res: Response) => void | Promise<void>) | ((req: _1.RequestConfig, res: Response) => void | Promise<void>)[];
        transformResponse?: (mutableResponse: _1.ExtendedResponse) => Promise<_1.ExtendedResponse>;
    };
    cookiePolicy?: RequestCredentials;
    baseHeaders?: HeadersInit;
    refreshCookieName?: string;
    fetch?: typeof fetch;
} & {
    oidcConfig?: _descope_web_js_sdk.OidcConfig;
    getExternalToken?: () => Promise<string>;
} & {
    fpKey?: string;
    fpLoad?: boolean;
} & {
    autoRefresh?: boolean;
} & _descope_web_js_sdk.FlowNonceOptions & {
    storeLastAuthenticatedUser?: boolean;
    keepLastAuthenticatedUserAfterLogout?: boolean;
} & {
    persistTokens?: _descope_web_js_sdk.CookieConfig;
    storagePrefix?: string;
    preview?: boolean;
    sessionTokenViaCookie?: _descope_web_js_sdk.CookieConfig;
}>(config: P) => ((({
    refresh: (token?: string, tryRefresh?: boolean) => Promise<_1.SdkResponse<_1.JWTResponse>>;
    logout: (token?: string) => Promise<_1.SdkResponse<never>>;
    flow: {
        start: (flowId: string, options?: Pick<{
            redirectUrl?: string;
            location?: string;
            tenant?: string;
            deviceInfo?: {
                webAuthnSupport?: boolean;
            };
            lastAuth?: {
                authMethod?: "webauthn" | "otp" | "oauth" | "saml" | "totp" | "magiclink" | "enchantedlink";
                oauthProvider?: string;
                name?: string;
                loginId?: string;
            };
            redirectAuth?: {
                callbackUrl: string;
                codeChallenge: string;
            };
            oidcIdpStateId?: string;
            preview?: boolean;
            samlIdpStateId?: string;
            samlIdpUsername?: string;
            ssoAppId?: string;
            thirdPartyAppId?: string;
            oidcLoginHint?: string;
            abTestingKey?: number;
            startOptionsVersion?: number;
            client?: Record<string, any>;
            locale?: string;
            oidcPrompt?: string;
            oidcErrorRedirectUri?: string;
            oidcResource?: string;
            nativeOptions?: {
                platform: "ios" | "android";
                oauthProvider?: string;
                oauthRedirect?: string;
            };
            thirdPartyAppStateId?: string;
            applicationScopes?: string;
            outboundAppId?: string;
            outboundAppScopes?: string[];
        }, "tenant" | "redirectUrl" | "redirectAuth" | "oidcIdpStateId" | "samlIdpStateId" | "samlIdpUsername" | "ssoAppId" | "thirdPartyAppId" | "oidcLoginHint" | "preview" | "abTestingKey" | "client" | "locale" | "oidcPrompt" | "oidcErrorRedirectUri" | "oidcResource" | "nativeOptions" | "thirdPartyAppStateId" | "applicationScopes" | "outboundAppId" | "outboundAppScopes"> & {
            lastAuth?: Omit<{
                authMethod?: "webauthn" | "otp" | "oauth" | "saml" | "totp" | "magiclink" | "enchantedlink";
                oauthProvider?: string;
                name?: string;
                loginId?: string;
            }, "loginId" | "name">;
        }, conditionInteractionId?: string, interactionId?: string, componentsVersion?: string, flowVersions?: Record<string, number>, input?: {
            [x: string]: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any[])[])[])[])[])[])[])[])[])[])[];
        }) => Promise<_1.SdkResponse<_1.FlowResponse>>;
        next: (executionId: string, stepId: string, interactionId: string, version?: number, componentsVersion?: string, input?: {
            [x: string]: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any[])[])[])[])[])[])[])[])[])[])[];
        }) => Promise<_1.SdkResponse<_1.FlowResponse>>;
    };
    webauthn: {
        signUp: ((identifier: string, name: string, passkeyOptions?: _1.PasskeyOptions) => Promise<_1.SdkResponse<_1.JWTResponse>>) & {
            start: (loginId: string, origin: string, name: string, passkeyOptions?: _1.PasskeyOptions) => Promise<_1.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
            finish: (transactionId: string, response: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        };
        signIn: ((identifier: string, passkeyOptions?: _1.PasskeyOptions) => Promise<_1.SdkResponse<_1.JWTResponse>>) & {
            start: (loginId: string, origin: string, loginOptions?: _1.LoginOptions, token?: string, passkeyOptions?: _1.PasskeyOptions) => Promise<_1.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
            finish: (transactionId: string, response: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        };
        signUpOrIn: ((identifier: string, passkeyOptions?: _1.PasskeyOptions) => Promise<_1.SdkResponse<_1.JWTResponse>>) & {
            start: (loginId: string, origin: string, passkeyOptions?: _1.PasskeyOptions) => Promise<_1.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
        };
        update: ((identifier: string, token?: string, passkeyOptions?: _1.PasskeyOptions) => Promise<_1.SdkResponse<_1.ResponseData>>) & {
            start: (loginId: string, origin: string, token?: string, passkeyOptions?: _1.PasskeyOptions) => Promise<_1.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
            finish: (transactionId: string, response: string) => Promise<_1.SdkResponse<_1.ResponseData>>;
        };
        helpers: {
            create: (options: string) => Promise<string>;
            get: (options: string) => Promise<string>;
            isSupported: (requirePlatformAuthenticator?: boolean) => Promise<boolean>;
            conditional: (options: string, abort: AbortController) => Promise<string>;
        };
    };
    fedcm: {
        onetap: {
            requestExchangeCode(options: {
                provider?: string;
                oneTapConfig?: _descope_web_js_sdk.OneTapConfig;
                loginOptions?: _1.LoginOptions;
                onSkipped?: (reason?: string) => void;
                onDismissed?: (reason?: string) => void;
                onFailed?: (error: Error) => void;
                onCodeReceived: (code: string) => void;
            }): void;
            requestAuthentication(options?: {
                provider?: string;
                oneTapConfig?: _descope_web_js_sdk.OneTapConfig;
                loginOptions?: _1.LoginOptions;
                onSkipped?: (reason?: string) => void;
                onDismissed?: (reason?: string) => void;
                onFailed?: (error: Error) => void;
                onAuthenticated?: (response: _1.JWTResponse) => void;
            }): void;
        };
        oneTap(provider?: string, oneTapConfig?: _descope_web_js_sdk.OneTapConfig, loginOptions?: _1.LoginOptions, onSkipped?: (reason?: string) => void, onDismissed?: (reason?: string) => void): Promise<void>;
        launch(context?: "signin" | "signup" | "use" | "continue"): Promise<_1.SdkResponse<_1.JWTResponse>>;
        isSupported(): boolean;
        isLoggedIn(context?: "signin" | "signup" | "use" | "continue"): Promise<boolean>;
    };
    oidc: {
        loginWithRedirect: (arg?: _2.CreateSigninRequestArgs, disableNavigation?: boolean) => Promise<_1.SdkResponse<_1.URLResponse>>;
        finishLogin: (url?: string) => Promise<any>;
        finishLoginIfNeed: (url?: string) => Promise<any>;
        refreshToken: (refreshToken: string) => Promise<_2.SigninResponse>;
        logout: (arg?: _2.CreateSignoutRequestArgs, disableNavigation?: boolean) => Promise<any>;
    };
    accessKey: {
        exchange: (accessKey: string, loginOptions?: _1.AccessKeyLoginOptions) => Promise<_1.SdkResponse<_1.ExchangeAccessKeyResponse>>;
    };
    otp: {
        verify: {
            sms: (loginId: string, code: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
            voice: (loginId: string, code: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
            whatsapp: (loginId: string, code: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
            email: (loginId: string, code: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        };
        signIn: {
            sms: (loginId: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUp: {
            sms: (loginId: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUpOrIn: {
            sms: (loginId: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        update: {
            email: <T extends boolean>(loginId: string, email: string, token?: string, updateOptions?: {
                addToLoginIDs?: T;
                onMergeUseExisting?: T extends true ? boolean : never;
                templateOptions?: {
                    [x: string]: string;
                };
                templateId?: string;
                providerId?: string;
            }) => Promise<_1.SdkResponse<{
                maskedEmail: string;
            }>>;
            phone: {
                sms: <T_1 extends boolean>(loginId: string, phone: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_1;
                    onMergeUseExisting?: T_1 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                    templateId?: string;
                    providerId?: string;
                }) => Promise<_1.SdkResponse<{
                    maskedPhone: string;
                }>>;
                voice: <T_1_1 extends boolean>(loginId: string, phone: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_1_1;
                    onMergeUseExisting?: T_1_1 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                    templateId?: string;
                    providerId?: string;
                }) => Promise<_1.SdkResponse<{
                    maskedPhone: string;
                }>>;
                whatsapp: <T_1_2 extends boolean>(loginId: string, phone: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_1_2;
                    onMergeUseExisting?: T_1_2 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                    templateId?: string;
                    providerId?: string;
                }) => Promise<_1.SdkResponse<{
                    maskedPhone: string;
                }>>;
            };
        };
    };
    magicLink: {
        verify: (token: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        signIn: {
            sms: (loginId: string, URI: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, URI: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, URI: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, URI: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUp: {
            sms: (loginId: string, URI: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, URI: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, URI: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, URI: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUpOrIn: {
            sms: (loginId: string, URI?: string, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, URI?: string, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, URI?: string, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, URI?: string, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        update: {
            email: <T_2 extends boolean>(loginId: string, email: string, URI?: string, token?: string, updateOptions?: {
                addToLoginIDs?: T_2;
                onMergeUseExisting?: T_2 extends true ? boolean : never;
                templateOptions?: {
                    [x: string]: string;
                };
                templateId?: string;
                providerId?: string;
            }) => Promise<_1.SdkResponse<{
                maskedEmail: string;
            }>>;
            phone: {
                sms: <T_3 extends boolean>(loginId: string, phone: string, URI?: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_3;
                    onMergeUseExisting?: T_3 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                    templateId?: string;
                    providerId?: string;
                }) => Promise<_1.SdkResponse<{
                    maskedPhone: string;
                }>>;
                voice: <T_3_1 extends boolean>(loginId: string, phone: string, URI?: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_3_1;
                    onMergeUseExisting?: T_3_1 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                    templateId?: string;
                    providerId?: string;
                }) => Promise<_1.SdkResponse<{
                    maskedPhone: string;
                }>>;
                whatsapp: <T_3_2 extends boolean>(loginId: string, phone: string, URI?: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_3_2;
                    onMergeUseExisting?: T_3_2 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                    templateId?: string;
                    providerId?: string;
                }) => Promise<_1.SdkResponse<{
                    maskedPhone: string;
                }>>;
            };
        };
    };
    enchantedLink: {
        verify: (token: string) => Promise<_1.SdkResponse<never>>;
        signIn: (loginId: string, URI?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.EnchantedLinkResponse>>;
        signUpOrIn: (loginId: string, URI?: string, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateId?: string;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_1.SdkResponse<_1.EnchantedLinkResponse>>;
        signUp: (loginId: string, URI?: string, user?: {
            email?: string;
            name?: string;
            givenName?: string;
            middleName?: string;
            familyName?: string;
            phone?: string;
        }, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateId?: string;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_1.SdkResponse<_1.EnchantedLinkResponse>>;
        waitForSession: (pendingRef: string, config?: {
            pollingIntervalMs: number;
            timeoutMs: number;
        }) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        update: {
            email: <T_4 extends boolean>(loginId: string, email: string, URI?: string, token?: string, updateOptions?: {
                addToLoginIDs?: T_4;
                onMergeUseExisting?: T_4 extends true ? boolean : never;
                templateOptions?: {
                    [x: string]: string;
                };
                templateId?: string;
                providerId?: string;
            }) => Promise<_1.SdkResponse<_1.EnchantedLinkResponse>>;
        };
    };
    oauth: {
        start: ((provider: string, redirectUrl?: string, loginOptions?: _1.LoginOptions, token?: string, loginHint?: string) => Promise<_1.SdkResponse<_1.ResponseData>>) & {
            google: (redirectURL?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
            facebook: (redirectURL?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
            github: (redirectURL?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
            microsoft: (redirectURL?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
            gitlab: (redirectURL?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
            apple: (redirectURL?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
            discord: (redirectURL?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
            linkedin: (redirectURL?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
            slack: (redirectURL?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
        };
        exchange: (code: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        startNative: (provider: string, loginOptions?: _1.LoginOptions, implicit?: boolean) => Promise<_1.SdkResponse<_1.ResponseData>>;
        finishNative: (provider: string, stateId: string, user?: string, code?: string, idToken?: string) => Promise<_1.SdkResponse<_1.ResponseData>>;
        getOneTapClientId: (provider: string) => Promise<_1.SdkResponse<{
            clientId: string;
        }>>;
        verifyOneTapIDToken: (provider: string, idToken: string, nonce: string, loginOptions?: _1.LoginOptions) => Promise<_1.SdkResponse<{
            code: string;
        }>>;
        exchangeOneTapIDToken: (provider: string, idToken: string, nonce: string, loginOptions?: _1.LoginOptions) => Promise<_1.SdkResponse<_1.JWTResponse>>;
    };
    outbound: {
        connect: (appId: string, options?: {
            redirectUrl?: string;
            scopes?: string[];
            tenantId?: string;
            tenantLevel?: boolean;
        }, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
    };
    saml: {
        start: (tenantIdOrEmail: string, redirectUrl?: string, loginOptions?: _1.LoginOptions, token?: string, ssoId?: string, forceAuthn?: boolean, loginHint?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
        exchange: (code: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
    };
    totp: {
        signUp: (loginId: string, user?: {
            email?: string;
            name?: string;
            givenName?: string;
            middleName?: string;
            familyName?: string;
            phone?: string;
        }) => Promise<_1.SdkResponse<_1.TOTPResponse>>;
        verify: (loginId: string, code: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        update: (loginId: string, token?: string) => Promise<_1.SdkResponse<_1.TOTPResponse>>;
    };
    notp: {
        signUpOrIn: (loginId?: string, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateId?: string;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_1.SdkResponse<{
            pendingRef: string;
            redirectUrl: string;
            image: string;
        }>>;
        signUp: (loginId?: string, user?: {
            email?: string;
            name?: string;
            givenName?: string;
            middleName?: string;
            familyName?: string;
            phone?: string;
        }, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateId?: string;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_1.SdkResponse<{
            pendingRef: string;
            redirectUrl: string;
            image: string;
        }>>;
        signIn: (loginId?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
            pendingRef: string;
            redirectUrl: string;
            image: string;
        }>>;
        waitForSession: (pendingRef: string, config?: {
            pollingIntervalMs: number;
            timeoutMs: number;
        }) => Promise<_1.SdkResponse<_1.JWTResponse>>;
    };
    password: {
        signUp: (loginId: string, password: string, user?: {
            email?: string;
            name?: string;
            givenName?: string;
            middleName?: string;
            familyName?: string;
            phone?: string;
        }, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateId?: string;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        signIn: (loginId: string, password: string, loginOptions?: _1.LoginOptions) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        sendReset: (loginId: string, redirectUrl?: string, templateOptions?: {
            [x: string]: string;
        }) => Promise<_1.SdkResponse<{
            resetMethod: string;
            pendingRef?: string;
            linkId?: string;
            maskedEmail: string;
        }>>;
        update: (loginId: string, newPassword: string, token?: string) => Promise<_1.SdkResponse<never>>;
        replace: (loginId: string, oldPassword: string, newPassword: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        policy: () => Promise<_1.SdkResponse<{
            minLength: number;
            lowercase: boolean;
            uppercase: boolean;
            number: boolean;
            nonAlphanumeric: boolean;
        }>>;
    };
    selectTenant: (tenantId: string, token?: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
    logoutAll: (token?: string) => Promise<_1.SdkResponse<never>>;
    me: (token?: string) => Promise<_1.SdkResponse<_1.UserResponse>>;
    myTenants: (tenants: true | string[], token?: string) => Promise<_1.SdkResponse<{
        tenants: {
            id: string;
            name: string;
            customAttributes?: Record<string, any>;
        }[];
    }>>;
    history: (token?: string) => Promise<_1.SdkResponse<_1.UserHistoryResponse>>;
    isJwtExpired: (token: string) => boolean;
    getTenants: (token: string) => string[];
    getJwtPermissions: (token: string, tenant?: string) => string[];
    getJwtRoles: (token: string, tenant?: string) => string[];
    getCurrentTenant: (token: string) => string;
    httpClient: _1.HttpClient;
} | {
    refresh: (token?: string, tryRefresh?: boolean) => Promise<_1.SdkResponse<_1.JWTResponse>>;
    logout: (token?: string) => Promise<_1.SdkResponse<never>>;
    flow: {
        start: (flowId: string, options?: Pick<{
            redirectUrl?: string;
            location?: string;
            tenant?: string;
            deviceInfo?: {
                webAuthnSupport?: boolean;
            };
            lastAuth?: {
                authMethod?: "webauthn" | "otp" | "oauth" | "saml" | "totp" | "magiclink" | "enchantedlink";
                oauthProvider?: string;
                name?: string;
                loginId?: string;
            };
            redirectAuth?: {
                callbackUrl: string;
                codeChallenge: string;
            };
            oidcIdpStateId?: string;
            preview?: boolean;
            samlIdpStateId?: string;
            samlIdpUsername?: string;
            ssoAppId?: string;
            thirdPartyAppId?: string;
            oidcLoginHint?: string;
            abTestingKey?: number;
            startOptionsVersion?: number;
            client?: Record<string, any>;
            locale?: string;
            oidcPrompt?: string;
            oidcErrorRedirectUri?: string;
            oidcResource?: string;
            nativeOptions?: {
                platform: "ios" | "android";
                oauthProvider?: string;
                oauthRedirect?: string;
            };
            thirdPartyAppStateId?: string;
            applicationScopes?: string;
            outboundAppId?: string;
            outboundAppScopes?: string[];
        }, "tenant" | "redirectUrl" | "redirectAuth" | "oidcIdpStateId" | "samlIdpStateId" | "samlIdpUsername" | "ssoAppId" | "thirdPartyAppId" | "oidcLoginHint" | "preview" | "abTestingKey" | "client" | "locale" | "oidcPrompt" | "oidcErrorRedirectUri" | "oidcResource" | "nativeOptions" | "thirdPartyAppStateId" | "applicationScopes" | "outboundAppId" | "outboundAppScopes"> & {
            lastAuth?: Omit<{
                authMethod?: "webauthn" | "otp" | "oauth" | "saml" | "totp" | "magiclink" | "enchantedlink";
                oauthProvider?: string;
                name?: string;
                loginId?: string;
            }, "loginId" | "name">;
        }, conditionInteractionId?: string, interactionId?: string, componentsVersion?: string, flowVersions?: Record<string, number>, input?: {
            [x: string]: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any[])[])[])[])[])[])[])[])[])[])[];
        }) => Promise<_1.SdkResponse<_1.FlowResponse>>;
        next: (executionId: string, stepId: string, interactionId: string, version?: number, componentsVersion?: string, input?: {
            [x: string]: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any[])[])[])[])[])[])[])[])[])[])[];
        }) => Promise<_1.SdkResponse<_1.FlowResponse>>;
    };
    webauthn: {
        signUp: ((identifier: string, name: string, passkeyOptions?: _1.PasskeyOptions) => Promise<_1.SdkResponse<_1.JWTResponse>>) & {
            start: (loginId: string, origin: string, name: string, passkeyOptions?: _1.PasskeyOptions) => Promise<_1.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
            finish: (transactionId: string, response: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        };
        signIn: ((identifier: string, passkeyOptions?: _1.PasskeyOptions) => Promise<_1.SdkResponse<_1.JWTResponse>>) & {
            start: (loginId: string, origin: string, loginOptions?: _1.LoginOptions, token?: string, passkeyOptions?: _1.PasskeyOptions) => Promise<_1.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
            finish: (transactionId: string, response: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        };
        signUpOrIn: ((identifier: string, passkeyOptions?: _1.PasskeyOptions) => Promise<_1.SdkResponse<_1.JWTResponse>>) & {
            start: (loginId: string, origin: string, passkeyOptions?: _1.PasskeyOptions) => Promise<_1.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
        };
        update: ((identifier: string, token?: string, passkeyOptions?: _1.PasskeyOptions) => Promise<_1.SdkResponse<_1.ResponseData>>) & {
            start: (loginId: string, origin: string, token?: string, passkeyOptions?: _1.PasskeyOptions) => Promise<_1.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
            finish: (transactionId: string, response: string) => Promise<_1.SdkResponse<_1.ResponseData>>;
        };
        helpers: {
            create: (options: string) => Promise<string>;
            get: (options: string) => Promise<string>;
            isSupported: (requirePlatformAuthenticator?: boolean) => Promise<boolean>;
            conditional: (options: string, abort: AbortController) => Promise<string>;
        };
    };
    fedcm: {
        onetap: {
            requestExchangeCode(options: {
                provider?: string;
                oneTapConfig?: _descope_web_js_sdk.OneTapConfig;
                loginOptions?: _1.LoginOptions;
                onSkipped?: (reason?: string) => void;
                onDismissed?: (reason?: string) => void;
                onFailed?: (error: Error) => void;
                onCodeReceived: (code: string) => void;
            }): void;
            requestAuthentication(options?: {
                provider?: string;
                oneTapConfig?: _descope_web_js_sdk.OneTapConfig;
                loginOptions?: _1.LoginOptions;
                onSkipped?: (reason?: string) => void;
                onDismissed?: (reason?: string) => void;
                onFailed?: (error: Error) => void;
                onAuthenticated?: (response: _1.JWTResponse) => void;
            }): void;
        };
        oneTap(provider?: string, oneTapConfig?: _descope_web_js_sdk.OneTapConfig, loginOptions?: _1.LoginOptions, onSkipped?: (reason?: string) => void, onDismissed?: (reason?: string) => void): Promise<void>;
        launch(context?: "signin" | "signup" | "use" | "continue"): Promise<_1.SdkResponse<_1.JWTResponse>>;
        isSupported(): boolean;
        isLoggedIn(context?: "signin" | "signup" | "use" | "continue"): Promise<boolean>;
    };
    oidc: {
        loginWithRedirect: (arg?: _2.CreateSigninRequestArgs, disableNavigation?: boolean) => Promise<_1.SdkResponse<_1.URLResponse>>;
        finishLogin: (url?: string) => Promise<any>;
        finishLoginIfNeed: (url?: string) => Promise<any>;
        refreshToken: (refreshToken: string) => Promise<_2.SigninResponse>;
        logout: (arg?: _2.CreateSignoutRequestArgs, disableNavigation?: boolean) => Promise<any>;
    };
    accessKey: {
        exchange: (accessKey: string, loginOptions?: _1.AccessKeyLoginOptions) => Promise<_1.SdkResponse<_1.ExchangeAccessKeyResponse>>;
    };
    otp: {
        verify: {
            sms: (loginId: string, code: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
            voice: (loginId: string, code: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
            whatsapp: (loginId: string, code: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
            email: (loginId: string, code: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        };
        signIn: {
            sms: (loginId: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUp: {
            sms: (loginId: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUpOrIn: {
            sms: (loginId: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        update: {
            email: <T_5 extends boolean>(loginId: string, email: string, token?: string, updateOptions?: {
                addToLoginIDs?: T_5;
                onMergeUseExisting?: T_5 extends true ? boolean : never;
                templateOptions?: {
                    [x: string]: string;
                };
                templateId?: string;
                providerId?: string;
            }) => Promise<_1.SdkResponse<{
                maskedEmail: string;
            }>>;
            phone: {
                sms: <T_1_3 extends boolean>(loginId: string, phone: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_1_3;
                    onMergeUseExisting?: T_1_3 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                    templateId?: string;
                    providerId?: string;
                }) => Promise<_1.SdkResponse<{
                    maskedPhone: string;
                }>>;
                voice: <T_1_4 extends boolean>(loginId: string, phone: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_1_4;
                    onMergeUseExisting?: T_1_4 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                    templateId?: string;
                    providerId?: string;
                }) => Promise<_1.SdkResponse<{
                    maskedPhone: string;
                }>>;
                whatsapp: <T_1_5 extends boolean>(loginId: string, phone: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_1_5;
                    onMergeUseExisting?: T_1_5 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                    templateId?: string;
                    providerId?: string;
                }) => Promise<_1.SdkResponse<{
                    maskedPhone: string;
                }>>;
            };
        };
    };
    magicLink: {
        verify: (token: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        signIn: {
            sms: (loginId: string, URI: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, URI: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, URI: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, URI: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUp: {
            sms: (loginId: string, URI: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, URI: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, URI: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, URI: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUpOrIn: {
            sms: (loginId: string, URI?: string, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, URI?: string, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, URI?: string, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, URI?: string, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        update: {
            email: <T_2_1 extends boolean>(loginId: string, email: string, URI?: string, token?: string, updateOptions?: {
                addToLoginIDs?: T_2_1;
                onMergeUseExisting?: T_2_1 extends true ? boolean : never;
                templateOptions?: {
                    [x: string]: string;
                };
                templateId?: string;
                providerId?: string;
            }) => Promise<_1.SdkResponse<{
                maskedEmail: string;
            }>>;
            phone: {
                sms: <T_3_3 extends boolean>(loginId: string, phone: string, URI?: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_3_3;
                    onMergeUseExisting?: T_3_3 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                    templateId?: string;
                    providerId?: string;
                }) => Promise<_1.SdkResponse<{
                    maskedPhone: string;
                }>>;
                voice: <T_3_4 extends boolean>(loginId: string, phone: string, URI?: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_3_4;
                    onMergeUseExisting?: T_3_4 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                    templateId?: string;
                    providerId?: string;
                }) => Promise<_1.SdkResponse<{
                    maskedPhone: string;
                }>>;
                whatsapp: <T_3_5 extends boolean>(loginId: string, phone: string, URI?: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_3_5;
                    onMergeUseExisting?: T_3_5 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                    templateId?: string;
                    providerId?: string;
                }) => Promise<_1.SdkResponse<{
                    maskedPhone: string;
                }>>;
            };
        };
    };
    enchantedLink: {
        verify: (token: string) => Promise<_1.SdkResponse<never>>;
        signIn: (loginId: string, URI?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.EnchantedLinkResponse>>;
        signUpOrIn: (loginId: string, URI?: string, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateId?: string;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_1.SdkResponse<_1.EnchantedLinkResponse>>;
        signUp: (loginId: string, URI?: string, user?: {
            email?: string;
            name?: string;
            givenName?: string;
            middleName?: string;
            familyName?: string;
            phone?: string;
        }, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateId?: string;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_1.SdkResponse<_1.EnchantedLinkResponse>>;
        waitForSession: (pendingRef: string, config?: {
            pollingIntervalMs: number;
            timeoutMs: number;
        }) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        update: {
            email: <T_4_1 extends boolean>(loginId: string, email: string, URI?: string, token?: string, updateOptions?: {
                addToLoginIDs?: T_4_1;
                onMergeUseExisting?: T_4_1 extends true ? boolean : never;
                templateOptions?: {
                    [x: string]: string;
                };
                templateId?: string;
                providerId?: string;
            }) => Promise<_1.SdkResponse<_1.EnchantedLinkResponse>>;
        };
    };
    oauth: {
        start: ((provider: string, redirectUrl?: string, loginOptions?: _1.LoginOptions, token?: string, loginHint?: string) => Promise<_1.SdkResponse<_1.ResponseData>>) & {
            google: (redirectURL?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
            facebook: (redirectURL?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
            github: (redirectURL?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
            microsoft: (redirectURL?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
            gitlab: (redirectURL?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
            apple: (redirectURL?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
            discord: (redirectURL?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
            linkedin: (redirectURL?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
            slack: (redirectURL?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
        };
        exchange: (code: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        startNative: (provider: string, loginOptions?: _1.LoginOptions, implicit?: boolean) => Promise<_1.SdkResponse<_1.ResponseData>>;
        finishNative: (provider: string, stateId: string, user?: string, code?: string, idToken?: string) => Promise<_1.SdkResponse<_1.ResponseData>>;
        getOneTapClientId: (provider: string) => Promise<_1.SdkResponse<{
            clientId: string;
        }>>;
        verifyOneTapIDToken: (provider: string, idToken: string, nonce: string, loginOptions?: _1.LoginOptions) => Promise<_1.SdkResponse<{
            code: string;
        }>>;
        exchangeOneTapIDToken: (provider: string, idToken: string, nonce: string, loginOptions?: _1.LoginOptions) => Promise<_1.SdkResponse<_1.JWTResponse>>;
    };
    outbound: {
        connect: (appId: string, options?: {
            redirectUrl?: string;
            scopes?: string[];
            tenantId?: string;
            tenantLevel?: boolean;
        }, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
    };
    saml: {
        start: (tenantIdOrEmail: string, redirectUrl?: string, loginOptions?: _1.LoginOptions, token?: string, ssoId?: string, forceAuthn?: boolean, loginHint?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
        exchange: (code: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
    };
    totp: {
        signUp: (loginId: string, user?: {
            email?: string;
            name?: string;
            givenName?: string;
            middleName?: string;
            familyName?: string;
            phone?: string;
        }) => Promise<_1.SdkResponse<_1.TOTPResponse>>;
        verify: (loginId: string, code: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        update: (loginId: string, token?: string) => Promise<_1.SdkResponse<_1.TOTPResponse>>;
    };
    notp: {
        signUpOrIn: (loginId?: string, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateId?: string;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_1.SdkResponse<{
            pendingRef: string;
            redirectUrl: string;
            image: string;
        }>>;
        signUp: (loginId?: string, user?: {
            email?: string;
            name?: string;
            givenName?: string;
            middleName?: string;
            familyName?: string;
            phone?: string;
        }, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateId?: string;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_1.SdkResponse<{
            pendingRef: string;
            redirectUrl: string;
            image: string;
        }>>;
        signIn: (loginId?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
            pendingRef: string;
            redirectUrl: string;
            image: string;
        }>>;
        waitForSession: (pendingRef: string, config?: {
            pollingIntervalMs: number;
            timeoutMs: number;
        }) => Promise<_1.SdkResponse<_1.JWTResponse>>;
    };
    password: {
        signUp: (loginId: string, password: string, user?: {
            email?: string;
            name?: string;
            givenName?: string;
            middleName?: string;
            familyName?: string;
            phone?: string;
        }, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateId?: string;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        signIn: (loginId: string, password: string, loginOptions?: _1.LoginOptions) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        sendReset: (loginId: string, redirectUrl?: string, templateOptions?: {
            [x: string]: string;
        }) => Promise<_1.SdkResponse<{
            resetMethod: string;
            pendingRef?: string;
            linkId?: string;
            maskedEmail: string;
        }>>;
        update: (loginId: string, newPassword: string, token?: string) => Promise<_1.SdkResponse<never>>;
        replace: (loginId: string, oldPassword: string, newPassword: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        policy: () => Promise<_1.SdkResponse<{
            minLength: number;
            lowercase: boolean;
            uppercase: boolean;
            number: boolean;
            nonAlphanumeric: boolean;
        }>>;
    };
    selectTenant: (tenantId: string, token?: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
    logoutAll: (token?: string) => Promise<_1.SdkResponse<never>>;
    me: (token?: string) => Promise<_1.SdkResponse<_1.UserResponse>>;
    myTenants: (tenants: true | string[], token?: string) => Promise<_1.SdkResponse<{
        tenants: {
            id: string;
            name: string;
            customAttributes?: Record<string, any>;
        }[];
    }>>;
    history: (token?: string) => Promise<_1.SdkResponse<_1.UserHistoryResponse>>;
    isJwtExpired: (token: string) => boolean;
    getTenants: (token: string) => string[];
    getJwtPermissions: (token: string, tenant?: string) => string[];
    getJwtRoles: (token: string, tenant?: string) => string[];
    getCurrentTenant: (token: string) => string;
    httpClient: _1.HttpClient;
} | {
    refresh: (token?: string, tryRefresh?: boolean) => Promise<_1.SdkResponse<_1.JWTResponse>>;
    logout: (token?: string) => Promise<_1.SdkResponse<never>>;
    flow: {
        start: (flowId: string, options?: Pick<{
            redirectUrl?: string;
            location?: string;
            tenant?: string;
            deviceInfo?: {
                webAuthnSupport?: boolean;
            };
            lastAuth?: {
                authMethod?: "webauthn" | "otp" | "oauth" | "saml" | "totp" | "magiclink" | "enchantedlink";
                oauthProvider?: string;
                name?: string;
                loginId?: string;
            };
            redirectAuth?: {
                callbackUrl: string;
                codeChallenge: string;
            };
            oidcIdpStateId?: string;
            preview?: boolean;
            samlIdpStateId?: string;
            samlIdpUsername?: string;
            ssoAppId?: string;
            thirdPartyAppId?: string;
            oidcLoginHint?: string;
            abTestingKey?: number;
            startOptionsVersion?: number;
            client?: Record<string, any>;
            locale?: string;
            oidcPrompt?: string;
            oidcErrorRedirectUri?: string;
            oidcResource?: string;
            nativeOptions?: {
                platform: "ios" | "android";
                oauthProvider?: string;
                oauthRedirect?: string;
            };
            thirdPartyAppStateId?: string;
            applicationScopes?: string;
            outboundAppId?: string;
            outboundAppScopes?: string[];
        }, "tenant" | "redirectUrl" | "redirectAuth" | "oidcIdpStateId" | "samlIdpStateId" | "samlIdpUsername" | "ssoAppId" | "thirdPartyAppId" | "oidcLoginHint" | "preview" | "abTestingKey" | "client" | "locale" | "oidcPrompt" | "oidcErrorRedirectUri" | "oidcResource" | "nativeOptions" | "thirdPartyAppStateId" | "applicationScopes" | "outboundAppId" | "outboundAppScopes"> & {
            lastAuth?: Omit<{
                authMethod?: "webauthn" | "otp" | "oauth" | "saml" | "totp" | "magiclink" | "enchantedlink";
                oauthProvider?: string;
                name?: string;
                loginId?: string;
            }, "loginId" | "name">;
        }, conditionInteractionId?: string, interactionId?: string, componentsVersion?: string, flowVersions?: Record<string, number>, input?: {
            [x: string]: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any[])[])[])[])[])[])[])[])[])[])[];
        }) => Promise<_1.SdkResponse<_1.FlowResponse>>;
        next: (executionId: string, stepId: string, interactionId: string, version?: number, componentsVersion?: string, input?: {
            [x: string]: string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any[])[])[])[])[])[])[])[])[])[])[];
        }) => Promise<_1.SdkResponse<_1.FlowResponse>>;
    };
    webauthn: {
        signUp: ((identifier: string, name: string, passkeyOptions?: _1.PasskeyOptions) => Promise<_1.SdkResponse<_1.JWTResponse>>) & {
            start: (loginId: string, origin: string, name: string, passkeyOptions?: _1.PasskeyOptions) => Promise<_1.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
            finish: (transactionId: string, response: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        };
        signIn: ((identifier: string, passkeyOptions?: _1.PasskeyOptions) => Promise<_1.SdkResponse<_1.JWTResponse>>) & {
            start: (loginId: string, origin: string, loginOptions?: _1.LoginOptions, token?: string, passkeyOptions?: _1.PasskeyOptions) => Promise<_1.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
            finish: (transactionId: string, response: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        };
        signUpOrIn: ((identifier: string, passkeyOptions?: _1.PasskeyOptions) => Promise<_1.SdkResponse<_1.JWTResponse>>) & {
            start: (loginId: string, origin: string, passkeyOptions?: _1.PasskeyOptions) => Promise<_1.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
        };
        update: ((identifier: string, token?: string, passkeyOptions?: _1.PasskeyOptions) => Promise<_1.SdkResponse<_1.ResponseData>>) & {
            start: (loginId: string, origin: string, token?: string, passkeyOptions?: _1.PasskeyOptions) => Promise<_1.SdkResponse<{
                transactionId: string;
                options: string;
                create: boolean;
            }>>;
            finish: (transactionId: string, response: string) => Promise<_1.SdkResponse<_1.ResponseData>>;
        };
        helpers: {
            create: (options: string) => Promise<string>;
            get: (options: string) => Promise<string>;
            isSupported: (requirePlatformAuthenticator?: boolean) => Promise<boolean>;
            conditional: (options: string, abort: AbortController) => Promise<string>;
        };
    };
    fedcm: {
        onetap: {
            requestExchangeCode(options: {
                provider?: string;
                oneTapConfig?: _descope_web_js_sdk.OneTapConfig;
                loginOptions?: _1.LoginOptions;
                onSkipped?: (reason?: string) => void;
                onDismissed?: (reason?: string) => void;
                onFailed?: (error: Error) => void;
                onCodeReceived: (code: string) => void;
            }): void;
            requestAuthentication(options?: {
                provider?: string;
                oneTapConfig?: _descope_web_js_sdk.OneTapConfig;
                loginOptions?: _1.LoginOptions;
                onSkipped?: (reason?: string) => void;
                onDismissed?: (reason?: string) => void;
                onFailed?: (error: Error) => void;
                onAuthenticated?: (response: _1.JWTResponse) => void;
            }): void;
        };
        oneTap(provider?: string, oneTapConfig?: _descope_web_js_sdk.OneTapConfig, loginOptions?: _1.LoginOptions, onSkipped?: (reason?: string) => void, onDismissed?: (reason?: string) => void): Promise<void>;
        launch(context?: "signin" | "signup" | "use" | "continue"): Promise<_1.SdkResponse<_1.JWTResponse>>;
        isSupported(): boolean;
        isLoggedIn(context?: "signin" | "signup" | "use" | "continue"): Promise<boolean>;
    };
    oidc: {
        loginWithRedirect: (arg?: _2.CreateSigninRequestArgs, disableNavigation?: boolean) => Promise<_1.SdkResponse<_1.URLResponse>>;
        finishLogin: (url?: string) => Promise<any>;
        finishLoginIfNeed: (url?: string) => Promise<any>;
        refreshToken: (refreshToken: string) => Promise<_2.SigninResponse>;
        logout: (arg?: _2.CreateSignoutRequestArgs, disableNavigation?: boolean) => Promise<_1.SdkResponse<_1.ResponseData>>;
    };
    accessKey: {
        exchange: (accessKey: string, loginOptions?: _1.AccessKeyLoginOptions) => Promise<_1.SdkResponse<_1.ExchangeAccessKeyResponse>>;
    };
    otp: {
        verify: {
            sms: (loginId: string, code: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
            voice: (loginId: string, code: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
            whatsapp: (loginId: string, code: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
            email: (loginId: string, code: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        };
        signIn: {
            sms: (loginId: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUp: {
            sms: (loginId: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUpOrIn: {
            sms: (loginId: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        update: {
            email: <T_6 extends boolean>(loginId: string, email: string, token?: string, updateOptions?: {
                addToLoginIDs?: T_6;
                onMergeUseExisting?: T_6 extends true ? boolean : never;
                templateOptions?: {
                    [x: string]: string;
                };
                templateId?: string;
                providerId?: string;
            }) => Promise<_1.SdkResponse<{
                maskedEmail: string;
            }>>;
            phone: {
                sms: <T_1_6 extends boolean>(loginId: string, phone: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_1_6;
                    onMergeUseExisting?: T_1_6 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                    templateId?: string;
                    providerId?: string;
                }) => Promise<_1.SdkResponse<{
                    maskedPhone: string;
                }>>;
                voice: <T_1_7 extends boolean>(loginId: string, phone: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_1_7;
                    onMergeUseExisting?: T_1_7 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                    templateId?: string;
                    providerId?: string;
                }) => Promise<_1.SdkResponse<{
                    maskedPhone: string;
                }>>;
                whatsapp: <T_1_8 extends boolean>(loginId: string, phone: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_1_8;
                    onMergeUseExisting?: T_1_8 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                    templateId?: string;
                    providerId?: string;
                }) => Promise<_1.SdkResponse<{
                    maskedPhone: string;
                }>>;
            };
        };
    };
    magicLink: {
        verify: (token: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        signIn: {
            sms: (loginId: string, URI: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, URI: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, URI: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, URI: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUp: {
            sms: (loginId: string, URI: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, URI: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, URI: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, URI: string, user?: {
                email?: string;
                name?: string;
                givenName?: string;
                middleName?: string;
                familyName?: string;
                phone?: string;
            }, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        signUpOrIn: {
            sms: (loginId: string, URI?: string, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            voice: (loginId: string, URI?: string, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            whatsapp: (loginId: string, URI?: string, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedPhone: string;
            }>>;
            email: (loginId: string, URI?: string, signUpOptions?: {
                customClaims?: Record<string, any>;
                templateId?: string;
                templateOptions?: {
                    [x: string]: string;
                };
            }) => Promise<_1.SdkResponse<{
                maskedEmail: string;
            }>>;
        };
        update: {
            email: <T_2_2 extends boolean>(loginId: string, email: string, URI?: string, token?: string, updateOptions?: {
                addToLoginIDs?: T_2_2;
                onMergeUseExisting?: T_2_2 extends true ? boolean : never;
                templateOptions?: {
                    [x: string]: string;
                };
                templateId?: string;
                providerId?: string;
            }) => Promise<_1.SdkResponse<{
                maskedEmail: string;
            }>>;
            phone: {
                sms: <T_3_6 extends boolean>(loginId: string, phone: string, URI?: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_3_6;
                    onMergeUseExisting?: T_3_6 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                    templateId?: string;
                    providerId?: string;
                }) => Promise<_1.SdkResponse<{
                    maskedPhone: string;
                }>>;
                voice: <T_3_7 extends boolean>(loginId: string, phone: string, URI?: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_3_7;
                    onMergeUseExisting?: T_3_7 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                    templateId?: string;
                    providerId?: string;
                }) => Promise<_1.SdkResponse<{
                    maskedPhone: string;
                }>>;
                whatsapp: <T_3_8 extends boolean>(loginId: string, phone: string, URI?: string, token?: string, updateOptions?: {
                    addToLoginIDs?: T_3_8;
                    onMergeUseExisting?: T_3_8 extends true ? boolean : never;
                    templateOptions?: {
                        [x: string]: string;
                    };
                    templateId?: string;
                    providerId?: string;
                }) => Promise<_1.SdkResponse<{
                    maskedPhone: string;
                }>>;
            };
        };
    };
    enchantedLink: {
        verify: (token: string) => Promise<_1.SdkResponse<never>>;
        signIn: (loginId: string, URI?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.EnchantedLinkResponse>>;
        signUpOrIn: (loginId: string, URI?: string, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateId?: string;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_1.SdkResponse<_1.EnchantedLinkResponse>>;
        signUp: (loginId: string, URI?: string, user?: {
            email?: string;
            name?: string;
            givenName?: string;
            middleName?: string;
            familyName?: string;
            phone?: string;
        }, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateId?: string;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_1.SdkResponse<_1.EnchantedLinkResponse>>;
        waitForSession: (pendingRef: string, config?: {
            pollingIntervalMs: number;
            timeoutMs: number;
        }) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        update: {
            email: <T_4_2 extends boolean>(loginId: string, email: string, URI?: string, token?: string, updateOptions?: {
                addToLoginIDs?: T_4_2;
                onMergeUseExisting?: T_4_2 extends true ? boolean : never;
                templateOptions?: {
                    [x: string]: string;
                };
                templateId?: string;
                providerId?: string;
            }) => Promise<_1.SdkResponse<_1.EnchantedLinkResponse>>;
        };
    };
    oauth: {
        start: ((provider: string, redirectUrl?: string, loginOptions?: _1.LoginOptions, token?: string, loginHint?: string) => Promise<_1.SdkResponse<_1.ResponseData>>) & {
            google: (redirectURL?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
            facebook: (redirectURL?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
            github: (redirectURL?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
            microsoft: (redirectURL?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
            gitlab: (redirectURL?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
            apple: (redirectURL?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
            discord: (redirectURL?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
            linkedin: (redirectURL?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
            slack: (redirectURL?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
        };
        exchange: (code: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        startNative: (provider: string, loginOptions?: _1.LoginOptions, implicit?: boolean) => Promise<_1.SdkResponse<_1.ResponseData>>;
        finishNative: (provider: string, stateId: string, user?: string, code?: string, idToken?: string) => Promise<_1.SdkResponse<_1.ResponseData>>;
        getOneTapClientId: (provider: string) => Promise<_1.SdkResponse<{
            clientId: string;
        }>>;
        verifyOneTapIDToken: (provider: string, idToken: string, nonce: string, loginOptions?: _1.LoginOptions) => Promise<_1.SdkResponse<{
            code: string;
        }>>;
        exchangeOneTapIDToken: (provider: string, idToken: string, nonce: string, loginOptions?: _1.LoginOptions) => Promise<_1.SdkResponse<_1.JWTResponse>>;
    };
    outbound: {
        connect: (appId: string, options?: {
            redirectUrl?: string;
            scopes?: string[];
            tenantId?: string;
            tenantLevel?: boolean;
        }, token?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
    };
    saml: {
        start: (tenantIdOrEmail: string, redirectUrl?: string, loginOptions?: _1.LoginOptions, token?: string, ssoId?: string, forceAuthn?: boolean, loginHint?: string) => Promise<_1.SdkResponse<_1.URLResponse>>;
        exchange: (code: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
    };
    totp: {
        signUp: (loginId: string, user?: {
            email?: string;
            name?: string;
            givenName?: string;
            middleName?: string;
            familyName?: string;
            phone?: string;
        }) => Promise<_1.SdkResponse<_1.TOTPResponse>>;
        verify: (loginId: string, code: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        update: (loginId: string, token?: string) => Promise<_1.SdkResponse<_1.TOTPResponse>>;
    };
    notp: {
        signUpOrIn: (loginId?: string, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateId?: string;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_1.SdkResponse<{
            pendingRef: string;
            redirectUrl: string;
            image: string;
        }>>;
        signUp: (loginId?: string, user?: {
            email?: string;
            name?: string;
            givenName?: string;
            middleName?: string;
            familyName?: string;
            phone?: string;
        }, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateId?: string;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_1.SdkResponse<{
            pendingRef: string;
            redirectUrl: string;
            image: string;
        }>>;
        signIn: (loginId?: string, loginOptions?: _1.LoginOptions, token?: string) => Promise<_1.SdkResponse<{
            pendingRef: string;
            redirectUrl: string;
            image: string;
        }>>;
        waitForSession: (pendingRef: string, config?: {
            pollingIntervalMs: number;
            timeoutMs: number;
        }) => Promise<_1.SdkResponse<_1.JWTResponse>>;
    };
    password: {
        signUp: (loginId: string, password: string, user?: {
            email?: string;
            name?: string;
            givenName?: string;
            middleName?: string;
            familyName?: string;
            phone?: string;
        }, signUpOptions?: {
            customClaims?: Record<string, any>;
            templateId?: string;
            templateOptions?: {
                [x: string]: string;
            };
        }) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        signIn: (loginId: string, password: string, loginOptions?: _1.LoginOptions) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        sendReset: (loginId: string, redirectUrl?: string, templateOptions?: {
            [x: string]: string;
        }) => Promise<_1.SdkResponse<{
            resetMethod: string;
            pendingRef?: string;
            linkId?: string;
            maskedEmail: string;
        }>>;
        update: (loginId: string, newPassword: string, token?: string) => Promise<_1.SdkResponse<never>>;
        replace: (loginId: string, oldPassword: string, newPassword: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
        policy: () => Promise<_1.SdkResponse<{
            minLength: number;
            lowercase: boolean;
            uppercase: boolean;
            number: boolean;
            nonAlphanumeric: boolean;
        }>>;
    };
    selectTenant: (tenantId: string, token?: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;
    logoutAll: (token?: string) => Promise<_1.SdkResponse<never>>;
    me: (token?: string) => Promise<_1.SdkResponse<_1.UserResponse>>;
    myTenants: (tenants: true | string[], token?: string) => Promise<_1.SdkResponse<{
        tenants: {
            id: string;
            name: string;
            customAttributes?: Record<string, any>;
        }[];
    }>>;
    history: (token?: string) => Promise<_1.SdkResponse<_1.UserHistoryResponse>>;
    isJwtExpired: (token: string) => boolean;
    getTenants: (token: string) => string[];
    getJwtPermissions: (token: string, tenant?: string) => string[];
    getJwtRoles: (token: string, tenant?: string) => string[];
    getCurrentTenant: (token: string) => string;
    httpClient: _1.HttpClient;
}) & {
    onSessionTokenChange: (cb: (data: string) => void) => () => any[];
    onUserChange: (cb: (data: _1.UserResponse) => void) => () => any[];
    onIsAuthenticatedChange: (cb: (isAuthenticated: boolean) => void) => () => any[];
}) & {
    getLastUserLoginId: () => string;
    getLastUserDisplayName: () => string;
}) & {
    getRefreshToken: () => string;
    getSessionToken: () => string;
    getIdToken: () => string;
};
declare const getSessionToken: () => string;
declare const getRefreshToken: () => string;
declare const isSessionTokenExpired: (token?: string) => boolean;
declare const isRefreshTokenExpired: (token?: string) => boolean;
declare const getJwtPermissions: (token?: any, tenant?: string) => string[];
declare const getJwtRoles: (token?: any, tenant?: string) => string[];
declare const getCurrentTenant: (token?: any) => string;
declare const refresh: (token?: string) => Promise<_1.SdkResponse<_1.JWTResponse>>;

declare global {
    namespace JSX {
        interface IntrinsicElements {
            ['descope-wc']: DescopeCustomElement;
            ['descope-user-management-widget']: UserManagementCustomElement;
            ['descope-role-management-widget']: RoleManagementCustomElement;
            ['descope-access-key-management-widget']: AccessKeyManagementCustomElement;
            ['descope-audit-management-widget']: AuditManagementCustomElement;
            ['descope-user-profile-widget']: UserProfileCustomElement;
            ['descope-applications-portal-widget']: ApplicationsPortalCustomElement;
            ['descope-tenant-profile-widget']: TenantProfileCustomElement;
        }
    }
}
type WidgetProps = {
    logger?: ILogger;
    tenant: string;
    widgetId: string;
    theme?: ThemeOptions;
    debug?: boolean;
    styleId?: string;
};
type FlowResponse = Awaited<ReturnType<Sdk['flow']['next']>>;
type ErrorResponse = Required<FlowResponse>['error'];
type JWTResponse = Required<Required<FlowResponse>['data']>['authInfo'];
type CustomEventCb<T extends Record<string, any>> = (e: CustomEvent<T>) => void;
type Sdk = ReturnType<typeof createSdkWrapper>;
type CustomElement<T> = Partial<T & DOMAttributes<T> & {
    children: React.ReactNode;
    ref: React.Ref<HTMLElement>;
}>;
type DescopeCustomElement = CustomElement<_descope_web_component__default>;
type UserManagementCustomElement = CustomElement<typeof UserManagementWidget & UserManagementProps>;
type RoleManagementCustomElement = CustomElement<typeof RoleManagementWidget & RoleManagementProps>;
type AccessKeyManagementCustomElement = CustomElement<typeof AccessKeyManagementWidget & AccessKeyManagementProps>;
type AuditManagementCustomElement = CustomElement<typeof AuditManagementWidget & AuditManagementProps>;
type UserProfileCustomElement = CustomElement<typeof UserProfileWidget & UserProfileProps>;
type ApplicationsPortalCustomElement = CustomElement<typeof ApplicationsPortalWidget & ApplicationsPortalProps>;
type TenantProfileCustomElement = CustomElement<typeof TenantProfileWidget & TenantProfileProps>;
type DescopeProps = {
    flowId: string;
    onSuccess?: CustomEventCb<JWTResponse>;
    onError?: CustomEventCb<ErrorResponse>;
    onReady?: CustomEventCb<{}>;
    logger?: ILogger;
    tenant?: string;
    theme?: ThemeOptions;
    locale?: string;
    nonce?: string;
    autoFocus?: AutoFocusOptions;
    validateOnBlur?: boolean;
    restartOnError?: boolean;
    debug?: boolean;
    telemetryKey?: string;
    redirectUrl?: string;
    outboundAppId?: string;
    outboundAppScopes?: string[];
    errorTransformer?: (error: {
        text: string;
        type: string;
    }) => string;
    form?: Record<string, any>;
    client?: Record<string, any>;
    styleId?: string;
    dismissScreenErrorOnInput?: boolean;
    onScreenUpdate?: (screenName: string, context: Record<string, any>, next: (interactionId: string, form: Record<string, any>) => Promise<unknown>, ref: HTMLElement) => boolean | Promise<boolean>;
    children?: React.ReactNode;
    externalRequestId?: string;
};
type UserManagementProps = WidgetProps;
type RoleManagementProps = WidgetProps;
type AccessKeyManagementProps = WidgetProps;
type AuditManagementProps = WidgetProps;
type UserProfileProps = Omit<WidgetProps, 'tenant'> & {
    onLogout?: (e: CustomEvent) => void;
};
type ApplicationsPortalProps = Omit<WidgetProps, 'tenant'> & {
    onLogout?: (e: CustomEvent) => void;
};
type TenantProfileProps = WidgetProps;

type DefaultFlowProps = Omit<DescopeProps, 'flowId'>;

declare const SignInFlow: (props: DefaultFlowProps) => React.JSX.Element;
declare const SignUpFlow: (props: DefaultFlowProps) => React.JSX.Element;
declare const SignUpOrInFlow: (props: DefaultFlowProps) => React.JSX.Element;

declare const Descope: React.ForwardRefExoticComponent<DescopeProps & React.RefAttributes<HTMLElement>>;

declare const useDescope: () => Sdk;

declare const useSession: () => {
    isSessionLoading: boolean;
    sessionToken: string;
    isAuthenticated: boolean;
};

declare const useUser: () => {
    isUserLoading: boolean;
    user: _1.UserResponse;
};

declare const baseHeaders: {
    'x-descope-sdk-name': string;
    'x-descope-sdk-version': string;
};

declare const AccessKeyManagement: React.ForwardRefExoticComponent<{
    logger?: Partial<any>;
    tenant: string;
    widgetId: string;
    theme?: _descope_web_component.ThemeOptions;
    debug?: boolean;
    styleId?: string;
} & React.RefAttributes<HTMLElement>>;

declare const ApplicationsPortal: React.ForwardRefExoticComponent<Omit<{
    logger?: Partial<any>;
    tenant: string;
    widgetId: string;
    theme?: _descope_web_component.ThemeOptions;
    debug?: boolean;
    styleId?: string;
}, "tenant"> & {
    onLogout?: (e: CustomEvent<any>) => void;
} & React.RefAttributes<HTMLElement>>;

declare const AuditManagement: React.ForwardRefExoticComponent<{
    logger?: Partial<any>;
    tenant: string;
    widgetId: string;
    theme?: _descope_web_component.ThemeOptions;
    debug?: boolean;
    styleId?: string;
} & React.RefAttributes<HTMLElement>>;

declare const RoleManagement: React.ForwardRefExoticComponent<{
    logger?: Partial<any>;
    tenant: string;
    widgetId: string;
    theme?: _descope_web_component.ThemeOptions;
    debug?: boolean;
    styleId?: string;
} & React.RefAttributes<HTMLElement>>;

declare const TenantProfile: React.ForwardRefExoticComponent<{
    logger?: Partial<any>;
    tenant: string;
    widgetId: string;
    theme?: _descope_web_component.ThemeOptions;
    debug?: boolean;
    styleId?: string;
} & React.RefAttributes<HTMLElement>>;

declare const UserManagement: React.ForwardRefExoticComponent<{
    logger?: Partial<any>;
    tenant: string;
    widgetId: string;
    theme?: _descope_web_component.ThemeOptions;
    debug?: boolean;
    styleId?: string;
} & React.RefAttributes<HTMLElement>>;

declare const UserProfile: React.ForwardRefExoticComponent<Omit<{
    logger?: Partial<any>;
    tenant: string;
    widgetId: string;
    theme?: _descope_web_component.ThemeOptions;
    debug?: boolean;
    styleId?: string;
}, "tenant"> & {
    onLogout?: (e: CustomEvent<any>) => void;
} & React.RefAttributes<HTMLElement>>;

export { AccessKeyManagement, ApplicationsPortal, AuditManagement, AuthProvider, Descope, RoleManagement, SignInFlow, SignUpFlow, SignUpOrInFlow, TenantProfile, UserManagement, UserProfile, baseHeaders, getCurrentTenant, getJwtPermissions, getJwtRoles, getRefreshToken, getSessionToken, isRefreshTokenExpired, isSessionTokenExpired, refresh, useDescope, useSession, useUser };
