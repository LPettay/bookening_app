{"version":3,"file":"useDescope.js","sources":["../../../src/hooks/useDescope.ts"],"sourcesContent":["import { useMemo } from 'react';\nimport { Sdk } from '../types';\nimport useContext from './useContext';\nimport { createTempSdk } from '../sdk';\n\nconst generateErrorMsg = (entryType: string) =>\n  `You can only use this ${entryType} after sdk initialization. Make sure to supply 'projectId' to <AuthProvider /> component`;\n\n// handler which throw an error for every SDK function\nconst proxyThrowHandler = {\n  // eslint-disable-next-line prefer-arrow/prefer-arrow-functions\n  get(target: Record<string, any>, key: string) {\n    if (typeof target[key] === 'object' && target[key] !== null) {\n      return new Proxy(target[key], proxyThrowHandler);\n    }\n\n    if (typeof target[key] === 'function') {\n      return () => {\n        throw Error(generateErrorMsg('function'));\n      };\n    }\n\n    throw Error(generateErrorMsg('attribute'));\n  },\n};\n\nconst useDescope = (): Sdk => {\n  const { sdk } = useContext();\n\n  return useMemo(() => {\n    if (!sdk) {\n      // In case the SDK is not initialized, we want to throw an error when the SDK functions are called\n      return new Proxy(createTempSdk(), proxyThrowHandler) as Sdk;\n    }\n\n    return sdk;\n  }, [sdk]);\n};\n\nexport default useDescope;\n"],"names":["generateErrorMsg","entryType","proxyThrowHandler","get","target","key","Proxy","Error","useDescope","sdk","useContext","useMemo","createTempSdk"],"mappings":"yGAKA,MAAMA,EAAoBC,GACxB,yBAAyBA,4FAGrBC,EAAoB,CAExB,GAAAC,CAAIC,EAA6BC,GAC/B,GAA2B,iBAAhBD,EAAOC,IAAqC,OAAhBD,EAAOC,GAC5C,OAAO,IAAIC,MAAMF,EAAOC,GAAMH,GAGhC,GAA2B,mBAAhBE,EAAOC,GAChB,MAAO,KACL,MAAME,MAAMP,EAAiB,YAAY,EAI7C,MAAMO,MAAMP,EAAiB,aAC9B,GAGGQ,EAAa,KACjB,MAAMC,IAAEA,GAAQC,IAEhB,OAAOC,GAAQ,IACRF,GAEI,IAAIH,MAAMM,IAAiBV,IAInC,CAACO,GAAK"}