{"version":3,"file":"types.js","sources":["../../src/lib/types.ts"],"sourcesContent":["/* istanbul ignore file */\n\nimport createSdk from '@descope/web-js-sdk';\n\nexport type SdkConfig = Parameters<typeof createSdk>[0];\nexport type Sdk = ReturnType<typeof createSdk>;\n\nexport type SdkFlowNext = Sdk['flow']['next'];\n\nexport type ComponentsDynamicAttrs = {\n  attributes: Record<string, any>;\n};\n\nexport type ComponentsConfig = Record<string, any> & {\n  componentsDynamicAttrs?: Record<string, ComponentsDynamicAttrs>;\n};\nexport type CssVars = Record<string, any>;\n\ntype KeepArgsByIndex<F, Indices extends readonly number[]> = F extends (\n  ...args: infer A\n) => infer R\n  ? (...args: PickArgsByIndex<A, Indices>) => R\n  : never;\n\ntype PickArgsByIndex<\n  All extends readonly any[],\n  Indices extends readonly number[],\n> = {\n  [K in keyof Indices]: Indices[K] extends keyof All ? All[Indices[K]] : never;\n};\n\ntype Project = {\n  name: string;\n};\n\nexport enum Direction {\n  backward = 'backward',\n  forward = 'forward',\n}\n\nexport interface LastAuthState {\n  loginId?: string;\n  name?: string;\n}\n\nexport interface ScreenState {\n  errorText?: string;\n  errorType?: string;\n  componentsConfig?: ComponentsConfig;\n  cssVars?: CssVars;\n  form?: Record<string, string>;\n  inputs?: Record<string, string>; // Backward compatibility\n  lastAuth?: LastAuthState;\n  project?: Project;\n  totp?: { image?: string; provisionUrl?: string };\n  notp?: { image?: string; redirectUrl?: string };\n  selfProvisionDomains?: unknown;\n  user?: unknown;\n  sso?: unknown;\n  dynamicSelects?: unknown;\n  keysInUse?: unknown;\n  genericForm?: unknown;\n  linkId?: unknown;\n  sentTo?: unknown;\n  clientScripts?: ClientScript[];\n}\n\nexport type SSOQueryParams = {\n  oidcIdpStateId?: string;\n  samlIdpStateId?: string;\n  samlIdpUsername?: string;\n  descopeIdpInitiated?: boolean;\n  ssoAppId?: string;\n  thirdPartyAppId: string;\n  thirdPartyAppStateId?: string;\n  applicationScopes?: string;\n} & OIDCOptions;\n\nexport type OIDCOptions = {\n  oidcLoginHint?: string;\n  oidcPrompt?: string;\n  oidcErrorRedirectUri?: string;\n  oidcResource?: string;\n};\n\nexport type Locale = {\n  locale: string;\n  fallback: string;\n};\n\nexport type FlowState = {\n  flowId: string;\n  projectId: string;\n  baseUrl: string;\n  tenant: string;\n  stepId: string;\n  stepName: string;\n  executionId: string;\n  action: string;\n  redirectTo: string;\n  redirectIsPopup: boolean;\n  openInNewTabUrl?: string;\n  redirectUrl: string;\n  screenId: string;\n  screenState: ScreenState;\n  token: string;\n  code: string;\n  isPopup: boolean;\n  exchangeError: string;\n  webauthnTransactionId: string;\n  webauthnOptions: string;\n  redirectAuthCodeChallenge: string;\n  redirectAuthCallbackUrl: string;\n  redirectAuthBackupCallbackUri: string;\n  redirectAuthInitiator: string;\n  deferredRedirect: boolean;\n  locale: string;\n  samlIdpResponseUrl: string;\n  samlIdpResponseSamlResponse: string;\n  samlIdpResponseRelayState: string;\n  nativeResponseType: string;\n  nativePayload: Record<string, any>;\n  reqTimestamp: number;\n} & SSOQueryParams;\n\nexport type StepState = {\n  screenState: ScreenState;\n  screenId: string;\n  stepName: string;\n  htmlFilename: string;\n  htmlLocaleFilename: string;\n  next: NextFn;\n  direction: Direction | undefined;\n  samlIdpUsername: string;\n  action?: string;\n} & OIDCOptions;\n\nexport type CustomScreenState = Omit<\n  ScreenState,\n  'cssVars' | 'componentsConfig' | 'inputs'\n> & {\n  error?: {\n    text: ScreenState['errorText'];\n    type: ScreenState['errorType'];\n  };\n  action?: string;\n  inboundAppApproveScopes?: {\n    desc: string;\n    id: string;\n    required: boolean;\n  }[];\n};\n\nexport type DebugState = {\n  isDebug: boolean;\n};\n\nexport interface ScriptElement extends HTMLDivElement {\n  moduleRes?: ScriptModule;\n}\n\nexport type ScriptModule = {\n  stop: () => void;\n  start: () => void;\n  /**\n   * Refreshes any tokens or state that might be needed before form submission\n   * Currently implemented for reCAPTCHA to ensure we have a fresh token\n   */\n  refresh?: () => Promise<void>;\n};\n\nexport type ClientScript = {\n  id: string;\n  initArgs: Record<string, any>;\n  resultKey?: string;\n};\n\nexport type NextFn = KeepArgsByIndex<SdkFlowNext, [2, 5]>;\nexport type NextFnReturnPromiseValue = Awaited<ReturnType<NextFn>>;\n\nexport type DebuggerMessage = {\n  title: string;\n  description?: string;\n};\n\nexport type FlowStateUpdateFn = (state: FlowState) => void;\n\ntype Operator =\n  | 'equal'\n  | 'not-equal'\n  | 'contains'\n  | 'greater-than'\n  | 'greater-than-or-equal'\n  | 'less-than'\n  | 'less-than-or-equal'\n  | 'empty'\n  | 'not-empty'\n  | 'is-true'\n  | 'is-false'\n  | 'in'\n  | 'not-in'\n  | 'in-range'\n  | 'not-in-range'\n  | 'devised-by';\n\nexport interface ClientConditionResult {\n  screenId: string;\n  screenName: string;\n  clientScripts?: ClientScript[];\n  componentsConfig?: ComponentsConfig;\n  interactionId: string;\n}\n\nexport interface ClientCondition {\n  operator: Operator;\n  key: string;\n  predicate?: string | number;\n  met: ClientConditionResult;\n  unmet?: ClientConditionResult;\n}\n\nexport type AutoFocusOptions = true | false | 'skipFirstScreen';\n\nexport type ThemeOptions = 'light' | 'dark' | 'os';\n\nexport type Key =\n  | 'lastAuth.loginId'\n  | 'idpInitiated'\n  | 'externalToken'\n  | 'abTestingKey';\n\ntype CheckFunction = (ctx: Context, predicate?: string | number) => boolean;\n\nexport type ConditionsMap = {\n  [key in Key]: {\n    [operator in Operator]?: CheckFunction;\n  };\n};\n\nexport interface Context {\n  loginId?: string;\n  code?: string;\n  token?: string;\n  abTestingKey?: number;\n  lastAuth?: LastAuthState;\n}\n\nexport type DescopeUI = Record<string, () => Promise<void>> & {\n  componentsThemeManager: Record<string, any>;\n};\n\ntype Font = {\n  family: string[];\n  label: string;\n  url?: string;\n};\n\ntype ThemeTemplate = {\n  fonts: {\n    font1: Font;\n    font2: Font;\n  };\n};\n\nexport type FlowConfig = {\n  startScreenId?: string;\n  startScreenName?: string;\n  version: number;\n  targetLocales?: string[];\n  conditions?: ClientCondition[];\n  condition?: ClientCondition;\n  fingerprintEnabled?: boolean;\n  fingerprintKey?: string;\n  sdkScripts?: [\n    {\n      id: string;\n      initArgs: Record<string, any>;\n      resultKey?: string;\n    },\n  ];\n  clientScripts?: ClientScript[];\n  componentsConfig?: ComponentsConfig;\n};\n\nexport interface ProjectConfiguration {\n  componentsVersion: string;\n  cssTemplate: {\n    dark: ThemeTemplate;\n    light: ThemeTemplate;\n  };\n  flows: {\n    [key: string]: FlowConfig; // dynamic key names for flows\n  };\n}\n\nexport type FlowStatus = 'loading' | 'error' | 'success' | 'ready' | 'initial';\n"],"names":["Direction"],"mappings":"aAmCA,IAAYA,EAAAA,QAGXA,eAAA,GAHWA,EAAAA,QAASA,YAATA,kBAGX,CAAA,IAFC,SAAA,WACAA,EAAA,QAAA"}