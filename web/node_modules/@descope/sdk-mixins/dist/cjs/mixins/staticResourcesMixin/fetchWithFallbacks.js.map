{"version":3,"file":"fetchWithFallbacks.js","sources":["../../../../src/mixins/staticResourcesMixin/fetchWithFallbacks.ts"],"sourcesContent":["import { Logger } from '../loggerMixin';\n\ntype FetchParams = Parameters<typeof fetch>;\nconst notLastMsgSuffix = 'Trying the next fallback URL...';\n\n// reties in case on network error\nconst fetchWithRetry = async (\n  url: string,\n  init: FetchParams['1'],\n  { logger }: { logger?: Logger } = {},\n) => {\n  try {\n    return await fetch(url, init);\n  } catch (e) {\n    // if there is an exception, we want to retry\n    // so we can overcome network errors\n    logger?.debug(\n      `Network error fetching URL ${url} [${e.message}], retrying...`,\n    );\n    return fetch(url, init);\n  }\n};\n\nexport const fetchWithFallbacks = async (\n  fallbacks: FetchParams['0'] | FetchParams['0'][],\n  init: FetchParams['1'],\n  {\n    logger,\n    onSuccess,\n  }: { logger?: Logger; onSuccess?: (urlIndex: number) => void } = {},\n): ReturnType<typeof fetch> => {\n  const fallbacksArr = Array.isArray(fallbacks) ? fallbacks : [fallbacks];\n\n  for (let index = 0; index < fallbacksArr.length; index++) {\n    const url = fallbacksArr[index];\n    const isLast = index === fallbacksArr.length - 1;\n\n    try {\n      const res = await fetchWithRetry(url.toString(), init, { logger });\n      if (res.ok) {\n        onSuccess?.(index);\n        logger?.debug(`Successfully fetched URL ${url}`);\n        return res;\n      }\n\n      const errMsg = `Error fetching URL ${url} [${res.status}]`;\n\n      if (isLast) throw new Error(errMsg);\n\n      logger?.debug(`${errMsg}. ${notLastMsgSuffix}`);\n    } catch (e) {\n      const errMsg = `Error fetching URL ${url} [${e.message}]`;\n\n      if (isLast) throw new Error(errMsg);\n\n      logger?.debug(`${errMsg}. ${notLastMsgSuffix}`);\n    }\n  }\n};\n"],"names":[],"mappings":";;AAGA,MAAM,gBAAgB,GAAG,iCAAiC,CAAC;AAE3D;AACA,MAAM,cAAc,GAAG,OACrB,GAAW,EACX,IAAsB,EACtB,EAAE,MAAM,EAA0B,GAAA,EAAE,KAClC;AACF,IAAA,IAAI;AACF,QAAA,OAAO,MAAM,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;KAC/B;IAAC,OAAO,CAAC,EAAE;;;AAGV,QAAA,MAAM,KAAN,IAAA,IAAA,MAAM,KAAN,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,MAAM,CAAE,KAAK,CACX,CAA8B,2BAAA,EAAA,GAAG,KAAK,CAAC,CAAC,OAAO,CAAA,cAAA,CAAgB,CAChE,CAAC;AACF,QAAA,OAAO,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;KACzB;AACH,CAAC,CAAC;AAEW,MAAA,kBAAkB,GAAG,OAChC,SAAgD,EAChD,IAAsB,EACtB,EACE,MAAM,EACN,SAAS,GACsD,GAAA,EAAE,KACvC;AAC5B,IAAA,MAAM,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,SAAS,GAAG,CAAC,SAAS,CAAC,CAAC;AAExE,IAAA,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,YAAY,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;AACxD,QAAA,MAAM,GAAG,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;QAChC,MAAM,MAAM,GAAG,KAAK,KAAK,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;AAEjD,QAAA,IAAI;AACF,YAAA,MAAM,GAAG,GAAG,MAAM,cAAc,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;AACnE,YAAA,IAAI,GAAG,CAAC,EAAE,EAAE;AACV,gBAAA,SAAS,aAAT,SAAS,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAT,SAAS,CAAG,KAAK,CAAC,CAAC;gBACnB,MAAM,KAAA,IAAA,IAAN,MAAM,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAN,MAAM,CAAE,KAAK,CAAC,CAA4B,yBAAA,EAAA,GAAG,CAAE,CAAA,CAAC,CAAC;AACjD,gBAAA,OAAO,GAAG,CAAC;aACZ;YAED,MAAM,MAAM,GAAG,CAAsB,mBAAA,EAAA,GAAG,KAAK,GAAG,CAAC,MAAM,CAAA,CAAA,CAAG,CAAC;AAE3D,YAAA,IAAI,MAAM;AAAE,gBAAA,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;AAEpC,YAAA,MAAM,KAAN,IAAA,IAAA,MAAM,KAAN,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,MAAM,CAAE,KAAK,CAAC,CAAA,EAAG,MAAM,CAAA,EAAA,EAAK,gBAAgB,CAAA,CAAE,CAAC,CAAC;SACjD;QAAC,OAAO,CAAC,EAAE;YACV,MAAM,MAAM,GAAG,CAAsB,mBAAA,EAAA,GAAG,KAAK,CAAC,CAAC,OAAO,CAAA,CAAA,CAAG,CAAC;AAE1D,YAAA,IAAI,MAAM;AAAE,gBAAA,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;AAEpC,YAAA,MAAM,KAAN,IAAA,IAAA,MAAM,KAAN,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,MAAM,CAAE,KAAK,CAAC,CAAA,EAAG,MAAM,CAAA,EAAA,EAAK,gBAAgB,CAAA,CAAE,CAAC,CAAC;SACjD;KACF;AACH;;;;"}