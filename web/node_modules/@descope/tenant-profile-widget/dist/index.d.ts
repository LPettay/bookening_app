import * as redux from 'redux';
import * as _reduxjs_toolkit from '@reduxjs/toolkit';
import createWebSdk from '@descope/web-js-sdk';
import * as _descope_sdk_mixins from '@descope/sdk-mixins';
import * as _descope_sdk_component_drivers from '@descope/sdk-component-drivers';

declare const createSdk: (config: Parameters<typeof createWebSdk>[0], tenant: string, mock: boolean, widgetId?: string) => {
    user: {
        me: () => Promise<any>;
    };
    tenant: {
        details: () => Promise<any>;
        adminLinkSso: () => Promise<any>;
    };
};
type Sdk = ReturnType<typeof createSdk>;

type State = {
    me: {
        loading: boolean;
        error: unknown;
        data: Record<string, any>;
    };
    tenant: {
        loading: boolean;
        error: unknown;
        data: Record<string, any>;
    };
    tenantAdminLinkSSO: {
        loading: boolean;
        error: unknown;
        data: string;
    };
};

declare const TenantProfileWidget: {
    new (...params: any[]): {
        init(): Promise<void>;
        tenantAdminLinkSSODriver: _descope_sdk_component_drivers.LinkDriver;
        "__#8@#initTenantAdminLinkSSO"(): void;
        "__#8@#onValueUpdate": (tenantAdminLinkSSO: string) => void;
        onWidgetRootReady: (() => Promise<void>) & (() => Promise<void>) & (() => Promise<void>) & (() => Promise<void>) & (() => Promise<void>) & (() => Promise<void>) & (() => Promise<void>);
        "__#29654@#ModalDriverWrapper": {
            new (refOrRefFn: Element | (() => HTMLElement), config: {
                logger: {
                    error(...data: any[]): void;
                    warn(...data: any[]): void;
                    info(...data: any[]): void;
                    debug(...data: any[]): void;
                };
            }): {
                setContent(template: HTMLTemplateElement): void;
                "__#29653@#private": any;
                beforeOpen: () => void | Promise<void>;
                afterClose: () => void;
                nodeName: string;
                close(): void;
                open(): Promise<void>;
                reset(): void;
                remove(): void;
                "__#29651@#private": any;
                logger: {
                    error(...data: any[]): void;
                    warn(...data: any[]): void;
                    info(...data: any[]): void;
                    debug(...data: any[]): void;
                };
                readonly asyncEle: Promise<Element>;
                readonly ele: Element;
            };
        };
        createModal(config?: Record<string, string>): _descope_sdk_component_drivers.ModalDriver;
        "__#29650@#getComponentsVersion": (() => Promise<string>) & (() => Promise<string>) & (() => Promise<string>);
        "__#29650@#descopeUi": Promise<any>;
        readonly descopeUi: Promise<any>;
        "__#29650@#loadDescopeUiComponent": ((componentName: string) => Promise<any>) & ((componentName: string) => Promise<any>) & ((componentName: string) => Promise<any>);
        "__#29650@#getDescopeUi": (() => Promise<any>) & (() => Promise<any>) & (() => Promise<any>);
        loadDescopeUiComponents: ((templateOrComponentNames: HTMLTemplateElement | string[]) => Promise<any[]>) & ((templateOrComponentNames: HTMLTemplateElement | string[]) => Promise<any[]>) & ((templateOrComponentNames: HTMLTemplateElement | string[]) => Promise<any[]>);
        readonly baseCdnUrl: string;
        injectNpmLib: ((libName: string, version: string, filePath?: string, overrides?: string[]) => Promise<{
            id: string;
            url: URL;
        }>) & ((libName: string, version: string, filePath?: string, overrides?: string[]) => Promise<{
            id: string;
            url: URL;
        }>) & ((libName: string, version: string, filePath?: string, overrides?: string[]) => Promise<{
            id: string;
            url: URL;
        }>);
        "__#29640@#logger": _descope_sdk_mixins.Logger;
        "__#29640@#wrapLogger": ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger) & ((logger: Partial<_descope_sdk_mixins.Logger>) => _descope_sdk_mixins.Logger);
        logger: _descope_sdk_mixins.Logger;
        onLogEvent: ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: _descope_sdk_mixins.LogLevel, data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: _descope_sdk_mixins.LogLevel, args: any[]) => void);
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        inert: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element | null;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        popover: string | null;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals: (() => ElementInternals) & (() => ElementInternals) & (() => ElementInternals) & (() => ElementInternals) & (() => ElementInternals) & (() => ElementInternals) & (() => ElementInternals) & (() => ElementInternals) & (() => ElementInternals) & (() => ElementInternals) & (() => ElementInternals) & (() => ElementInternals) & (() => ElementInternals) & (() => ElementInternals) & (() => ElementInternals);
        click: (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void);
        hidePopover: (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void);
        showPopover: (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void);
        togglePopover: ((force?: boolean) => boolean) & ((force?: boolean) => boolean) & ((force?: boolean) => boolean) & ((force?: boolean) => boolean) & ((force?: boolean) => boolean) & ((force?: boolean) => boolean) & ((force?: boolean) => boolean) & ((force?: boolean) => boolean) & ((force?: boolean) => boolean) & ((force?: boolean) => boolean) & ((force?: boolean) => boolean) & ((force?: boolean) => boolean) & ((force?: boolean) => boolean) & ((force?: boolean) => boolean) & ((force?: boolean) => boolean);
        addEventListener: {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        } & {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        } & {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        } & {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        } & {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        } & {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        } & {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        } & {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        } & {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        } & {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        } & {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        } & {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        } & {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        } & {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        } & {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        };
        removeEventListener: {
            <K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        } & {
            <K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        } & {
            <K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        } & {
            <K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        } & {
            <K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        } & {
            <K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        } & {
            <K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        } & {
            <K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        } & {
            <K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        } & {
            <K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        } & {
            <K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        } & {
            <K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        } & {
            <K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        } & {
            <K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        } & {
            <K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        };
        attributeChangedCallback: ((attrName: string, oldValue: string, newValue: string) => void) & ((attrName: string, oldValue: string, newValue: string) => void) & ((attrName: string, oldValue: string, newValue: string) => void) & ((attrName: string, oldValue: string, newValue: string) => void) & ((attrName: string, oldValue: string, newValue: string) => void) & ((attrName: string, oldValue: string, newValue: string) => void) & {
            (attrName: string, oldValue: string | null, newValue: string | null): void;
            (attrName: string, oldValue: string | null, newValue: string | null): void;
        } & ((attrName: string, oldValue: string, newValue: string) => void) & ((attrName: string, oldValue: string, newValue: string) => void) & ((attrName: string, oldValue: string, newValue: string) => void) & ((attrName: string, oldValue: string, newValue: string) => void) & ((attrName: string, oldValue: string, newValue: string) => void) & ((attrName: string, oldValue: string, newValue: string) => void) & ((attrName: string, oldValue: string, newValue: string) => void) & ((attrName: string, oldValue: string | null, newValue: string | null) => void);
        connectedCallback: (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & {
            (): void;
            (): void;
        } & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void);
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string | null;
        onfullscreenchange: ((this: Element, ev: Event) => any) & ((this: Element, ev: Event) => any) & ((this: Element, ev: Event) => any) & ((this: Element, ev: Event) => any) & ((this: Element, ev: Event) => any) & ((this: Element, ev: Event) => any) & ((this: Element, ev: Event) => any) & ((this: Element, ev: Event) => any) & ((this: Element, ev: Event) => any) & ((this: Element, ev: Event) => any) & ((this: Element, ev: Event) => any) & ((this: Element, ev: Event) => any) & ((this: Element, ev: Event) => any) & ((this: Element, ev: Event) => any) & ((this: Element, ev: Event) => any);
        onfullscreenerror: ((this: Element, ev: Event) => any) & ((this: Element, ev: Event) => any) & ((this: Element, ev: Event) => any) & ((this: Element, ev: Event) => any) & ((this: Element, ev: Event) => any) & ((this: Element, ev: Event) => any) & ((this: Element, ev: Event) => any) & ((this: Element, ev: Event) => any) & ((this: Element, ev: Event) => any) & ((this: Element, ev: Event) => any) & ((this: Element, ev: Event) => any) & ((this: Element, ev: Event) => any) & ((this: Element, ev: Event) => any) & ((this: Element, ev: Event) => any) & ((this: Element, ev: Event) => any);
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string | null;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot | null;
        slot: string;
        readonly tagName: string;
        attachShadow: ((init: ShadowRootInit) => ShadowRoot) & ((init: ShadowRootInit) => ShadowRoot) & ((init: ShadowRootInit) => ShadowRoot) & ((init: ShadowRootInit) => ShadowRoot) & ((init: ShadowRootInit) => ShadowRoot) & ((init: ShadowRootInit) => ShadowRoot) & ((init: ShadowRootInit) => ShadowRoot) & ((init: ShadowRootInit) => ShadowRoot) & ((init: ShadowRootInit) => ShadowRoot) & ((init: ShadowRootInit) => ShadowRoot) & ((init: ShadowRootInit) => ShadowRoot) & ((init: ShadowRootInit) => ShadowRoot) & ((init: ShadowRootInit) => ShadowRoot) & ((init: ShadowRootInit) => ShadowRoot) & ((init: ShadowRootInit) => ShadowRoot);
        checkVisibility: ((options?: CheckVisibilityOptions) => boolean) & ((options?: CheckVisibilityOptions) => boolean) & ((options?: CheckVisibilityOptions) => boolean) & ((options?: CheckVisibilityOptions) => boolean) & ((options?: CheckVisibilityOptions) => boolean) & ((options?: CheckVisibilityOptions) => boolean) & ((options?: CheckVisibilityOptions) => boolean) & ((options?: CheckVisibilityOptions) => boolean) & ((options?: CheckVisibilityOptions) => boolean) & ((options?: CheckVisibilityOptions) => boolean) & ((options?: CheckVisibilityOptions) => boolean) & ((options?: CheckVisibilityOptions) => boolean) & ((options?: CheckVisibilityOptions) => boolean) & ((options?: CheckVisibilityOptions) => boolean) & ((options?: CheckVisibilityOptions) => boolean);
        closest: {
            <K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            <K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            <K_4 extends keyof MathMLElementTagNameMap>(selector: K_4): MathMLElementTagNameMap[K_4];
            <E extends Element = Element>(selectors: string): E;
        } & {
            <K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            <K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            <K_4 extends keyof MathMLElementTagNameMap>(selector: K_4): MathMLElementTagNameMap[K_4];
            <E extends Element = Element>(selectors: string): E;
        } & {
            <K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            <K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            <K_4 extends keyof MathMLElementTagNameMap>(selector: K_4): MathMLElementTagNameMap[K_4];
            <E extends Element = Element>(selectors: string): E;
        } & {
            <K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            <K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            <K_4 extends keyof MathMLElementTagNameMap>(selector: K_4): MathMLElementTagNameMap[K_4];
            <E extends Element = Element>(selectors: string): E;
        } & {
            <K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            <K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            <K_4 extends keyof MathMLElementTagNameMap>(selector: K_4): MathMLElementTagNameMap[K_4];
            <E extends Element = Element>(selectors: string): E;
        } & {
            <K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            <K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            <K_4 extends keyof MathMLElementTagNameMap>(selector: K_4): MathMLElementTagNameMap[K_4];
            <E extends Element = Element>(selectors: string): E;
        } & {
            <K extends keyof HTMLElementTagNameMap>(selector: K): HTMLElementTagNameMap[K];
            <K extends keyof SVGElementTagNameMap>(selector: K): SVGElementTagNameMap[K];
            <K extends keyof MathMLElementTagNameMap>(selector: K): MathMLElementTagNameMap[K];
            <E extends Element = Element>(selectors: string): E;
        } & {
            <K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            <K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            <K_4 extends keyof MathMLElementTagNameMap>(selector: K_4): MathMLElementTagNameMap[K_4];
            <E extends Element = Element>(selectors: string): E;
        } & {
            <K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            <K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            <K_4 extends keyof MathMLElementTagNameMap>(selector: K_4): MathMLElementTagNameMap[K_4];
            <E extends Element = Element>(selectors: string): E;
        } & {
            <K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            <K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            <K_4 extends keyof MathMLElementTagNameMap>(selector: K_4): MathMLElementTagNameMap[K_4];
            <E extends Element = Element>(selectors: string): E;
        } & {
            <K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            <K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            <K_4 extends keyof MathMLElementTagNameMap>(selector: K_4): MathMLElementTagNameMap[K_4];
            <E extends Element = Element>(selectors: string): E;
        } & {
            <K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            <K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            <K_4 extends keyof MathMLElementTagNameMap>(selector: K_4): MathMLElementTagNameMap[K_4];
            <E extends Element = Element>(selectors: string): E;
        } & {
            <K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            <K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            <K_4 extends keyof MathMLElementTagNameMap>(selector: K_4): MathMLElementTagNameMap[K_4];
            <E extends Element = Element>(selectors: string): E;
        } & {
            <K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            <K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            <K_4 extends keyof MathMLElementTagNameMap>(selector: K_4): MathMLElementTagNameMap[K_4];
            <E extends Element = Element>(selectors: string): E;
        } & {
            <K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            <K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            <K_4 extends keyof MathMLElementTagNameMap>(selector: K_4): MathMLElementTagNameMap[K_4];
            <E extends Element = Element>(selectors: string): E;
        };
        computedStyleMap: (() => StylePropertyMapReadOnly) & (() => StylePropertyMapReadOnly) & (() => StylePropertyMapReadOnly) & (() => StylePropertyMapReadOnly) & (() => StylePropertyMapReadOnly) & (() => StylePropertyMapReadOnly) & (() => StylePropertyMapReadOnly) & (() => StylePropertyMapReadOnly) & (() => StylePropertyMapReadOnly) & (() => StylePropertyMapReadOnly) & (() => StylePropertyMapReadOnly) & (() => StylePropertyMapReadOnly) & (() => StylePropertyMapReadOnly) & (() => StylePropertyMapReadOnly) & (() => StylePropertyMapReadOnly);
        getAttribute: ((qualifiedName: string) => string) & ((qualifiedName: string) => string) & ((qualifiedName: string) => string) & ((qualifiedName: string) => string) & ((qualifiedName: string) => string) & ((qualifiedName: string) => string) & ((qualifiedName: string) => string | null) & ((qualifiedName: string) => string) & ((qualifiedName: string) => string) & ((qualifiedName: string) => string) & ((qualifiedName: string) => string) & ((qualifiedName: string) => string) & ((qualifiedName: string) => string) & ((qualifiedName: string) => string) & ((qualifiedName: string) => string);
        getAttributeNS: ((namespace: string, localName: string) => string) & ((namespace: string, localName: string) => string) & ((namespace: string, localName: string) => string) & ((namespace: string, localName: string) => string) & ((namespace: string, localName: string) => string) & ((namespace: string, localName: string) => string) & ((namespace: string | null, localName: string) => string | null) & ((namespace: string, localName: string) => string) & ((namespace: string, localName: string) => string) & ((namespace: string, localName: string) => string) & ((namespace: string, localName: string) => string) & ((namespace: string, localName: string) => string) & ((namespace: string, localName: string) => string) & ((namespace: string, localName: string) => string) & ((namespace: string, localName: string) => string);
        getAttributeNames: (() => string[]) & (() => string[]) & (() => string[]) & (() => string[]) & (() => string[]) & (() => string[]) & (() => string[]) & (() => string[]) & (() => string[]) & (() => string[]) & (() => string[]) & (() => string[]) & (() => string[]) & (() => string[]) & (() => string[]);
        getAttributeNode: ((qualifiedName: string) => Attr) & ((qualifiedName: string) => Attr) & ((qualifiedName: string) => Attr) & ((qualifiedName: string) => Attr) & ((qualifiedName: string) => Attr) & ((qualifiedName: string) => Attr) & ((qualifiedName: string) => Attr | null) & ((qualifiedName: string) => Attr) & ((qualifiedName: string) => Attr) & ((qualifiedName: string) => Attr) & ((qualifiedName: string) => Attr) & ((qualifiedName: string) => Attr) & ((qualifiedName: string) => Attr) & ((qualifiedName: string) => Attr) & ((qualifiedName: string) => Attr);
        getAttributeNodeNS: ((namespace: string, localName: string) => Attr) & ((namespace: string, localName: string) => Attr) & ((namespace: string, localName: string) => Attr) & ((namespace: string, localName: string) => Attr) & ((namespace: string, localName: string) => Attr) & ((namespace: string, localName: string) => Attr) & ((namespace: string | null, localName: string) => Attr | null) & ((namespace: string, localName: string) => Attr) & ((namespace: string, localName: string) => Attr) & ((namespace: string, localName: string) => Attr) & ((namespace: string, localName: string) => Attr) & ((namespace: string, localName: string) => Attr) & ((namespace: string, localName: string) => Attr) & ((namespace: string, localName: string) => Attr) & ((namespace: string, localName: string) => Attr);
        getBoundingClientRect: (() => DOMRect) & (() => DOMRect) & (() => DOMRect) & (() => DOMRect) & (() => DOMRect) & (() => DOMRect) & (() => DOMRect) & (() => DOMRect) & (() => DOMRect) & (() => DOMRect) & (() => DOMRect) & (() => DOMRect) & (() => DOMRect) & (() => DOMRect) & (() => DOMRect);
        getClientRects: (() => DOMRectList) & (() => DOMRectList) & (() => DOMRectList) & (() => DOMRectList) & (() => DOMRectList) & (() => DOMRectList) & (() => DOMRectList) & (() => DOMRectList) & (() => DOMRectList) & (() => DOMRectList) & (() => DOMRectList) & (() => DOMRectList) & (() => DOMRectList) & (() => DOMRectList) & (() => DOMRectList);
        getElementsByClassName: ((classNames: string) => HTMLCollectionOf<Element>) & ((classNames: string) => HTMLCollectionOf<Element>) & ((classNames: string) => HTMLCollectionOf<Element>) & ((classNames: string) => HTMLCollectionOf<Element>) & ((classNames: string) => HTMLCollectionOf<Element>) & ((classNames: string) => HTMLCollectionOf<Element>) & ((classNames: string) => HTMLCollectionOf<Element>) & ((classNames: string) => HTMLCollectionOf<Element>) & ((classNames: string) => HTMLCollectionOf<Element>) & ((classNames: string) => HTMLCollectionOf<Element>) & ((classNames: string) => HTMLCollectionOf<Element>) & ((classNames: string) => HTMLCollectionOf<Element>) & ((classNames: string) => HTMLCollectionOf<Element>) & ((classNames: string) => HTMLCollectionOf<Element>) & ((classNames: string) => HTMLCollectionOf<Element>);
        getElementsByTagName: {
            <K_5 extends keyof HTMLElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<HTMLElementTagNameMap[K_5]>;
            <K_6 extends keyof SVGElementTagNameMap>(qualifiedName: K_6): HTMLCollectionOf<SVGElementTagNameMap[K_6]>;
            <K_7 extends keyof MathMLElementTagNameMap>(qualifiedName: K_7): HTMLCollectionOf<MathMLElementTagNameMap[K_7]>;
            <K_8 extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K_8): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K_8]>;
            (qualifiedName: string): HTMLCollectionOf<Element>;
        } & {
            <K_5 extends keyof HTMLElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<HTMLElementTagNameMap[K_5]>;
            <K_6 extends keyof SVGElementTagNameMap>(qualifiedName: K_6): HTMLCollectionOf<SVGElementTagNameMap[K_6]>;
            <K_7 extends keyof MathMLElementTagNameMap>(qualifiedName: K_7): HTMLCollectionOf<MathMLElementTagNameMap[K_7]>;
            <K_8 extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K_8): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K_8]>;
            (qualifiedName: string): HTMLCollectionOf<Element>;
        } & {
            <K_5 extends keyof HTMLElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<HTMLElementTagNameMap[K_5]>;
            <K_6 extends keyof SVGElementTagNameMap>(qualifiedName: K_6): HTMLCollectionOf<SVGElementTagNameMap[K_6]>;
            <K_7 extends keyof MathMLElementTagNameMap>(qualifiedName: K_7): HTMLCollectionOf<MathMLElementTagNameMap[K_7]>;
            <K_8 extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K_8): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K_8]>;
            (qualifiedName: string): HTMLCollectionOf<Element>;
        } & {
            <K_5 extends keyof HTMLElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<HTMLElementTagNameMap[K_5]>;
            <K_6 extends keyof SVGElementTagNameMap>(qualifiedName: K_6): HTMLCollectionOf<SVGElementTagNameMap[K_6]>;
            <K_7 extends keyof MathMLElementTagNameMap>(qualifiedName: K_7): HTMLCollectionOf<MathMLElementTagNameMap[K_7]>;
            <K_8 extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K_8): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K_8]>;
            (qualifiedName: string): HTMLCollectionOf<Element>;
        } & {
            <K_5 extends keyof HTMLElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<HTMLElementTagNameMap[K_5]>;
            <K_6 extends keyof SVGElementTagNameMap>(qualifiedName: K_6): HTMLCollectionOf<SVGElementTagNameMap[K_6]>;
            <K_7 extends keyof MathMLElementTagNameMap>(qualifiedName: K_7): HTMLCollectionOf<MathMLElementTagNameMap[K_7]>;
            <K_8 extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K_8): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K_8]>;
            (qualifiedName: string): HTMLCollectionOf<Element>;
        } & {
            <K_5 extends keyof HTMLElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<HTMLElementTagNameMap[K_5]>;
            <K_6 extends keyof SVGElementTagNameMap>(qualifiedName: K_6): HTMLCollectionOf<SVGElementTagNameMap[K_6]>;
            <K_7 extends keyof MathMLElementTagNameMap>(qualifiedName: K_7): HTMLCollectionOf<MathMLElementTagNameMap[K_7]>;
            <K_8 extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K_8): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K_8]>;
            (qualifiedName: string): HTMLCollectionOf<Element>;
        } & {
            <K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>;
            <K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>;
            <K extends keyof MathMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<MathMLElementTagNameMap[K]>;
            <K extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>;
            (qualifiedName: string): HTMLCollectionOf<Element>;
        } & {
            <K_5 extends keyof HTMLElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<HTMLElementTagNameMap[K_5]>;
            <K_6 extends keyof SVGElementTagNameMap>(qualifiedName: K_6): HTMLCollectionOf<SVGElementTagNameMap[K_6]>;
            <K_7 extends keyof MathMLElementTagNameMap>(qualifiedName: K_7): HTMLCollectionOf<MathMLElementTagNameMap[K_7]>;
            <K_8 extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K_8): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K_8]>;
            (qualifiedName: string): HTMLCollectionOf<Element>;
        } & {
            <K_5 extends keyof HTMLElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<HTMLElementTagNameMap[K_5]>;
            <K_6 extends keyof SVGElementTagNameMap>(qualifiedName: K_6): HTMLCollectionOf<SVGElementTagNameMap[K_6]>;
            <K_7 extends keyof MathMLElementTagNameMap>(qualifiedName: K_7): HTMLCollectionOf<MathMLElementTagNameMap[K_7]>;
            <K_8 extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K_8): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K_8]>;
            (qualifiedName: string): HTMLCollectionOf<Element>;
        } & {
            <K_5 extends keyof HTMLElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<HTMLElementTagNameMap[K_5]>;
            <K_6 extends keyof SVGElementTagNameMap>(qualifiedName: K_6): HTMLCollectionOf<SVGElementTagNameMap[K_6]>;
            <K_7 extends keyof MathMLElementTagNameMap>(qualifiedName: K_7): HTMLCollectionOf<MathMLElementTagNameMap[K_7]>;
            <K_8 extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K_8): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K_8]>;
            (qualifiedName: string): HTMLCollectionOf<Element>;
        } & {
            <K_5 extends keyof HTMLElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<HTMLElementTagNameMap[K_5]>;
            <K_6 extends keyof SVGElementTagNameMap>(qualifiedName: K_6): HTMLCollectionOf<SVGElementTagNameMap[K_6]>;
            <K_7 extends keyof MathMLElementTagNameMap>(qualifiedName: K_7): HTMLCollectionOf<MathMLElementTagNameMap[K_7]>;
            <K_8 extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K_8): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K_8]>;
            (qualifiedName: string): HTMLCollectionOf<Element>;
        } & {
            <K_5 extends keyof HTMLElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<HTMLElementTagNameMap[K_5]>;
            <K_6 extends keyof SVGElementTagNameMap>(qualifiedName: K_6): HTMLCollectionOf<SVGElementTagNameMap[K_6]>;
            <K_7 extends keyof MathMLElementTagNameMap>(qualifiedName: K_7): HTMLCollectionOf<MathMLElementTagNameMap[K_7]>;
            <K_8 extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K_8): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K_8]>;
            (qualifiedName: string): HTMLCollectionOf<Element>;
        } & {
            <K_5 extends keyof HTMLElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<HTMLElementTagNameMap[K_5]>;
            <K_6 extends keyof SVGElementTagNameMap>(qualifiedName: K_6): HTMLCollectionOf<SVGElementTagNameMap[K_6]>;
            <K_7 extends keyof MathMLElementTagNameMap>(qualifiedName: K_7): HTMLCollectionOf<MathMLElementTagNameMap[K_7]>;
            <K_8 extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K_8): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K_8]>;
            (qualifiedName: string): HTMLCollectionOf<Element>;
        } & {
            <K_5 extends keyof HTMLElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<HTMLElementTagNameMap[K_5]>;
            <K_6 extends keyof SVGElementTagNameMap>(qualifiedName: K_6): HTMLCollectionOf<SVGElementTagNameMap[K_6]>;
            <K_7 extends keyof MathMLElementTagNameMap>(qualifiedName: K_7): HTMLCollectionOf<MathMLElementTagNameMap[K_7]>;
            <K_8 extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K_8): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K_8]>;
            (qualifiedName: string): HTMLCollectionOf<Element>;
        } & {
            <K_5 extends keyof HTMLElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<HTMLElementTagNameMap[K_5]>;
            <K_6 extends keyof SVGElementTagNameMap>(qualifiedName: K_6): HTMLCollectionOf<SVGElementTagNameMap[K_6]>;
            <K_7 extends keyof MathMLElementTagNameMap>(qualifiedName: K_7): HTMLCollectionOf<MathMLElementTagNameMap[K_7]>;
            <K_8 extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K_8): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K_8]>;
            (qualifiedName: string): HTMLCollectionOf<Element>;
        };
        getElementsByTagNameNS: {
            (namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            (namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            (namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
            (namespace: string, localName: string): HTMLCollectionOf<Element>;
        } & {
            (namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            (namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            (namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
            (namespace: string, localName: string): HTMLCollectionOf<Element>;
        } & {
            (namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            (namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            (namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
            (namespace: string, localName: string): HTMLCollectionOf<Element>;
        } & {
            (namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            (namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            (namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
            (namespace: string, localName: string): HTMLCollectionOf<Element>;
        } & {
            (namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            (namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            (namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
            (namespace: string, localName: string): HTMLCollectionOf<Element>;
        } & {
            (namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            (namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            (namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
            (namespace: string, localName: string): HTMLCollectionOf<Element>;
        } & {
            (namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            (namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            (namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
            (namespace: string | null, localName: string): HTMLCollectionOf<Element>;
        } & {
            (namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            (namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            (namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
            (namespace: string, localName: string): HTMLCollectionOf<Element>;
        } & {
            (namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            (namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            (namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
            (namespace: string, localName: string): HTMLCollectionOf<Element>;
        } & {
            (namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            (namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            (namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
            (namespace: string, localName: string): HTMLCollectionOf<Element>;
        } & {
            (namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            (namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            (namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
            (namespace: string, localName: string): HTMLCollectionOf<Element>;
        } & {
            (namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            (namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            (namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
            (namespace: string, localName: string): HTMLCollectionOf<Element>;
        } & {
            (namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            (namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            (namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
            (namespace: string, localName: string): HTMLCollectionOf<Element>;
        } & {
            (namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            (namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            (namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
            (namespace: string, localName: string): HTMLCollectionOf<Element>;
        } & {
            (namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            (namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            (namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
            (namespace: string, localName: string): HTMLCollectionOf<Element>;
        };
        hasAttribute: ((qualifiedName: string) => boolean) & ((qualifiedName: string) => boolean) & ((qualifiedName: string) => boolean) & ((qualifiedName: string) => boolean) & ((qualifiedName: string) => boolean) & ((qualifiedName: string) => boolean) & ((qualifiedName: string) => boolean) & ((qualifiedName: string) => boolean) & ((qualifiedName: string) => boolean) & ((qualifiedName: string) => boolean) & ((qualifiedName: string) => boolean) & ((qualifiedName: string) => boolean) & ((qualifiedName: string) => boolean) & ((qualifiedName: string) => boolean) & ((qualifiedName: string) => boolean);
        hasAttributeNS: ((namespace: string, localName: string) => boolean) & ((namespace: string, localName: string) => boolean) & ((namespace: string, localName: string) => boolean) & ((namespace: string, localName: string) => boolean) & ((namespace: string, localName: string) => boolean) & ((namespace: string, localName: string) => boolean) & ((namespace: string | null, localName: string) => boolean) & ((namespace: string, localName: string) => boolean) & ((namespace: string, localName: string) => boolean) & ((namespace: string, localName: string) => boolean) & ((namespace: string, localName: string) => boolean) & ((namespace: string, localName: string) => boolean) & ((namespace: string, localName: string) => boolean) & ((namespace: string, localName: string) => boolean) & ((namespace: string, localName: string) => boolean);
        hasAttributes: (() => boolean) & (() => boolean) & (() => boolean) & (() => boolean) & (() => boolean) & (() => boolean) & (() => boolean) & (() => boolean) & (() => boolean) & (() => boolean) & (() => boolean) & (() => boolean) & (() => boolean) & (() => boolean) & (() => boolean);
        hasPointerCapture: ((pointerId: number) => boolean) & ((pointerId: number) => boolean) & ((pointerId: number) => boolean) & ((pointerId: number) => boolean) & ((pointerId: number) => boolean) & ((pointerId: number) => boolean) & ((pointerId: number) => boolean) & ((pointerId: number) => boolean) & ((pointerId: number) => boolean) & ((pointerId: number) => boolean) & ((pointerId: number) => boolean) & ((pointerId: number) => boolean) & ((pointerId: number) => boolean) & ((pointerId: number) => boolean) & ((pointerId: number) => boolean);
        insertAdjacentElement: ((where: InsertPosition, element: Element) => Element) & ((where: InsertPosition, element: Element) => Element) & ((where: InsertPosition, element: Element) => Element) & ((where: InsertPosition, element: Element) => Element) & ((where: InsertPosition, element: Element) => Element) & ((where: InsertPosition, element: Element) => Element) & ((where: InsertPosition, element: Element) => Element | null) & ((where: InsertPosition, element: Element) => Element) & ((where: InsertPosition, element: Element) => Element) & ((where: InsertPosition, element: Element) => Element) & ((where: InsertPosition, element: Element) => Element) & ((where: InsertPosition, element: Element) => Element) & ((where: InsertPosition, element: Element) => Element) & ((where: InsertPosition, element: Element) => Element) & ((where: InsertPosition, element: Element) => Element);
        insertAdjacentHTML: ((position: InsertPosition, text: string) => void) & ((position: InsertPosition, text: string) => void) & ((position: InsertPosition, text: string) => void) & ((position: InsertPosition, text: string) => void) & ((position: InsertPosition, text: string) => void) & ((position: InsertPosition, text: string) => void) & ((position: InsertPosition, string: string) => void) & ((position: InsertPosition, text: string) => void) & ((position: InsertPosition, text: string) => void) & ((position: InsertPosition, text: string) => void) & ((position: InsertPosition, text: string) => void) & ((position: InsertPosition, text: string) => void) & ((position: InsertPosition, text: string) => void) & ((position: InsertPosition, text: string) => void) & ((position: InsertPosition, text: string) => void);
        insertAdjacentText: ((where: InsertPosition, data: string) => void) & ((where: InsertPosition, data: string) => void) & ((where: InsertPosition, data: string) => void) & ((where: InsertPosition, data: string) => void) & ((where: InsertPosition, data: string) => void) & ((where: InsertPosition, data: string) => void) & ((where: InsertPosition, data: string) => void) & ((where: InsertPosition, data: string) => void) & ((where: InsertPosition, data: string) => void) & ((where: InsertPosition, data: string) => void) & ((where: InsertPosition, data: string) => void) & ((where: InsertPosition, data: string) => void) & ((where: InsertPosition, data: string) => void) & ((where: InsertPosition, data: string) => void) & ((where: InsertPosition, data: string) => void);
        matches: ((selectors: string) => boolean) & ((selectors: string) => boolean) & ((selectors: string) => boolean) & ((selectors: string) => boolean) & ((selectors: string) => boolean) & ((selectors: string) => boolean) & ((selectors: string) => boolean) & ((selectors: string) => boolean) & ((selectors: string) => boolean) & ((selectors: string) => boolean) & ((selectors: string) => boolean) & ((selectors: string) => boolean) & ((selectors: string) => boolean) & ((selectors: string) => boolean) & ((selectors: string) => boolean);
        releasePointerCapture: ((pointerId: number) => void) & ((pointerId: number) => void) & ((pointerId: number) => void) & ((pointerId: number) => void) & ((pointerId: number) => void) & ((pointerId: number) => void) & ((pointerId: number) => void) & ((pointerId: number) => void) & ((pointerId: number) => void) & ((pointerId: number) => void) & ((pointerId: number) => void) & ((pointerId: number) => void) & ((pointerId: number) => void) & ((pointerId: number) => void) & ((pointerId: number) => void);
        removeAttribute: ((qualifiedName: string) => void) & ((qualifiedName: string) => void) & ((qualifiedName: string) => void) & ((qualifiedName: string) => void) & ((qualifiedName: string) => void) & ((qualifiedName: string) => void) & ((qualifiedName: string) => void) & ((qualifiedName: string) => void) & ((qualifiedName: string) => void) & ((qualifiedName: string) => void) & ((qualifiedName: string) => void) & ((qualifiedName: string) => void) & ((qualifiedName: string) => void) & ((qualifiedName: string) => void) & ((qualifiedName: string) => void);
        removeAttributeNS: ((namespace: string, localName: string) => void) & ((namespace: string, localName: string) => void) & ((namespace: string, localName: string) => void) & ((namespace: string, localName: string) => void) & ((namespace: string, localName: string) => void) & ((namespace: string, localName: string) => void) & ((namespace: string | null, localName: string) => void) & ((namespace: string, localName: string) => void) & ((namespace: string, localName: string) => void) & ((namespace: string, localName: string) => void) & ((namespace: string, localName: string) => void) & ((namespace: string, localName: string) => void) & ((namespace: string, localName: string) => void) & ((namespace: string, localName: string) => void) & ((namespace: string, localName: string) => void);
        removeAttributeNode: ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr);
        requestFullscreen: ((options?: FullscreenOptions) => Promise<void>) & ((options?: FullscreenOptions) => Promise<void>) & ((options?: FullscreenOptions) => Promise<void>) & ((options?: FullscreenOptions) => Promise<void>) & ((options?: FullscreenOptions) => Promise<void>) & ((options?: FullscreenOptions) => Promise<void>) & ((options?: FullscreenOptions) => Promise<void>) & ((options?: FullscreenOptions) => Promise<void>) & ((options?: FullscreenOptions) => Promise<void>) & ((options?: FullscreenOptions) => Promise<void>) & ((options?: FullscreenOptions) => Promise<void>) & ((options?: FullscreenOptions) => Promise<void>) & ((options?: FullscreenOptions) => Promise<void>) & ((options?: FullscreenOptions) => Promise<void>) & ((options?: FullscreenOptions) => Promise<void>);
        requestPointerLock: (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & ((options?: PointerLockOptions) => Promise<void>) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void);
        scroll: {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        };
        scrollBy: {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        };
        scrollIntoView: ((arg?: boolean | ScrollIntoViewOptions) => void) & ((arg?: boolean | ScrollIntoViewOptions) => void) & ((arg?: boolean | ScrollIntoViewOptions) => void) & ((arg?: boolean | ScrollIntoViewOptions) => void) & ((arg?: boolean | ScrollIntoViewOptions) => void) & ((arg?: boolean | ScrollIntoViewOptions) => void) & ((arg?: boolean | ScrollIntoViewOptions) => void) & ((arg?: boolean | ScrollIntoViewOptions) => void) & ((arg?: boolean | ScrollIntoViewOptions) => void) & ((arg?: boolean | ScrollIntoViewOptions) => void) & ((arg?: boolean | ScrollIntoViewOptions) => void) & ((arg?: boolean | ScrollIntoViewOptions) => void) & ((arg?: boolean | ScrollIntoViewOptions) => void) & ((arg?: boolean | ScrollIntoViewOptions) => void) & ((arg?: boolean | ScrollIntoViewOptions) => void);
        scrollTo: {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        } & {
            (options?: ScrollToOptions): void;
            (x: number, y: number): void;
        };
        setAttribute: ((qualifiedName: string, value: string) => void) & ((qualifiedName: string, value: string) => void) & ((qualifiedName: string, value: string) => void) & ((qualifiedName: string, value: string) => void) & ((qualifiedName: string, value: string) => void) & ((qualifiedName: string, value: string) => void) & ((qualifiedName: string, value: string) => void) & ((qualifiedName: string, value: string) => void) & ((qualifiedName: string, value: string) => void) & ((qualifiedName: string, value: string) => void) & ((qualifiedName: string, value: string) => void) & ((qualifiedName: string, value: string) => void) & ((qualifiedName: string, value: string) => void) & ((qualifiedName: string, value: string) => void) & ((qualifiedName: string, value: string) => void);
        setAttributeNS: ((namespace: string, qualifiedName: string, value: string) => void) & ((namespace: string, qualifiedName: string, value: string) => void) & ((namespace: string, qualifiedName: string, value: string) => void) & ((namespace: string, qualifiedName: string, value: string) => void) & ((namespace: string, qualifiedName: string, value: string) => void) & ((namespace: string, qualifiedName: string, value: string) => void) & ((namespace: string | null, qualifiedName: string, value: string) => void) & ((namespace: string, qualifiedName: string, value: string) => void) & ((namespace: string, qualifiedName: string, value: string) => void) & ((namespace: string, qualifiedName: string, value: string) => void) & ((namespace: string, qualifiedName: string, value: string) => void) & ((namespace: string, qualifiedName: string, value: string) => void) & ((namespace: string, qualifiedName: string, value: string) => void) & ((namespace: string, qualifiedName: string, value: string) => void) & ((namespace: string, qualifiedName: string, value: string) => void);
        setAttributeNode: ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr | null) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr);
        setAttributeNodeNS: ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr | null) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr) & ((attr: Attr) => Attr);
        setPointerCapture: ((pointerId: number) => void) & ((pointerId: number) => void) & ((pointerId: number) => void) & ((pointerId: number) => void) & ((pointerId: number) => void) & ((pointerId: number) => void) & ((pointerId: number) => void) & ((pointerId: number) => void) & ((pointerId: number) => void) & ((pointerId: number) => void) & ((pointerId: number) => void) & ((pointerId: number) => void) & ((pointerId: number) => void) & ((pointerId: number) => void) & ((pointerId: number) => void);
        toggleAttribute: ((qualifiedName: string, force?: boolean) => boolean) & ((qualifiedName: string, force?: boolean) => boolean) & ((qualifiedName: string, force?: boolean) => boolean) & ((qualifiedName: string, force?: boolean) => boolean) & ((qualifiedName: string, force?: boolean) => boolean) & ((qualifiedName: string, force?: boolean) => boolean) & ((qualifiedName: string, force?: boolean) => boolean) & ((qualifiedName: string, force?: boolean) => boolean) & ((qualifiedName: string, force?: boolean) => boolean) & ((qualifiedName: string, force?: boolean) => boolean) & ((qualifiedName: string, force?: boolean) => boolean) & ((qualifiedName: string, force?: boolean) => boolean) & ((qualifiedName: string, force?: boolean) => boolean) & ((qualifiedName: string, force?: boolean) => boolean) & ((qualifiedName: string, force?: boolean) => boolean);
        webkitMatchesSelector: ((selectors: string) => boolean) & ((selectors: string) => boolean) & ((selectors: string) => boolean) & ((selectors: string) => boolean) & ((selectors: string) => boolean) & ((selectors: string) => boolean) & ((selectors: string) => boolean) & ((selectors: string) => boolean) & ((selectors: string) => boolean) & ((selectors: string) => boolean) & ((selectors: string) => boolean) & ((selectors: string) => boolean) & ((selectors: string) => boolean) & ((selectors: string) => boolean) & ((selectors: string) => boolean);
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode | null;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode | null;
        readonly nextSibling: ChildNode | null;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string | null;
        readonly parentElement: HTMLElement | null;
        readonly parentNode: ParentNode | null;
        readonly previousSibling: ChildNode | null;
        textContent: string | null;
        appendChild: (<T_1 extends Node>(node: T_1) => T_1) & (<T_1 extends Node>(node: T_1) => T_1) & (<T_1 extends Node>(node: T_1) => T_1) & (<T_1 extends Node>(node: T_1) => T_1) & (<T_1 extends Node>(node: T_1) => T_1) & (<T_1 extends Node>(node: T_1) => T_1) & (<T extends Node>(node: T) => T) & (<T_1 extends Node>(node: T_1) => T_1) & (<T_1 extends Node>(node: T_1) => T_1) & (<T_1 extends Node>(node: T_1) => T_1) & (<T_1 extends Node>(node: T_1) => T_1) & (<T_1 extends Node>(node: T_1) => T_1) & (<T_1 extends Node>(node: T_1) => T_1) & (<T_1 extends Node>(node: T_1) => T_1) & (<T_1 extends Node>(node: T_1) => T_1);
        cloneNode: ((deep?: boolean) => Node) & ((deep?: boolean) => Node) & ((deep?: boolean) => Node) & ((deep?: boolean) => Node) & ((deep?: boolean) => Node) & ((deep?: boolean) => Node) & ((deep?: boolean) => Node) & ((deep?: boolean) => Node) & ((deep?: boolean) => Node) & ((deep?: boolean) => Node) & ((deep?: boolean) => Node) & ((deep?: boolean) => Node) & ((deep?: boolean) => Node) & ((deep?: boolean) => Node) & ((deep?: boolean) => Node);
        compareDocumentPosition: ((other: Node) => number) & ((other: Node) => number) & ((other: Node) => number) & ((other: Node) => number) & ((other: Node) => number) & ((other: Node) => number) & ((other: Node) => number) & ((other: Node) => number) & ((other: Node) => number) & ((other: Node) => number) & ((other: Node) => number) & ((other: Node) => number) & ((other: Node) => number) & ((other: Node) => number) & ((other: Node) => number);
        contains: ((other: Node) => boolean) & ((other: Node) => boolean) & ((other: Node) => boolean) & ((other: Node) => boolean) & ((other: Node) => boolean) & ((other: Node) => boolean) & ((other: Node | null) => boolean) & ((other: Node) => boolean) & ((other: Node) => boolean) & ((other: Node) => boolean) & ((other: Node) => boolean) & ((other: Node) => boolean) & ((other: Node) => boolean) & ((other: Node) => boolean) & ((other: Node) => boolean);
        getRootNode: ((options?: GetRootNodeOptions) => Node) & ((options?: GetRootNodeOptions) => Node) & ((options?: GetRootNodeOptions) => Node) & ((options?: GetRootNodeOptions) => Node) & ((options?: GetRootNodeOptions) => Node) & ((options?: GetRootNodeOptions) => Node) & ((options?: GetRootNodeOptions) => Node) & ((options?: GetRootNodeOptions) => Node) & ((options?: GetRootNodeOptions) => Node) & ((options?: GetRootNodeOptions) => Node) & ((options?: GetRootNodeOptions) => Node) & ((options?: GetRootNodeOptions) => Node) & ((options?: GetRootNodeOptions) => Node) & ((options?: GetRootNodeOptions) => Node) & ((options?: GetRootNodeOptions) => Node);
        hasChildNodes: (() => boolean) & (() => boolean) & (() => boolean) & (() => boolean) & (() => boolean) & (() => boolean) & (() => boolean) & (() => boolean) & (() => boolean) & (() => boolean) & (() => boolean) & (() => boolean) & (() => boolean) & (() => boolean) & (() => boolean);
        insertBefore: (<T_2 extends Node>(node: T_2, child: Node) => T_2) & (<T_2 extends Node>(node: T_2, child: Node) => T_2) & (<T_2 extends Node>(node: T_2, child: Node) => T_2) & (<T_2 extends Node>(node: T_2, child: Node) => T_2) & (<T_2 extends Node>(node: T_2, child: Node) => T_2) & (<T_2 extends Node>(node: T_2, child: Node) => T_2) & (<T extends Node>(node: T, child: Node | null) => T) & (<T_2 extends Node>(node: T_2, child: Node) => T_2) & (<T_2 extends Node>(node: T_2, child: Node) => T_2) & (<T_2 extends Node>(node: T_2, child: Node) => T_2) & (<T_2 extends Node>(node: T_2, child: Node) => T_2) & (<T_2 extends Node>(node: T_2, child: Node) => T_2) & (<T_2 extends Node>(node: T_2, child: Node) => T_2) & (<T_2 extends Node>(node: T_2, child: Node) => T_2) & (<T_2 extends Node>(node: T_2, child: Node) => T_2);
        isDefaultNamespace: ((namespace: string) => boolean) & ((namespace: string) => boolean) & ((namespace: string) => boolean) & ((namespace: string) => boolean) & ((namespace: string) => boolean) & ((namespace: string) => boolean) & ((namespace: string | null) => boolean) & ((namespace: string) => boolean) & ((namespace: string) => boolean) & ((namespace: string) => boolean) & ((namespace: string) => boolean) & ((namespace: string) => boolean) & ((namespace: string) => boolean) & ((namespace: string) => boolean) & ((namespace: string) => boolean);
        isEqualNode: ((otherNode: Node) => boolean) & ((otherNode: Node) => boolean) & ((otherNode: Node) => boolean) & ((otherNode: Node) => boolean) & ((otherNode: Node) => boolean) & ((otherNode: Node) => boolean) & ((otherNode: Node | null) => boolean) & ((otherNode: Node) => boolean) & ((otherNode: Node) => boolean) & ((otherNode: Node) => boolean) & ((otherNode: Node) => boolean) & ((otherNode: Node) => boolean) & ((otherNode: Node) => boolean) & ((otherNode: Node) => boolean) & ((otherNode: Node) => boolean);
        isSameNode: ((otherNode: Node) => boolean) & ((otherNode: Node) => boolean) & ((otherNode: Node) => boolean) & ((otherNode: Node) => boolean) & ((otherNode: Node) => boolean) & ((otherNode: Node) => boolean) & ((otherNode: Node | null) => boolean) & ((otherNode: Node) => boolean) & ((otherNode: Node) => boolean) & ((otherNode: Node) => boolean) & ((otherNode: Node) => boolean) & ((otherNode: Node) => boolean) & ((otherNode: Node) => boolean) & ((otherNode: Node) => boolean) & ((otherNode: Node) => boolean);
        lookupNamespaceURI: ((prefix: string) => string) & ((prefix: string) => string) & ((prefix: string) => string) & ((prefix: string) => string) & ((prefix: string) => string) & ((prefix: string) => string) & ((prefix: string | null) => string | null) & ((prefix: string) => string) & ((prefix: string) => string) & ((prefix: string) => string) & ((prefix: string) => string) & ((prefix: string) => string) & ((prefix: string) => string) & ((prefix: string) => string) & ((prefix: string) => string);
        lookupPrefix: ((namespace: string) => string) & ((namespace: string) => string) & ((namespace: string) => string) & ((namespace: string) => string) & ((namespace: string) => string) & ((namespace: string) => string) & ((namespace: string | null) => string | null) & ((namespace: string) => string) & ((namespace: string) => string) & ((namespace: string) => string) & ((namespace: string) => string) & ((namespace: string) => string) & ((namespace: string) => string) & ((namespace: string) => string) & ((namespace: string) => string);
        normalize: (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void);
        removeChild: (<T_3 extends Node>(child: T_3) => T_3) & (<T_3 extends Node>(child: T_3) => T_3) & (<T_3 extends Node>(child: T_3) => T_3) & (<T_3 extends Node>(child: T_3) => T_3) & (<T_3 extends Node>(child: T_3) => T_3) & (<T_3 extends Node>(child: T_3) => T_3) & (<T extends Node>(child: T) => T) & (<T_3 extends Node>(child: T_3) => T_3) & (<T_3 extends Node>(child: T_3) => T_3) & (<T_3 extends Node>(child: T_3) => T_3) & (<T_3 extends Node>(child: T_3) => T_3) & (<T_3 extends Node>(child: T_3) => T_3) & (<T_3 extends Node>(child: T_3) => T_3) & (<T_3 extends Node>(child: T_3) => T_3) & (<T_3 extends Node>(child: T_3) => T_3);
        replaceChild: (<T_4 extends Node>(node: Node, child: T_4) => T_4) & (<T_4 extends Node>(node: Node, child: T_4) => T_4) & (<T_4 extends Node>(node: Node, child: T_4) => T_4) & (<T_4 extends Node>(node: Node, child: T_4) => T_4) & (<T_4 extends Node>(node: Node, child: T_4) => T_4) & (<T_4 extends Node>(node: Node, child: T_4) => T_4) & (<T extends Node>(node: Node, child: T) => T) & (<T_4 extends Node>(node: Node, child: T_4) => T_4) & (<T_4 extends Node>(node: Node, child: T_4) => T_4) & (<T_4 extends Node>(node: Node, child: T_4) => T_4) & (<T_4 extends Node>(node: Node, child: T_4) => T_4) & (<T_4 extends Node>(node: Node, child: T_4) => T_4) & (<T_4 extends Node>(node: Node, child: T_4) => T_4) & (<T_4 extends Node>(node: Node, child: T_4) => T_4) & (<T_4 extends Node>(node: Node, child: T_4) => T_4);
        readonly ELEMENT_NODE: 1;
        readonly ATTRIBUTE_NODE: 2;
        readonly TEXT_NODE: 3;
        readonly CDATA_SECTION_NODE: 4;
        readonly ENTITY_REFERENCE_NODE: 5;
        readonly ENTITY_NODE: 6;
        readonly PROCESSING_INSTRUCTION_NODE: 7;
        readonly COMMENT_NODE: 8;
        readonly DOCUMENT_NODE: 9;
        readonly DOCUMENT_TYPE_NODE: 10;
        readonly DOCUMENT_FRAGMENT_NODE: 11;
        readonly NOTATION_NODE: 12;
        readonly DOCUMENT_POSITION_DISCONNECTED: 1;
        readonly DOCUMENT_POSITION_PRECEDING: 2;
        readonly DOCUMENT_POSITION_FOLLOWING: 4;
        readonly DOCUMENT_POSITION_CONTAINS: 8;
        readonly DOCUMENT_POSITION_CONTAINED_BY: 16;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32;
        dispatchEvent: ((event: Event) => boolean) & ((event: Event) => boolean) & ((event: Event) => boolean) & ((event: Event) => boolean) & ((event: Event) => boolean) & ((event: Event) => boolean) & ((event: Event) => boolean) & ((event: Event) => boolean) & ((event: Event) => boolean) & ((event: Event) => boolean) & ((event: Event) => boolean) & ((event: Event) => boolean) & ((event: Event) => boolean) & ((event: Event) => boolean) & ((event: Event) => boolean);
        ariaAtomic: string | null;
        ariaAutoComplete: string | null;
        ariaBusy: string | null;
        ariaChecked: string | null;
        ariaColCount: string | null;
        ariaColIndex: string | null;
        ariaColSpan: string | null;
        ariaCurrent: string | null;
        ariaDescription: string | null;
        ariaDisabled: string | null;
        ariaExpanded: string | null;
        ariaHasPopup: string | null;
        ariaHidden: string | null;
        ariaInvalid: string | null;
        ariaKeyShortcuts: string | null;
        ariaLabel: string | null;
        ariaLevel: string | null;
        ariaLive: string | null;
        ariaModal: string | null;
        ariaMultiLine: string | null;
        ariaMultiSelectable: string | null;
        ariaOrientation: string | null;
        ariaPlaceholder: string | null;
        ariaPosInSet: string | null;
        ariaPressed: string | null;
        ariaReadOnly: string | null;
        ariaRequired: string | null;
        ariaRoleDescription: string | null;
        ariaRowCount: string | null;
        ariaRowIndex: string | null;
        ariaRowSpan: string | null;
        ariaSelected: string | null;
        ariaSetSize: string | null;
        ariaSort: string | null;
        ariaValueMax: string | null;
        ariaValueMin: string | null;
        ariaValueNow: string | null;
        ariaValueText: string | null;
        role: string | null;
        animate: ((keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions) => Animation) & ((keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions) => Animation) & ((keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions) => Animation) & ((keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions) => Animation) & ((keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions) => Animation) & ((keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions) => Animation) & ((keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeAnimationOptions) => Animation) & ((keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions) => Animation) & ((keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions) => Animation) & ((keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions) => Animation) & ((keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions) => Animation) & ((keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions) => Animation) & ((keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions) => Animation) & ((keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions) => Animation) & ((keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions) => Animation);
        getAnimations: ((options?: GetAnimationsOptions) => Animation[]) & ((options?: GetAnimationsOptions) => Animation[]) & ((options?: GetAnimationsOptions) => Animation[]) & ((options?: GetAnimationsOptions) => Animation[]) & ((options?: GetAnimationsOptions) => Animation[]) & ((options?: GetAnimationsOptions) => Animation[]) & ((options?: GetAnimationsOptions) => Animation[]) & ((options?: GetAnimationsOptions) => Animation[]) & ((options?: GetAnimationsOptions) => Animation[]) & ((options?: GetAnimationsOptions) => Animation[]) & ((options?: GetAnimationsOptions) => Animation[]) & ((options?: GetAnimationsOptions) => Animation[]) & ((options?: GetAnimationsOptions) => Animation[]) & ((options?: GetAnimationsOptions) => Animation[]) & ((options?: GetAnimationsOptions) => Animation[]);
        after: ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (Node | string)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void);
        before: ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (Node | string)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void);
        remove: (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void);
        replaceWith: ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (Node | string)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void);
        innerHTML: string;
        readonly nextElementSibling: Element | null;
        readonly previousElementSibling: Element | null;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element | null;
        readonly lastElementChild: Element | null;
        append: ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (Node | string)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void);
        prepend: ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (Node | string)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void);
        querySelector: {
            <K_9 extends keyof HTMLElementTagNameMap>(selectors: K_9): HTMLElementTagNameMap[K_9];
            <K_10 extends keyof SVGElementTagNameMap>(selectors: K_10): SVGElementTagNameMap[K_10];
            <K_11 extends keyof MathMLElementTagNameMap>(selectors: K_11): MathMLElementTagNameMap[K_11];
            <K_12 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_12): HTMLElementDeprecatedTagNameMap[K_12];
            <E_1 extends Element = Element>(selectors: string): E_1;
        } & {
            <K_9 extends keyof HTMLElementTagNameMap>(selectors: K_9): HTMLElementTagNameMap[K_9];
            <K_10 extends keyof SVGElementTagNameMap>(selectors: K_10): SVGElementTagNameMap[K_10];
            <K_11 extends keyof MathMLElementTagNameMap>(selectors: K_11): MathMLElementTagNameMap[K_11];
            <K_12 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_12): HTMLElementDeprecatedTagNameMap[K_12];
            <E_1 extends Element = Element>(selectors: string): E_1;
        } & {
            <K_9 extends keyof HTMLElementTagNameMap>(selectors: K_9): HTMLElementTagNameMap[K_9];
            <K_10 extends keyof SVGElementTagNameMap>(selectors: K_10): SVGElementTagNameMap[K_10];
            <K_11 extends keyof MathMLElementTagNameMap>(selectors: K_11): MathMLElementTagNameMap[K_11];
            <K_12 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_12): HTMLElementDeprecatedTagNameMap[K_12];
            <E_1 extends Element = Element>(selectors: string): E_1;
        } & {
            <K_9 extends keyof HTMLElementTagNameMap>(selectors: K_9): HTMLElementTagNameMap[K_9];
            <K_10 extends keyof SVGElementTagNameMap>(selectors: K_10): SVGElementTagNameMap[K_10];
            <K_11 extends keyof MathMLElementTagNameMap>(selectors: K_11): MathMLElementTagNameMap[K_11];
            <K_12 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_12): HTMLElementDeprecatedTagNameMap[K_12];
            <E_1 extends Element = Element>(selectors: string): E_1;
        } & {
            <K_9 extends keyof HTMLElementTagNameMap>(selectors: K_9): HTMLElementTagNameMap[K_9];
            <K_10 extends keyof SVGElementTagNameMap>(selectors: K_10): SVGElementTagNameMap[K_10];
            <K_11 extends keyof MathMLElementTagNameMap>(selectors: K_11): MathMLElementTagNameMap[K_11];
            <K_12 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_12): HTMLElementDeprecatedTagNameMap[K_12];
            <E_1 extends Element = Element>(selectors: string): E_1;
        } & {
            <K_9 extends keyof HTMLElementTagNameMap>(selectors: K_9): HTMLElementTagNameMap[K_9];
            <K_10 extends keyof SVGElementTagNameMap>(selectors: K_10): SVGElementTagNameMap[K_10];
            <K_11 extends keyof MathMLElementTagNameMap>(selectors: K_11): MathMLElementTagNameMap[K_11];
            <K_12 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_12): HTMLElementDeprecatedTagNameMap[K_12];
            <E_1 extends Element = Element>(selectors: string): E_1;
        } & {
            <K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
            <K extends keyof SVGElementTagNameMap>(selectors: K): SVGElementTagNameMap[K] | null;
            <K extends keyof MathMLElementTagNameMap>(selectors: K): MathMLElementTagNameMap[K] | null;
            <K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): HTMLElementDeprecatedTagNameMap[K] | null;
            <E extends Element = Element>(selectors: string): E | null;
        } & {
            <K_9 extends keyof HTMLElementTagNameMap>(selectors: K_9): HTMLElementTagNameMap[K_9];
            <K_10 extends keyof SVGElementTagNameMap>(selectors: K_10): SVGElementTagNameMap[K_10];
            <K_11 extends keyof MathMLElementTagNameMap>(selectors: K_11): MathMLElementTagNameMap[K_11];
            <K_12 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_12): HTMLElementDeprecatedTagNameMap[K_12];
            <E_1 extends Element = Element>(selectors: string): E_1;
        } & {
            <K_9 extends keyof HTMLElementTagNameMap>(selectors: K_9): HTMLElementTagNameMap[K_9];
            <K_10 extends keyof SVGElementTagNameMap>(selectors: K_10): SVGElementTagNameMap[K_10];
            <K_11 extends keyof MathMLElementTagNameMap>(selectors: K_11): MathMLElementTagNameMap[K_11];
            <K_12 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_12): HTMLElementDeprecatedTagNameMap[K_12];
            <E_1 extends Element = Element>(selectors: string): E_1;
        } & {
            <K_9 extends keyof HTMLElementTagNameMap>(selectors: K_9): HTMLElementTagNameMap[K_9];
            <K_10 extends keyof SVGElementTagNameMap>(selectors: K_10): SVGElementTagNameMap[K_10];
            <K_11 extends keyof MathMLElementTagNameMap>(selectors: K_11): MathMLElementTagNameMap[K_11];
            <K_12 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_12): HTMLElementDeprecatedTagNameMap[K_12];
            <E_1 extends Element = Element>(selectors: string): E_1;
        } & {
            <K_9 extends keyof HTMLElementTagNameMap>(selectors: K_9): HTMLElementTagNameMap[K_9];
            <K_10 extends keyof SVGElementTagNameMap>(selectors: K_10): SVGElementTagNameMap[K_10];
            <K_11 extends keyof MathMLElementTagNameMap>(selectors: K_11): MathMLElementTagNameMap[K_11];
            <K_12 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_12): HTMLElementDeprecatedTagNameMap[K_12];
            <E_1 extends Element = Element>(selectors: string): E_1;
        } & {
            <K_9 extends keyof HTMLElementTagNameMap>(selectors: K_9): HTMLElementTagNameMap[K_9];
            <K_10 extends keyof SVGElementTagNameMap>(selectors: K_10): SVGElementTagNameMap[K_10];
            <K_11 extends keyof MathMLElementTagNameMap>(selectors: K_11): MathMLElementTagNameMap[K_11];
            <K_12 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_12): HTMLElementDeprecatedTagNameMap[K_12];
            <E_1 extends Element = Element>(selectors: string): E_1;
        } & {
            <K_9 extends keyof HTMLElementTagNameMap>(selectors: K_9): HTMLElementTagNameMap[K_9];
            <K_10 extends keyof SVGElementTagNameMap>(selectors: K_10): SVGElementTagNameMap[K_10];
            <K_11 extends keyof MathMLElementTagNameMap>(selectors: K_11): MathMLElementTagNameMap[K_11];
            <K_12 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_12): HTMLElementDeprecatedTagNameMap[K_12];
            <E_1 extends Element = Element>(selectors: string): E_1;
        } & {
            <K_9 extends keyof HTMLElementTagNameMap>(selectors: K_9): HTMLElementTagNameMap[K_9];
            <K_10 extends keyof SVGElementTagNameMap>(selectors: K_10): SVGElementTagNameMap[K_10];
            <K_11 extends keyof MathMLElementTagNameMap>(selectors: K_11): MathMLElementTagNameMap[K_11];
            <K_12 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_12): HTMLElementDeprecatedTagNameMap[K_12];
            <E_1 extends Element = Element>(selectors: string): E_1;
        } & {
            <K_9 extends keyof HTMLElementTagNameMap>(selectors: K_9): HTMLElementTagNameMap[K_9];
            <K_10 extends keyof SVGElementTagNameMap>(selectors: K_10): SVGElementTagNameMap[K_10];
            <K_11 extends keyof MathMLElementTagNameMap>(selectors: K_11): MathMLElementTagNameMap[K_11];
            <K_12 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_12): HTMLElementDeprecatedTagNameMap[K_12];
            <E_1 extends Element = Element>(selectors: string): E_1;
        };
        querySelectorAll: {
            <K_13 extends keyof HTMLElementTagNameMap>(selectors: K_13): NodeListOf<HTMLElementTagNameMap[K_13]>;
            <K_14 extends keyof SVGElementTagNameMap>(selectors: K_14): NodeListOf<SVGElementTagNameMap[K_14]>;
            <K_15 extends keyof MathMLElementTagNameMap>(selectors: K_15): NodeListOf<MathMLElementTagNameMap[K_15]>;
            <K_16 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_16): NodeListOf<HTMLElementDeprecatedTagNameMap[K_16]>;
            <E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        } & {
            <K_13 extends keyof HTMLElementTagNameMap>(selectors: K_13): NodeListOf<HTMLElementTagNameMap[K_13]>;
            <K_14 extends keyof SVGElementTagNameMap>(selectors: K_14): NodeListOf<SVGElementTagNameMap[K_14]>;
            <K_15 extends keyof MathMLElementTagNameMap>(selectors: K_15): NodeListOf<MathMLElementTagNameMap[K_15]>;
            <K_16 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_16): NodeListOf<HTMLElementDeprecatedTagNameMap[K_16]>;
            <E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        } & {
            <K_13 extends keyof HTMLElementTagNameMap>(selectors: K_13): NodeListOf<HTMLElementTagNameMap[K_13]>;
            <K_14 extends keyof SVGElementTagNameMap>(selectors: K_14): NodeListOf<SVGElementTagNameMap[K_14]>;
            <K_15 extends keyof MathMLElementTagNameMap>(selectors: K_15): NodeListOf<MathMLElementTagNameMap[K_15]>;
            <K_16 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_16): NodeListOf<HTMLElementDeprecatedTagNameMap[K_16]>;
            <E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        } & {
            <K_13 extends keyof HTMLElementTagNameMap>(selectors: K_13): NodeListOf<HTMLElementTagNameMap[K_13]>;
            <K_14 extends keyof SVGElementTagNameMap>(selectors: K_14): NodeListOf<SVGElementTagNameMap[K_14]>;
            <K_15 extends keyof MathMLElementTagNameMap>(selectors: K_15): NodeListOf<MathMLElementTagNameMap[K_15]>;
            <K_16 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_16): NodeListOf<HTMLElementDeprecatedTagNameMap[K_16]>;
            <E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        } & {
            <K_13 extends keyof HTMLElementTagNameMap>(selectors: K_13): NodeListOf<HTMLElementTagNameMap[K_13]>;
            <K_14 extends keyof SVGElementTagNameMap>(selectors: K_14): NodeListOf<SVGElementTagNameMap[K_14]>;
            <K_15 extends keyof MathMLElementTagNameMap>(selectors: K_15): NodeListOf<MathMLElementTagNameMap[K_15]>;
            <K_16 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_16): NodeListOf<HTMLElementDeprecatedTagNameMap[K_16]>;
            <E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        } & {
            <K_13 extends keyof HTMLElementTagNameMap>(selectors: K_13): NodeListOf<HTMLElementTagNameMap[K_13]>;
            <K_14 extends keyof SVGElementTagNameMap>(selectors: K_14): NodeListOf<SVGElementTagNameMap[K_14]>;
            <K_15 extends keyof MathMLElementTagNameMap>(selectors: K_15): NodeListOf<MathMLElementTagNameMap[K_15]>;
            <K_16 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_16): NodeListOf<HTMLElementDeprecatedTagNameMap[K_16]>;
            <E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        } & {
            <K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>;
            <K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<SVGElementTagNameMap[K]>;
            <K extends keyof MathMLElementTagNameMap>(selectors: K): NodeListOf<MathMLElementTagNameMap[K]>;
            <K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): NodeListOf<HTMLElementDeprecatedTagNameMap[K]>;
            <E extends Element = Element>(selectors: string): NodeListOf<E>;
        } & {
            <K_13 extends keyof HTMLElementTagNameMap>(selectors: K_13): NodeListOf<HTMLElementTagNameMap[K_13]>;
            <K_14 extends keyof SVGElementTagNameMap>(selectors: K_14): NodeListOf<SVGElementTagNameMap[K_14]>;
            <K_15 extends keyof MathMLElementTagNameMap>(selectors: K_15): NodeListOf<MathMLElementTagNameMap[K_15]>;
            <K_16 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_16): NodeListOf<HTMLElementDeprecatedTagNameMap[K_16]>;
            <E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        } & {
            <K_13 extends keyof HTMLElementTagNameMap>(selectors: K_13): NodeListOf<HTMLElementTagNameMap[K_13]>;
            <K_14 extends keyof SVGElementTagNameMap>(selectors: K_14): NodeListOf<SVGElementTagNameMap[K_14]>;
            <K_15 extends keyof MathMLElementTagNameMap>(selectors: K_15): NodeListOf<MathMLElementTagNameMap[K_15]>;
            <K_16 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_16): NodeListOf<HTMLElementDeprecatedTagNameMap[K_16]>;
            <E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        } & {
            <K_13 extends keyof HTMLElementTagNameMap>(selectors: K_13): NodeListOf<HTMLElementTagNameMap[K_13]>;
            <K_14 extends keyof SVGElementTagNameMap>(selectors: K_14): NodeListOf<SVGElementTagNameMap[K_14]>;
            <K_15 extends keyof MathMLElementTagNameMap>(selectors: K_15): NodeListOf<MathMLElementTagNameMap[K_15]>;
            <K_16 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_16): NodeListOf<HTMLElementDeprecatedTagNameMap[K_16]>;
            <E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        } & {
            <K_13 extends keyof HTMLElementTagNameMap>(selectors: K_13): NodeListOf<HTMLElementTagNameMap[K_13]>;
            <K_14 extends keyof SVGElementTagNameMap>(selectors: K_14): NodeListOf<SVGElementTagNameMap[K_14]>;
            <K_15 extends keyof MathMLElementTagNameMap>(selectors: K_15): NodeListOf<MathMLElementTagNameMap[K_15]>;
            <K_16 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_16): NodeListOf<HTMLElementDeprecatedTagNameMap[K_16]>;
            <E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        } & {
            <K_13 extends keyof HTMLElementTagNameMap>(selectors: K_13): NodeListOf<HTMLElementTagNameMap[K_13]>;
            <K_14 extends keyof SVGElementTagNameMap>(selectors: K_14): NodeListOf<SVGElementTagNameMap[K_14]>;
            <K_15 extends keyof MathMLElementTagNameMap>(selectors: K_15): NodeListOf<MathMLElementTagNameMap[K_15]>;
            <K_16 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_16): NodeListOf<HTMLElementDeprecatedTagNameMap[K_16]>;
            <E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        } & {
            <K_13 extends keyof HTMLElementTagNameMap>(selectors: K_13): NodeListOf<HTMLElementTagNameMap[K_13]>;
            <K_14 extends keyof SVGElementTagNameMap>(selectors: K_14): NodeListOf<SVGElementTagNameMap[K_14]>;
            <K_15 extends keyof MathMLElementTagNameMap>(selectors: K_15): NodeListOf<MathMLElementTagNameMap[K_15]>;
            <K_16 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_16): NodeListOf<HTMLElementDeprecatedTagNameMap[K_16]>;
            <E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        } & {
            <K_13 extends keyof HTMLElementTagNameMap>(selectors: K_13): NodeListOf<HTMLElementTagNameMap[K_13]>;
            <K_14 extends keyof SVGElementTagNameMap>(selectors: K_14): NodeListOf<SVGElementTagNameMap[K_14]>;
            <K_15 extends keyof MathMLElementTagNameMap>(selectors: K_15): NodeListOf<MathMLElementTagNameMap[K_15]>;
            <K_16 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_16): NodeListOf<HTMLElementDeprecatedTagNameMap[K_16]>;
            <E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        } & {
            <K_13 extends keyof HTMLElementTagNameMap>(selectors: K_13): NodeListOf<HTMLElementTagNameMap[K_13]>;
            <K_14 extends keyof SVGElementTagNameMap>(selectors: K_14): NodeListOf<SVGElementTagNameMap[K_14]>;
            <K_15 extends keyof MathMLElementTagNameMap>(selectors: K_15): NodeListOf<MathMLElementTagNameMap[K_15]>;
            <K_16 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_16): NodeListOf<HTMLElementDeprecatedTagNameMap[K_16]>;
            <E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        };
        replaceChildren: ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (Node | string)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void) & ((...nodes: (string | Node)[]) => void);
        readonly assignedSlot: HTMLSlotElement | null;
        readonly attributeStyleMap: StylePropertyMap;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: ((this: GlobalEventHandlers, ev: UIEvent) => any) & ((this: GlobalEventHandlers, ev: UIEvent) => any) & ((this: GlobalEventHandlers, ev: UIEvent) => any) & ((this: GlobalEventHandlers, ev: UIEvent) => any) & ((this: GlobalEventHandlers, ev: UIEvent) => any) & ((this: GlobalEventHandlers, ev: UIEvent) => any) & ((this: GlobalEventHandlers, ev: UIEvent) => any) & ((this: GlobalEventHandlers, ev: UIEvent) => any) & ((this: GlobalEventHandlers, ev: UIEvent) => any) & ((this: GlobalEventHandlers, ev: UIEvent) => any) & ((this: GlobalEventHandlers, ev: UIEvent) => any) & ((this: GlobalEventHandlers, ev: UIEvent) => any) & ((this: GlobalEventHandlers, ev: UIEvent) => any) & ((this: GlobalEventHandlers, ev: UIEvent) => any) & ((this: GlobalEventHandlers, ev: UIEvent) => any);
        onanimationcancel: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any);
        onanimationend: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any);
        onanimationiteration: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any);
        onanimationstart: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any) & ((this: GlobalEventHandlers, ev: AnimationEvent) => any);
        onauxclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any);
        onbeforeinput: ((this: GlobalEventHandlers, ev: InputEvent) => any) & ((this: GlobalEventHandlers, ev: InputEvent) => any) & ((this: GlobalEventHandlers, ev: InputEvent) => any) & ((this: GlobalEventHandlers, ev: InputEvent) => any) & ((this: GlobalEventHandlers, ev: InputEvent) => any) & ((this: GlobalEventHandlers, ev: InputEvent) => any) & ((this: GlobalEventHandlers, ev: InputEvent) => any) & ((this: GlobalEventHandlers, ev: InputEvent) => any) & ((this: GlobalEventHandlers, ev: InputEvent) => any) & ((this: GlobalEventHandlers, ev: InputEvent) => any) & ((this: GlobalEventHandlers, ev: InputEvent) => any) & ((this: GlobalEventHandlers, ev: InputEvent) => any) & ((this: GlobalEventHandlers, ev: InputEvent) => any) & ((this: GlobalEventHandlers, ev: InputEvent) => any) & ((this: GlobalEventHandlers, ev: InputEvent) => any);
        onbeforetoggle: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onblur: ((this: GlobalEventHandlers, ev: FocusEvent) => any) & ((this: GlobalEventHandlers, ev: FocusEvent) => any) & ((this: GlobalEventHandlers, ev: FocusEvent) => any) & ((this: GlobalEventHandlers, ev: FocusEvent) => any) & ((this: GlobalEventHandlers, ev: FocusEvent) => any) & ((this: GlobalEventHandlers, ev: FocusEvent) => any) & ((this: GlobalEventHandlers, ev: FocusEvent) => any) & ((this: GlobalEventHandlers, ev: FocusEvent) => any) & ((this: GlobalEventHandlers, ev: FocusEvent) => any) & ((this: GlobalEventHandlers, ev: FocusEvent) => any) & ((this: GlobalEventHandlers, ev: FocusEvent) => any) & ((this: GlobalEventHandlers, ev: FocusEvent) => any) & ((this: GlobalEventHandlers, ev: FocusEvent) => any) & ((this: GlobalEventHandlers, ev: FocusEvent) => any) & ((this: GlobalEventHandlers, ev: FocusEvent) => any);
        oncancel: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        oncanplay: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        oncanplaythrough: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onchange: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any);
        onclose: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        oncontextmenu: ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any);
        oncopy: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any);
        oncuechange: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        oncut: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any);
        ondblclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any);
        ondrag: ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any);
        ondragend: ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any);
        ondragenter: ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any);
        ondragleave: ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any);
        ondragover: ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any);
        ondragstart: ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any);
        ondrop: ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any) & ((this: GlobalEventHandlers, ev: DragEvent) => any);
        ondurationchange: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onemptied: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onended: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onerror: OnErrorEventHandler;
        onfocus: ((this: GlobalEventHandlers, ev: FocusEvent) => any) & ((this: GlobalEventHandlers, ev: FocusEvent) => any) & ((this: GlobalEventHandlers, ev: FocusEvent) => any) & ((this: GlobalEventHandlers, ev: FocusEvent) => any) & ((this: GlobalEventHandlers, ev: FocusEvent) => any) & ((this: GlobalEventHandlers, ev: FocusEvent) => any) & ((this: GlobalEventHandlers, ev: FocusEvent) => any) & ((this: GlobalEventHandlers, ev: FocusEvent) => any) & ((this: GlobalEventHandlers, ev: FocusEvent) => any) & ((this: GlobalEventHandlers, ev: FocusEvent) => any) & ((this: GlobalEventHandlers, ev: FocusEvent) => any) & ((this: GlobalEventHandlers, ev: FocusEvent) => any) & ((this: GlobalEventHandlers, ev: FocusEvent) => any) & ((this: GlobalEventHandlers, ev: FocusEvent) => any) & ((this: GlobalEventHandlers, ev: FocusEvent) => any);
        onformdata: ((this: GlobalEventHandlers, ev: FormDataEvent) => any) & ((this: GlobalEventHandlers, ev: FormDataEvent) => any) & ((this: GlobalEventHandlers, ev: FormDataEvent) => any) & ((this: GlobalEventHandlers, ev: FormDataEvent) => any) & ((this: GlobalEventHandlers, ev: FormDataEvent) => any) & ((this: GlobalEventHandlers, ev: FormDataEvent) => any) & ((this: GlobalEventHandlers, ev: FormDataEvent) => any) & ((this: GlobalEventHandlers, ev: FormDataEvent) => any) & ((this: GlobalEventHandlers, ev: FormDataEvent) => any) & ((this: GlobalEventHandlers, ev: FormDataEvent) => any) & ((this: GlobalEventHandlers, ev: FormDataEvent) => any) & ((this: GlobalEventHandlers, ev: FormDataEvent) => any) & ((this: GlobalEventHandlers, ev: FormDataEvent) => any) & ((this: GlobalEventHandlers, ev: FormDataEvent) => any) & ((this: GlobalEventHandlers, ev: FormDataEvent) => any);
        ongotpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any);
        oninput: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        oninvalid: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onkeydown: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any);
        onkeypress: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any);
        onkeyup: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) & ((this: GlobalEventHandlers, ev: KeyboardEvent) => any);
        onload: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onloadeddata: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onloadedmetadata: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onloadstart: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onlostpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any);
        onmousedown: ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any);
        onmouseenter: ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any);
        onmouseleave: ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any);
        onmousemove: ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any);
        onmouseout: ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any);
        onmouseover: ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any);
        onmouseup: ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any) & ((this: GlobalEventHandlers, ev: MouseEvent) => any);
        onpaste: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) & ((this: GlobalEventHandlers, ev: ClipboardEvent) => any);
        onpause: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onplay: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onplaying: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onpointercancel: ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any);
        onpointerdown: ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any);
        onpointerenter: ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any);
        onpointerleave: ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any);
        onpointermove: ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any);
        onpointerout: ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any);
        onpointerover: ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any);
        onpointerup: ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any) & ((this: GlobalEventHandlers, ev: PointerEvent) => any);
        onprogress: ((this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any) & ((this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any) & ((this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any) & ((this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any) & ((this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any) & ((this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any) & ((this: GlobalEventHandlers, ev: ProgressEvent) => any) & ((this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any) & ((this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any) & ((this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any) & ((this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any) & ((this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any) & ((this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any) & ((this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any) & ((this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any);
        onratechange: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onreset: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onresize: ((this: GlobalEventHandlers, ev: UIEvent) => any) & ((this: GlobalEventHandlers, ev: UIEvent) => any) & ((this: GlobalEventHandlers, ev: UIEvent) => any) & ((this: GlobalEventHandlers, ev: UIEvent) => any) & ((this: GlobalEventHandlers, ev: UIEvent) => any) & ((this: GlobalEventHandlers, ev: UIEvent) => any) & ((this: GlobalEventHandlers, ev: UIEvent) => any) & ((this: GlobalEventHandlers, ev: UIEvent) => any) & ((this: GlobalEventHandlers, ev: UIEvent) => any) & ((this: GlobalEventHandlers, ev: UIEvent) => any) & ((this: GlobalEventHandlers, ev: UIEvent) => any) & ((this: GlobalEventHandlers, ev: UIEvent) => any) & ((this: GlobalEventHandlers, ev: UIEvent) => any) & ((this: GlobalEventHandlers, ev: UIEvent) => any) & ((this: GlobalEventHandlers, ev: UIEvent) => any);
        onscroll: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onscrollend: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onsecuritypolicyviolation: ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) & ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) & ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) & ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) & ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) & ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) & ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) & ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) & ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) & ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) & ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) & ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) & ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) & ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) & ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any);
        onseeked: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onseeking: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onselect: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onselectionchange: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onselectstart: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onslotchange: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onstalled: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onsubmit: ((this: GlobalEventHandlers, ev: SubmitEvent) => any) & ((this: GlobalEventHandlers, ev: SubmitEvent) => any) & ((this: GlobalEventHandlers, ev: SubmitEvent) => any) & ((this: GlobalEventHandlers, ev: SubmitEvent) => any) & ((this: GlobalEventHandlers, ev: SubmitEvent) => any) & ((this: GlobalEventHandlers, ev: SubmitEvent) => any) & ((this: GlobalEventHandlers, ev: SubmitEvent) => any) & ((this: GlobalEventHandlers, ev: SubmitEvent) => any) & ((this: GlobalEventHandlers, ev: SubmitEvent) => any) & ((this: GlobalEventHandlers, ev: SubmitEvent) => any) & ((this: GlobalEventHandlers, ev: SubmitEvent) => any) & ((this: GlobalEventHandlers, ev: SubmitEvent) => any) & ((this: GlobalEventHandlers, ev: SubmitEvent) => any) & ((this: GlobalEventHandlers, ev: SubmitEvent) => any) & ((this: GlobalEventHandlers, ev: SubmitEvent) => any);
        onsuspend: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        ontimeupdate: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        ontoggle: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        ontouchcancel?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any);
        ontouchend?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any);
        ontouchmove?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any);
        ontouchstart?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: GlobalEventHandlers, ev: TouchEvent) => any);
        ontransitioncancel: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any);
        ontransitionend: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any);
        ontransitionrun: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any);
        ontransitionstart: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any) & ((this: GlobalEventHandlers, ev: TransitionEvent) => any);
        onvolumechange: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onwaiting: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onwebkitanimationend: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onwebkitanimationiteration: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onwebkitanimationstart: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onwebkittransitionend: ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any) & ((this: GlobalEventHandlers, ev: Event) => any);
        onwheel: ((this: GlobalEventHandlers, ev: WheelEvent) => any) & ((this: GlobalEventHandlers, ev: WheelEvent) => any) & ((this: GlobalEventHandlers, ev: WheelEvent) => any) & ((this: GlobalEventHandlers, ev: WheelEvent) => any) & ((this: GlobalEventHandlers, ev: WheelEvent) => any) & ((this: GlobalEventHandlers, ev: WheelEvent) => any) & ((this: GlobalEventHandlers, ev: WheelEvent) => any) & ((this: GlobalEventHandlers, ev: WheelEvent) => any) & ((this: GlobalEventHandlers, ev: WheelEvent) => any) & ((this: GlobalEventHandlers, ev: WheelEvent) => any) & ((this: GlobalEventHandlers, ev: WheelEvent) => any) & ((this: GlobalEventHandlers, ev: WheelEvent) => any) & ((this: GlobalEventHandlers, ev: WheelEvent) => any) & ((this: GlobalEventHandlers, ev: WheelEvent) => any) & ((this: GlobalEventHandlers, ev: WheelEvent) => any);
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce: string;
        tabIndex: number;
        blur: (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void);
        focus: ((options?: FocusOptions) => void) & ((options?: FocusOptions) => void) & ((options?: FocusOptions) => void) & ((options?: FocusOptions) => void) & ((options?: FocusOptions) => void) & ((options?: FocusOptions) => void) & ((options?: FocusOptions) => void) & ((options?: FocusOptions) => void) & ((options?: FocusOptions) => void) & ((options?: FocusOptions) => void) & ((options?: FocusOptions) => void) & ((options?: FocusOptions) => void) & ((options?: FocusOptions) => void) & ((options?: FocusOptions) => void) & ((options?: FocusOptions) => void);
        readonly config: Promise<_descope_sdk_mixins.Config>;
        "__#29646@#configCacheClear": (() => void) & (() => void) & (() => void) & (() => void);
        "__#29646@#_configResource": Promise<_descope_sdk_mixins.Config>;
        "__#29646@#fetchConfig": (() => Promise<_descope_sdk_mixins.Config>) & (() => Promise<_descope_sdk_mixins.Config>) & (() => Promise<_descope_sdk_mixins.Config>) & (() => Promise<_descope_sdk_mixins.Config>);
        "__#29641@#isInit": boolean;
        "__#29645@#callbacks": Map<string, () => void> & Map<string, () => void> & Map<string, () => void> & Map<string, () => void>;
        onReset: ((sectionId: string, callback: () => void | Promise<void>) => () => void) & ((sectionId: string, callback: () => void | Promise<void>) => () => void) & ((sectionId: string, callback: () => void | Promise<void>) => () => void) & ((sectionId: string, callback: () => void | Promise<void>) => () => void);
        reset: ((...sectionIds: string[]) => Promise<void>) & ((...sectionIds: string[]) => Promise<void>) & ((...sectionIds: string[]) => Promise<void>) & ((...sectionIds: string[]) => Promise<void>);
        "__#29643@#handleError": ((attrName: string, newValue: string) => void) & ((attrName: string, newValue: string) => void) & ((attrName: string, newValue: string) => void) & ((attrName: string, newValue: string | null) => void) & ((attrName: string, newValue: string) => void) & ((attrName: string, newValue: string) => void) & ((attrName: string, newValue: string) => void) & ((attrName: string, newValue: string) => void) & ((attrName: string, newValue: string) => void) & ((attrName: string, newValue: string) => void) & ((attrName: string, newValue: string) => void) & ((attrName: string, newValue: string) => void) & ((attrName: string, newValue: string) => void);
        "__#29642@#observeMappings": {} & {} & {};
        observeAttribute: ((attrName: string, onAttrChange: (attrName: string, value: string) => void) => () => any) & ((attrName: string, onAttrChange: (attrName: string, value: string) => void) => () => any) & ((attrName: string, onAttrChange: (attrName: string, value: string) => void) => () => any) & ((attrName: string, onAttrChange: (attrName: string, value: string | null) => void) => () => any) & ((attrName: string, onAttrChange: (attrName: string, value: string) => void) => () => any) & ((attrName: string, onAttrChange: (attrName: string, value: string) => void) => () => any) & ((attrName: string, onAttrChange: (attrName: string, value: string) => void) => () => any) & ((attrName: string, onAttrChange: (attrName: string, value: string) => void) => () => any) & ((attrName: string, onAttrChange: (attrName: string, value: string) => void) => () => any) & ((attrName: string, onAttrChange: (attrName: string, value: string) => void) => () => any) & ((attrName: string, onAttrChange: (attrName: string, value: string) => void) => () => any) & ((attrName: string, onAttrChange: (attrName: string, value: string) => void) => () => any) & ((attrName: string, onAttrChange: (attrName: string, value: string) => void) => () => any) & ((attrName: string, onAttrChange: (attrName: string, value: string) => void) => () => any) & ((attrName: string, onAttrChange: (attrName: string, value: string) => void) => () => any) & ((attrName: string, onAttrChange: (attrName: string, value: string) => void) => () => any) & ((attrName: string, onAttrChange: (attrName: string, value: string) => void) => () => any) & ((attrName: string, onAttrChange: (attrName: string, value: string) => void) => () => any) & ((attrName: string, onAttrChange: (attrName: string, value: string) => void) => () => any);
        observeAttributes: ((attrs: string[], cb: (attrName: string, value: string) => void) => () => void) & ((attrs: string[], cb: (attrName: string, value: string) => void) => () => void) & ((attrs: string[], cb: (attrName: string, value: string) => void) => () => void) & ((attrs: string[], cb: (attrName: string, value: string | null) => void) => () => void) & ((attrs: string[], cb: (attrName: string, value: string) => void) => () => void) & ((attrs: string[], cb: (attrName: string, value: string) => void) => () => void) & ((attrs: string[], cb: (attrName: string, value: string) => void) => () => void) & ((attrs: string[], cb: (attrName: string, value: string) => void) => () => void) & ((attrs: string[], cb: (attrName: string, value: string) => void) => () => void) & ((attrs: string[], cb: (attrName: string, value: string) => void) => () => void) & ((attrs: string[], cb: (attrName: string, value: string) => void) => () => void) & ((attrs: string[], cb: (attrName: string, value: string) => void) => () => void) & ((attrs: string[], cb: (attrName: string, value: string) => void) => () => void) & ((attrs: string[], cb: (attrName: string, value: string) => void) => () => void) & ((attrs: string[], cb: (attrName: string, value: string) => void) => () => void) & ((attrs: string[], cb: (attrName: string, value: string) => void) => () => void) & ((attrs: string[], cb: (attrName: string, value: string) => void) => () => void) & ((attrs: string[], cb: (attrName: string, value: string) => void) => () => void) & ((attrs: string[], cb: (attrName: string, value: string) => void) => () => void);
        "__#29644@#lastBaseUrl"?: string;
        "__#29644@#workingBaseUrl"?: string;
        "__#29644@#getResourceUrls": ((filename: string) => (URL & {
            baseUrl: string;
        }) | (URL & {
            baseUrl: string;
        })[]) & ((filename: string) => (URL & {
            baseUrl: string;
        })[] | (URL & {
            baseUrl: string;
        })) & ((filename: string) => (URL & {
            baseUrl: string;
        }) | (URL & {
            baseUrl: string;
        })[]) & ((filename: string) => (URL & {
            baseUrl: string;
        }) | (URL & {
            baseUrl: string;
        })[]) & ((filename: string) => (URL & {
            baseUrl: string;
        }) | (URL & {
            baseUrl: string;
        })[]) & ((filename: string) => (URL & {
            baseUrl: string;
        }) | (URL & {
            baseUrl: string;
        })[]);
        fetchStaticResource: (<F extends "text" | "json">(filename: string, format: F) => Promise<{
            body: F extends "json" ? Record<string, any> : string;
            headers: Record<string, string>;
        }>) & (<F extends "text" | "json">(filename: string, format: F) => Promise<{
            body: F extends "json" ? Record<string, any> : string;
            headers: Record<string, string>;
        }>) & (<F extends "text" | "json">(filename: string, format: F) => Promise<{
            body: F extends "json" ? Record<string, any> : string;
            headers: Record<string, string>;
        }>) & (<F extends "text" | "json">(filename: string, format: F) => Promise<{
            body: F extends "json" ? Record<string, any> : string;
            headers: Record<string, string>;
        }>) & (<F_1 extends "text" | "json">(filename: string, format: F_1) => Promise<{
            body: F_1 extends "json" ? Record<string, any> : string;
            headers: Record<string, string>;
        }>) & (<F_2 extends "text" | "json">(filename: string, format: F_2) => Promise<{
            body: F_2 extends "json" ? Record<string, any> : string;
            headers: Record<string, string>;
        }>);
        readonly baseStaticUrl: string;
        readonly baseUrl: string;
        readonly projectId: string;
        contentRootElement: HTMLElement;
        rootElement: HTMLElement;
        injectStyle: ((cssString: string, { prepend }?: {
            prepend?: boolean;
        }) => {
            styleEle: HTMLStyleElement;
            ref: HTMLElement | ShadowRoot;
            replaceSync(cssString: string): void;
            readonly cssRules: CSSRuleList;
        } | CSSStyleSheet) & ((cssString: string, { prepend }?: {
            prepend?: boolean;
        }) => {
            styleEle: HTMLStyleElement;
            ref: HTMLElement | ShadowRoot;
            replaceSync(cssString: string): void;
            readonly cssRules: CSSRuleList;
        } | CSSStyleSheet) & ((cssString: string, { prepend }?: {
            prepend?: boolean;
        }) => {
            styleEle: HTMLStyleElement;
            ref: HTMLElement | ShadowRoot;
            replaceSync(cssString: string): void;
            readonly cssRules: CSSRuleList;
        } | CSSStyleSheet) & ((cssString: string, { prepend }?: {
            prepend?: boolean;
        }) => {
            styleEle: HTMLStyleElement;
            ref: HTMLElement | ShadowRoot;
            replaceSync(cssString: string): void;
            readonly cssRules: CSSRuleList;
        } | CSSStyleSheet);
        "__#29647@#setNonce": (() => void) & (() => void) & (() => void) & (() => void);
        readonly refreshCookieName: string;
        "__#7@#initWidgetRoot": (() => Promise<void>) & (() => Promise<void>) & (() => Promise<void>) & (() => Promise<void>) & (() => Promise<void>) & (() => Promise<void>) & (() => Promise<void>);
        state: State;
        "__#5@#api": Sdk;
        "__#5@#createSdk": (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void);
        readonly widgetId: string;
        readonly tenantId: string;
        readonly mock: string;
        readonly api: {
            user: {
                me: () => Promise<any>;
            };
            tenant: {
                details: () => Promise<any>;
                adminLinkSso: () => Promise<any>;
            };
        };
        writingSuggestions: string;
        readonly currentCSSZoom: number;
        getHTML(options?: GetHTMLOptions): string;
        setHTMLUnsafe(html: string): void;
        ariaBrailleLabel: string | null;
        ariaBrailleRoleDescription: string | null;
        ariaColIndexText: string | null;
        ariaRowIndexText: string | null;
        oncontextlost: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncontextrestored: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        actions: _reduxjs_toolkit.CaseReducerActions<{}, "widget"> & {
            getMe: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
            getTenant: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
            getTenantAdminLinkSSO: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
        } & _reduxjs_toolkit.CaseReducerActions<{}, "widget"> & {
            getMe: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
            getTenant: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
            getTenantAdminLinkSSO: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
        } & _reduxjs_toolkit.CaseReducerActions<{}, "widget"> & {
            getMe: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
            getTenant: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
            getTenantAdminLinkSSO: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
        } & _reduxjs_toolkit.CaseReducerActions<{}, "widget"> & {
            getMe: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
            getTenant: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
            getTenantAdminLinkSSO: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
        } & _reduxjs_toolkit.CaseReducerActions<{}, "widget"> & {
            getMe: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
            getTenant: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
            getTenantAdminLinkSSO: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
        } & _reduxjs_toolkit.CaseReducerActions<{}, "widget"> & {
            getMe: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
            getTenant: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
            getTenantAdminLinkSSO: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
        } & _reduxjs_toolkit.CaseReducerActions<{}, "widget"> & {
            getMe: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
            getTenant: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
            getTenantAdminLinkSSO: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
        } & _reduxjs_toolkit.CaseReducerActions<{}, "widget"> & {
            getMe: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
            getTenant: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
            getTenantAdminLinkSSO: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
        } & _reduxjs_toolkit.CaseReducerActions<{}, "widget"> & {
            getMe: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
            getTenant: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
            getTenantAdminLinkSSO: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
        } & _reduxjs_toolkit.CaseReducerActions<{}, "widget"> & {
            getMe: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
            getTenant: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
            getTenantAdminLinkSSO: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
        } & _reduxjs_toolkit.CaseReducerActions<{}, "widget"> & {
            getMe: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
            getTenant: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
            getTenantAdminLinkSSO: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
        } & _reduxjs_toolkit.CaseReducerActions<{}, "widget"> & {
            getMe: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
            getTenant: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
            getTenantAdminLinkSSO: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
        } & _reduxjs_toolkit.CaseReducerActions<{}, "widget"> & {
            getMe: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
            getTenant: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
            getTenantAdminLinkSSO: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
        } & _reduxjs_toolkit.CaseReducerActions<{}, "widget"> & {
            getMe: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
            getTenant: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
            getTenantAdminLinkSSO: _reduxjs_toolkit.AsyncThunk<any, never, {
                extra: {
                    api: Sdk;
                };
                state?: unknown;
                dispatch?: redux.Dispatch;
                rejectValue?: unknown;
                serializedErrorType?: unknown;
                pendingMeta?: unknown;
                fulfilledMeta?: unknown;
                rejectedMeta?: unknown;
            }>;
        };
        subscribe: <SelectorR = State>(cb: (state: SelectorR) => void, selector?: (state: State) => SelectorR) => redux.Unsubscribe;
        fetchWidgetPage: ((filename: string) => Promise<string>) & ((filename: string) => Promise<string>) & ((filename: string) => Promise<string>) & ((filename: string) => Promise<string>) & ((filename: string) => Promise<string>) & ((filename: string) => Promise<string>) & ((filename: string) => Promise<string>);
        syncFlowTheme: ((flowDriver: _descope_sdk_component_drivers.FlowDriver) => void) & ((flowDriver: _descope_sdk_component_drivers.FlowDriver) => void) & ((flowDriver: _descope_sdk_component_drivers.FlowDriver) => void) & ((flowDriver: _descope_sdk_component_drivers.FlowDriver) => void) & ((flowDriver: _descope_sdk_component_drivers.FlowDriver) => void) & ((flowDriver: _descope_sdk_component_drivers.FlowDriver) => void);
        "__#29656@#globalStyle": _descope_sdk_mixins.InjectedStyle;
        readonly theme: _descope_sdk_mixins.ThemeOptions;
        readonly styleId: string;
        "__#29656@#_themeResource": Promise<void | Record<string, any>>;
        "__#29656@#fetchTheme"(): Promise<Record<string, any>>;
        readonly "__#29656@#themeResource": Promise<void | Record<string, any>>;
        "__#29656@#loadGlobalStyle"(): Promise<void>;
        "__#29656@#loadComponentsStyle"(): Promise<void>;
        "__#29656@#getFontsConfig"(): Promise<Record<string, {
            url?: string;
        }>>;
        "__#29656@#loadFonts"(): Promise<void>;
        "__#29656@#applyTheme"(): Promise<void>;
        "__#29656@#onThemeChange": () => void;
        "__#29656@#loadTheme"(): void;
        "__#29656@#toggleOsThemeChangeListener": (listen: boolean) => void;
        "__#9@#editModals": Record<string, _descope_sdk_component_drivers.ModalDriver>;
        "__#9@#editFlows": Record<string, _descope_sdk_component_drivers.FlowDriver>;
        "__#9@#deleteModals": Record<string, _descope_sdk_component_drivers.ModalDriver>;
        "__#9@#deleteFlows": Record<string, _descope_sdk_component_drivers.FlowDriver>;
        "__#9@#initEditModalContent"(flowId: string, type: string, attName: string, value: any): void;
        "__#9@#initDeleteModalContent"(flowId: string): void;
        "__#9@#updateCustomValueTenantAttrs": (tenantCustomAttributes: any) => void;
        "__#9@#initEditFlow"(nodeEle: Element, customAttrName: string, compInstance: _descope_sdk_component_drivers.UserAttributeDriver, type: string, attName: string, val: string): void;
        "__#9@#initDeleteFlow"(nodeEle: Element, customAttrName: string, compInstance: _descope_sdk_component_drivers.UserAttributeDriver): void;
        tenantEnforceSSODriver: _descope_sdk_component_drivers.UserAttributeDriver;
        "__#12@#editModal": _descope_sdk_component_drivers.ModalDriver;
        "__#12@#editFlow": _descope_sdk_component_drivers.FlowDriver;
        "__#12@#deleteModal": _descope_sdk_component_drivers.ModalDriver;
        "__#12@#deleteFlow": _descope_sdk_component_drivers.FlowDriver;
        "__#12@#initEditModal"(): void;
        "__#12@#initEditModalContent"(): void;
        "__#12@#initDeleteModal"(): void;
        "__#12@#initDeleteModalContent"(): void;
        "__#12@#initTenantEnforceSSO"(): void;
        "__#12@#onValueUpdate": (tenantEnforceSSO: any) => void;
        tenantSSOExclusionsDriver: _descope_sdk_component_drivers.UserAttributeDriver;
        "__#11@#editModal": _descope_sdk_component_drivers.ModalDriver;
        "__#11@#editFlow": _descope_sdk_component_drivers.FlowDriver;
        "__#11@#deleteModal": _descope_sdk_component_drivers.ModalDriver;
        "__#11@#deleteFlow": _descope_sdk_component_drivers.FlowDriver;
        "__#11@#initEditModal"(): void;
        "__#11@#initEditModalContent"(): void;
        "__#11@#initDeleteModal"(): void;
        "__#11@#initDeleteModalContent"(): void;
        "__#11@#initTenantSSOExclusions"(): void;
        "__#11@#onValueUpdate": (ssoEnforceSSOExclusions: any) => void;
        tenantEmailDomainsDriver: _descope_sdk_component_drivers.UserAttributeDriver;
        "__#10@#editModal": _descope_sdk_component_drivers.ModalDriver;
        "__#10@#editFlow": _descope_sdk_component_drivers.FlowDriver;
        "__#10@#deleteModal": _descope_sdk_component_drivers.ModalDriver;
        "__#10@#deleteFlow": _descope_sdk_component_drivers.FlowDriver;
        "__#10@#initEditModal"(): void;
        "__#10@#initEditModalContent"(): void;
        "__#10@#initDeleteModal"(): void;
        "__#10@#initDeleteModalContent"(): void;
        "__#10@#initTenantEmailDomains"(): void;
        "__#10@#onValueUpdate": (tenantEmailDomains: any) => void;
        tenantNameDriver: _descope_sdk_component_drivers.UserAttributeDriver;
        "__#13@#editModal": _descope_sdk_component_drivers.ModalDriver;
        "__#13@#editFlow": _descope_sdk_component_drivers.FlowDriver;
        "__#13@#initEditModal"(): void;
        "__#13@#initEditModalContent"(): void;
        "__#13@#initTenantName"(): void;
        "__#13@#onValueUpdate": (tenantName: any) => void;
        "__#6@#createFlowRedirectModal"(widgetFlow: string): void;
        "__#29649@#debuggerEle": (HTMLElement & {
            updateData: (data: {
                title: string;
                description?: string;
            } | {
                title: string;
                description?: string;
            }[]) => void;
        }) | null;
        "__#29649@#disableDebugger"(): void;
        "__#29649@#enableDebugger"(): Promise<void>;
        readonly debug: boolean;
        "__#29649@#handleDebugMode"(): void;
        "__#29649@#updateDebuggerMessages"(title: string, description: string): void;
    };
};

declare global {
    interface HTMLElement {
        attributeChangedCallback(attrName: string, oldValue: string | null, newValue: string | null): void;
        connectedCallback(): void;
    }
}

export { TenantProfileWidget as default };
