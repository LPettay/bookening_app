{"version":3,"file":"useUser.js","sources":["../../../src/hooks/useUser.ts"],"sourcesContent":["import { useEffect, useMemo, useRef, useState } from 'react';\nimport useContext from './useContext';\n\nconst useUser = () => {\n  const { user, fetchUser, isUserLoading, isAuthenticated, isUserFetched } =\n    useContext();\n  const [isInit, setIsInit] = useState(false); // we want to get the user only in the first time we got a session\n\n  // when session should be received, we want the return value of \"isUserLoading\" to be true starting from the first call\n  // (and not only when receiving an update from the context)\n  const isLoading = useRef(isUserLoading);\n\n  const shouldFetchUser = useMemo(\n    () => !user && !isUserLoading && isAuthenticated && !isInit,\n    [fetchUser, isAuthenticated, isInit],\n  );\n\n  // we want this to happen before returning a value so we are using \"useMemo\" and not \"useEffect\"\n  useMemo(() => {\n    isLoading.current = isUserLoading;\n  }, [isUserLoading]);\n\n  // we want this to happen before returning a value so we are using \"useMemo\" and not \"useEffect\"\n  useMemo(() => {\n    if (shouldFetchUser && !isUserFetched) {\n      isLoading.current = true;\n    }\n  }, [shouldFetchUser, isUserFetched]);\n\n  useEffect(() => {\n    if (shouldFetchUser) {\n      setIsInit(true);\n      fetchUser();\n    }\n  }, [shouldFetchUser]);\n\n  return { isUserLoading: isLoading.current, user };\n};\n\nexport default useUser;\n"],"names":["useUser","user","fetchUser","isUserLoading","isAuthenticated","isUserFetched","useContext","isInit","setIsInit","useState","isLoading","useRef","shouldFetchUser","useMemo","current","useEffect"],"mappings":"wGAGM,MAAAA,EAAU,KACd,MAAMC,KAAEA,EAAIC,UAAEA,EAASC,cAAEA,EAAaC,gBAAEA,EAAeC,cAAEA,GACvDC,KACKC,EAAQC,GAAaC,GAAS,GAI/BC,EAAYC,EAAOR,GAEnBS,EAAkBC,GACtB,KAAOZ,IAASE,GAAiBC,IAAoBG,GACrD,CAACL,EAAWE,EAAiBG,IAsB/B,OAlBAM,GAAQ,KACNH,EAAUI,QAAUX,CAAa,GAChC,CAACA,IAGJU,GAAQ,KACFD,IAAoBP,IACtBK,EAAUI,SAAU,EACrB,GACA,CAACF,EAAiBP,IAErBU,GAAU,KACJH,IACFJ,GAAU,GACVN,IACD,GACA,CAACU,IAEG,CAAET,cAAeO,EAAUI,QAASb,OAAM"}