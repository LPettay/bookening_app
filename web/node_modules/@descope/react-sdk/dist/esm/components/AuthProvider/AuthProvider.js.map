{"version":3,"file":"AuthProvider.js","sources":["../../../../src/components/AuthProvider/AuthProvider.tsx"],"sourcesContent":["import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { CookieConfig, OidcConfig } from '@descope/web-js-sdk';\nimport Context from '../../hooks/Context';\nimport { IContext, User } from '../../types';\nimport { withValidation } from '../../utils';\nimport useSdk from './useSdk';\n\ninterface IAuthProviderProps {\n  projectId: string;\n  baseUrl?: string;\n  // allows to override the base URL that is used to fetch static files\n  baseStaticUrl?: string;\n  // allows to override the base URL that is used to fetch external script files\n  baseCdnUrl?: string;\n  // Default is true. If true, tokens will be stored on local storage and can accessed with getToken function\n  persistTokens?: boolean;\n  // Default is true. If true, the SDK will automatically refresh the session token when it is about to expire\n  autoRefresh?: boolean;\n  // If true, session token (jwt) will be stored on cookie. Otherwise, the session token will be\n  // stored on local storage and can accessed with getSessionToken function\n  // Use this option if session token will stay small (less than 1k)\n  // NOTE: Session token can grow, especially in cases of using authorization, or adding custom claims\n  sessionTokenViaCookie?: CookieConfig;\n  // If truthy he SDK refresh and logout functions will use the OIDC client\n  // Accepts boolean or OIDC configuration\n  oidcConfig?: OidcConfig;\n  // Default is true. If true, last authenticated user will be stored on local storage and can accessed with getUser function\n  storeLastAuthenticatedUser?: boolean;\n  // If true, last authenticated user will not be removed after logout\n  keepLastAuthenticatedUserAfterLogout?: boolean;\n  // Use this option if the authentication is done via cookie, and configured with a different name\n  // Currently, this is done using Descope Flows\n  refreshCookieName?: string;\n  // Function to get external token, for seamless migration from external system\n  getExternalToken?: () => Promise<string>;\n  children?: React.ReactNode;\n}\n\nconst AuthProvider: FC<IAuthProviderProps> = ({\n  projectId,\n  baseUrl = '',\n  baseStaticUrl = '',\n  baseCdnUrl = '',\n  sessionTokenViaCookie = false,\n  persistTokens = true,\n  autoRefresh = true,\n  oidcConfig = undefined,\n  storeLastAuthenticatedUser = true,\n  keepLastAuthenticatedUserAfterLogout = false,\n  refreshCookieName = '',\n  getExternalToken = undefined,\n  children = undefined,\n}) => {\n  const [user, setUser] = useState<User>();\n  const [session, setSession] = useState<string>();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  const [isUserLoading, setIsUserLoading] = useState(false);\n  const [isSessionLoading, setIsSessionLoading] = useState(false);\n\n  // if oidc config is enabled, we attempt to finish the login, so we start as loading\n  const [isOidcLoading, setIsOidcLoading] = useState(!!oidcConfig);\n  const isOidcFinishedLogin = useRef(false);\n\n  const sdk = useSdk({\n    projectId,\n    baseUrl,\n    persistTokens,\n    autoRefresh,\n    sessionTokenViaCookie,\n    oidcConfig,\n    storeLastAuthenticatedUser,\n    keepLastAuthenticatedUserAfterLogout,\n    refreshCookieName,\n    getExternalToken,\n  });\n\n  useEffect(() => {\n    if (sdk) {\n      const unsubscribeSessionToken = sdk.onSessionTokenChange(setSession);\n      const unsubscribeUser = sdk.onUserChange(setUser);\n      const unsubscribeIsAuthenticated =\n        sdk.onIsAuthenticatedChange(setIsAuthenticated);\n\n      return () => {\n        unsubscribeSessionToken();\n        unsubscribeUser();\n        unsubscribeIsAuthenticated();\n      };\n    }\n    return undefined;\n  }, [sdk]);\n\n  const isSessionFetched = useRef(false);\n  const isUserFetched = useRef(false);\n\n  // if oidc config is enabled, and we have oidc params in the url\n  // we will finish the login (this should run only once)\n  useEffect(() => {\n    if (sdk && oidcConfig && !isOidcFinishedLogin.current) {\n      isOidcFinishedLogin.current = true;\n      sdk.oidc.finishLoginIfNeed().finally(() => {\n        setIsOidcLoading(false);\n        // We want that the session will fetched only once\n        isSessionFetched.current = true;\n      });\n    }\n  }, []);\n\n  const fetchSession = useCallback(() => {\n    // We want that the session will fetched only once\n    if (isSessionFetched.current) return;\n    isSessionFetched.current = true;\n\n    setIsSessionLoading(true);\n    withValidation(sdk?.refresh)(undefined, true).then(() => {\n      setIsSessionLoading(false);\n    });\n  }, [sdk]);\n\n  const fetchUser = useCallback(() => {\n    // We want that the user will fetched only once\n    if (isUserFetched.current) return;\n    isUserFetched.current = true;\n\n    setIsUserLoading(true);\n    withValidation(sdk.me)().then(() => {\n      setIsUserLoading(false);\n    });\n  }, [sdk]);\n\n  const value = useMemo<IContext>(\n    () => ({\n      fetchUser,\n      user,\n      isUserLoading,\n      isUserFetched: isUserFetched.current,\n      fetchSession,\n      session,\n      isAuthenticated,\n      isSessionLoading,\n      isOidcLoading,\n      isSessionFetched: isSessionFetched.current,\n      projectId,\n      baseUrl,\n      baseStaticUrl,\n      baseCdnUrl,\n      storeLastAuthenticatedUser,\n      keepLastAuthenticatedUserAfterLogout,\n      refreshCookieName,\n      setUser,\n      setSession,\n      setIsAuthenticated,\n      sdk,\n    }),\n    [\n      fetchUser,\n      user,\n      isUserLoading,\n      isUserFetched.current,\n      fetchSession,\n      session,\n      isAuthenticated,\n      isSessionLoading,\n      isOidcLoading,\n      isSessionFetched.current,\n      projectId,\n      baseUrl,\n      baseStaticUrl,\n      baseCdnUrl,\n      keepLastAuthenticatedUserAfterLogout,\n      refreshCookieName,\n      setUser,\n      setSession,\n      setIsAuthenticated,\n      sdk,\n    ],\n  );\n  return <Context.Provider value={value}>{children}</Context.Provider>;\n};\n\nexport default AuthProvider;\n"],"names":["AuthProvider","projectId","baseUrl","baseStaticUrl","baseCdnUrl","sessionTokenViaCookie","persistTokens","autoRefresh","oidcConfig","storeLastAuthenticatedUser","keepLastAuthenticatedUserAfterLogout","refreshCookieName","getExternalToken","children","user","setUser","useState","session","setSession","isAuthenticated","setIsAuthenticated","isUserLoading","setIsUserLoading","isSessionLoading","setIsSessionLoading","isOidcLoading","setIsOidcLoading","isOidcFinishedLogin","useRef","sdk","useSdk","useEffect","unsubscribeSessionToken","onSessionTokenChange","unsubscribeUser","onUserChange","unsubscribeIsAuthenticated","onIsAuthenticatedChange","isSessionFetched","isUserFetched","current","oidc","finishLoginIfNeed","finally","fetchSession","useCallback","withValidation","refresh","undefined","then","fetchUser","me","value","useMemo","React","createElement","Context","Provider"],"mappings":"8MA6CM,MAAAA,EAAuC,EAC3CC,YACAC,UAAU,GACVC,gBAAgB,GAChBC,aAAa,GACbC,yBAAwB,EACxBC,iBAAgB,EAChBC,eAAc,EACdC,aACAC,8BAA6B,EAC7BC,wCAAuC,EACvCC,oBAAoB,GACpBC,mBACAC,eAEA,MAAOC,EAAMC,GAAWC,KACjBC,EAASC,GAAcF,KACvBG,EAAiBC,GAAsBJ,GAAS,IAEhDK,EAAeC,GAAoBN,GAAS,IAC5CO,EAAkBC,GAAuBR,GAAS,IAGlDS,EAAeC,GAAoBV,IAAWR,GAC/CmB,EAAsBC,GAAO,GAE7BC,EAAMC,EAAO,CACjB7B,YACAC,UACAI,gBACAC,cACAF,wBACAG,aACAC,6BACAC,uCACAC,oBACAC,qBAGFmB,GAAU,KACR,GAAIF,EAAK,CACP,MAAMG,EAA0BH,EAAII,qBAAqBf,GACnDgB,EAAkBL,EAAIM,aAAapB,GACnCqB,EACJP,EAAIQ,wBAAwBjB,GAE9B,MAAO,KACLY,IACAE,IACAE,GAA4B,CAE/B,CACe,GACf,CAACP,IAEJ,MAAMS,EAAmBV,GAAO,GAC1BW,EAAgBX,GAAO,GAI7BG,GAAU,KACJF,GAAOrB,IAAemB,EAAoBa,UAC5Cb,EAAoBa,SAAU,EAC9BX,EAAIY,KAAKC,oBAAoBC,SAAQ,KACnCjB,GAAiB,GAEjBY,EAAiBE,SAAU,CAAI,IAElC,GACA,IAEH,MAAMI,EAAeC,GAAY,KAE3BP,EAAiBE,UACrBF,EAAiBE,SAAU,EAE3BhB,GAAoB,GACpBsB,EAAejB,aAAA,EAAAA,EAAKkB,QAApBD,MAA6BE,GAAW,GAAMC,MAAK,KACjDzB,GAAoB,EAAM,IAC1B,GACD,CAACK,IAEEqB,EAAYL,GAAY,KAExBN,EAAcC,UAClBD,EAAcC,SAAU,EAExBlB,GAAiB,GACjBwB,EAAejB,EAAIsB,GAAnBL,GAAyBG,MAAK,KAC5B3B,GAAiB,EAAM,IACvB,GACD,CAACO,IAEEuB,EAAQC,GACZ,KAAO,CACLH,YACApC,OACAO,gBACAkB,cAAeA,EAAcC,QAC7BI,eACA3B,UACAE,kBACAI,mBACAE,gBACAa,iBAAkBA,EAAiBE,QACnCvC,YACAC,UACAC,gBACAC,aACAK,6BACAC,uCACAC,oBACAI,UACAG,aACAE,qBACAS,SAEF,CACEqB,EACApC,EACAO,EACAkB,EAAcC,QACdI,EACA3B,EACAE,EACAI,EACAE,EACAa,EAAiBE,QACjBvC,EACAC,EACAC,EACAC,EACAM,EACAC,EACAI,EACAG,EACAE,EACAS,IAGJ,OAAOyB,EAAAC,cAACC,EAAQC,SAAQ,CAACL,MAAOA,GAAQvC,EAA4B"}