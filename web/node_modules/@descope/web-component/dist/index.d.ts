import createSdk from '@descope/web-js-sdk';
import * as _descope_sdk_mixins_static_resources_mixin from '@descope/sdk-mixins/static-resources-mixin';

type SdkConfig = Parameters<typeof createSdk>[0];
type Sdk = ReturnType<typeof createSdk>;
type SdkFlowNext = Sdk['flow']['next'];
type ComponentsDynamicAttrs = {
    attributes: Record<string, any>;
};
type ComponentsConfig = Record<string, any> & {
    componentsDynamicAttrs?: Record<string, ComponentsDynamicAttrs>;
};
type CssVars = Record<string, any>;
type KeepArgsByIndex<F, Indices extends readonly number[]> = F extends (...args: infer A) => infer R ? (...args: PickArgsByIndex<A, Indices>) => R : never;
type PickArgsByIndex<All extends readonly any[], Indices extends readonly number[]> = {
    [K in keyof Indices]: Indices[K] extends keyof All ? All[Indices[K]] : never;
};
type Project = {
    name: string;
};
declare enum Direction {
    backward = "backward",
    forward = "forward"
}
interface LastAuthState {
    loginId?: string;
    name?: string;
}
interface ScreenState {
    errorText?: string;
    errorType?: string;
    componentsConfig?: ComponentsConfig;
    cssVars?: CssVars;
    form?: Record<string, string>;
    inputs?: Record<string, string>;
    lastAuth?: LastAuthState;
    project?: Project;
    totp?: {
        image?: string;
        provisionUrl?: string;
    };
    notp?: {
        image?: string;
        redirectUrl?: string;
    };
    selfProvisionDomains?: unknown;
    user?: unknown;
    sso?: unknown;
    dynamicSelects?: unknown;
    keysInUse?: unknown;
    genericForm?: unknown;
    linkId?: unknown;
    sentTo?: unknown;
    clientScripts?: ClientScript[];
}
type SSOQueryParams = {
    oidcIdpStateId?: string;
    samlIdpStateId?: string;
    samlIdpUsername?: string;
    descopeIdpInitiated?: boolean;
    ssoAppId?: string;
    thirdPartyAppId: string;
    thirdPartyAppStateId?: string;
    applicationScopes?: string;
} & OIDCOptions;
type OIDCOptions = {
    oidcLoginHint?: string;
    oidcPrompt?: string;
    oidcErrorRedirectUri?: string;
    oidcResource?: string;
};
type FlowState = {
    flowId: string;
    projectId: string;
    baseUrl: string;
    tenant: string;
    stepId: string;
    stepName: string;
    executionId: string;
    action: string;
    redirectTo: string;
    redirectIsPopup: boolean;
    openInNewTabUrl?: string;
    redirectUrl: string;
    screenId: string;
    screenState: ScreenState;
    token: string;
    code: string;
    isPopup: boolean;
    exchangeError: string;
    webauthnTransactionId: string;
    webauthnOptions: string;
    redirectAuthCodeChallenge: string;
    redirectAuthCallbackUrl: string;
    redirectAuthBackupCallbackUri: string;
    redirectAuthInitiator: string;
    deferredRedirect: boolean;
    locale: string;
    samlIdpResponseUrl: string;
    samlIdpResponseSamlResponse: string;
    samlIdpResponseRelayState: string;
    nativeResponseType: string;
    nativePayload: Record<string, any>;
    reqTimestamp: number;
} & SSOQueryParams;
type StepState = {
    screenState: ScreenState;
    screenId: string;
    stepName: string;
    htmlFilename: string;
    htmlLocaleFilename: string;
    next: NextFn;
    direction: Direction | undefined;
    samlIdpUsername: string;
    action?: string;
} & OIDCOptions;
type CustomScreenState = Omit<ScreenState, 'cssVars' | 'componentsConfig' | 'inputs'> & {
    error?: {
        text: ScreenState['errorText'];
        type: ScreenState['errorType'];
    };
    action?: string;
    inboundAppApproveScopes?: {
        desc: string;
        id: string;
        required: boolean;
    }[];
};
type ScriptModule = {
    stop: () => void;
    start: () => void;
    /**
     * Refreshes any tokens or state that might be needed before form submission
     * Currently implemented for reCAPTCHA to ensure we have a fresh token
     */
    refresh?: () => Promise<void>;
};
type ClientScript = {
    id: string;
    initArgs: Record<string, any>;
    resultKey?: string;
};
type NextFn = KeepArgsByIndex<SdkFlowNext, [2, 5]>;
type FlowStateUpdateFn = (state: FlowState) => void;
type Operator = 'equal' | 'not-equal' | 'contains' | 'greater-than' | 'greater-than-or-equal' | 'less-than' | 'less-than-or-equal' | 'empty' | 'not-empty' | 'is-true' | 'is-false' | 'in' | 'not-in' | 'in-range' | 'not-in-range' | 'devised-by';
interface ClientConditionResult {
    screenId: string;
    screenName: string;
    clientScripts?: ClientScript[];
    componentsConfig?: ComponentsConfig;
    interactionId: string;
}
interface ClientCondition {
    operator: Operator;
    key: string;
    predicate?: string | number;
    met: ClientConditionResult;
    unmet?: ClientConditionResult;
}
type AutoFocusOptions = true | false | 'skipFirstScreen';
type ThemeOptions = 'light' | 'dark' | 'os';
type DescopeUI = Record<string, () => Promise<void>> & {
    componentsThemeManager: Record<string, any>;
};
type Font = {
    family: string[];
    label: string;
    url?: string;
};
type ThemeTemplate = {
    fonts: {
        font1: Font;
        font2: Font;
    };
};
type FlowConfig = {
    startScreenId?: string;
    startScreenName?: string;
    version: number;
    targetLocales?: string[];
    conditions?: ClientCondition[];
    condition?: ClientCondition;
    fingerprintEnabled?: boolean;
    fingerprintKey?: string;
    sdkScripts?: [
        {
            id: string;
            initArgs: Record<string, any>;
            resultKey?: string;
        }
    ];
    clientScripts?: ClientScript[];
    componentsConfig?: ComponentsConfig;
};
interface ProjectConfiguration {
    componentsVersion: string;
    cssTemplate: {
        dark: ThemeTemplate;
        light: ThemeTemplate;
    };
    flows: {
        [key: string]: FlowConfig;
    };
}
type FlowStatus = 'loading' | 'error' | 'success' | 'ready' | 'initial';

declare const createIsChanged: <T extends Record<string, any>>(state: T, prevState: T) => (attrName: keyof T) => boolean;

type StateObject = Record<string, any>;
type SubscribeCb<T> = (state: T, prevState: T, isChanged: ReturnType<typeof createIsChanged>) => void | Promise<void>;
type UpdateStateCb<T> = (state: T) => Partial<T>;
type IsChanged<T> = Parameters<SubscribeCb<T>>[2];
declare class State<T extends StateObject> {
    #private;
    constructor(init?: T, { forceUpdate }?: {
        forceUpdate?: boolean;
    });
    get current(): T;
    set forceUpdate(forceUpdate: boolean);
    update: (newState: Partial<T> | UpdateStateCb<T>) => void;
    subscribe<R extends any | Partial<T>>(cb: SubscribeCb<R>, selector?: (state: T) => R, { forceUpdate }?: {
        forceUpdate?: boolean;
    }): string;
    unsubscribe(token: string): boolean;
    unsubscribeAll(): boolean;
}

declare const BaseClass: (new (...params: any[]) => {
    injectStyle(cssString: string, { prepend }?: {
        prepend?: boolean;
    }): {
        styleEle: HTMLStyleElement;
        ref: HTMLElement | ShadowRoot;
        replaceSync(cssString: string): void;
        readonly cssRules: CSSRuleList;
    } | CSSStyleSheet;
    nonce: string;
    "__#29647@#setNonce"(): void;
    init(): Promise<void>;
    "__#29642@#observeMappings": {};
    observeAttribute(attrName: string, onAttrChange: (attrName: string, value: string) => void): () => any;
    observeAttributes(attrs: string[], cb: (attrName: string, value: string) => void): () => void;
    "__#29641@#isInit": boolean;
    connectedCallback: (() => void) & (() => void) & (() => void);
    accessKey: string;
    readonly accessKeyLabel: string;
    autocapitalize: string;
    dir: string;
    draggable: boolean;
    hidden: boolean;
    inert: boolean;
    innerText: string;
    lang: string;
    readonly offsetHeight: number;
    readonly offsetLeft: number;
    readonly offsetParent: Element;
    readonly offsetTop: number;
    readonly offsetWidth: number;
    outerText: string;
    popover: string;
    spellcheck: boolean;
    title: string;
    translate: boolean;
    attachInternals(): ElementInternals;
    click(): void;
    hidePopover(): void;
    showPopover(): void;
    togglePopover(force?: boolean): boolean;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    attributeChangedCallback(attrName: string, oldValue: string, newValue: string): void;
    readonly attributes: NamedNodeMap;
    readonly classList: DOMTokenList;
    className: string;
    readonly clientHeight: number;
    readonly clientLeft: number;
    readonly clientTop: number;
    readonly clientWidth: number;
    id: string;
    readonly localName: string;
    readonly namespaceURI: string;
    onfullscreenchange: (this: Element, ev: Event) => any;
    onfullscreenerror: (this: Element, ev: Event) => any;
    outerHTML: string;
    readonly ownerDocument: Document;
    readonly part: DOMTokenList;
    readonly prefix: string;
    readonly scrollHeight: number;
    scrollLeft: number;
    scrollTop: number;
    readonly scrollWidth: number;
    readonly shadowRoot: ShadowRoot;
    slot: string;
    readonly tagName: string;
    attachShadow(init: ShadowRootInit): ShadowRoot;
    checkVisibility(options?: CheckVisibilityOptions): boolean;
    closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
    closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
    closest<K_4 extends keyof MathMLElementTagNameMap>(selector: K_4): MathMLElementTagNameMap[K_4];
    closest<E extends Element = Element>(selectors: string): E;
    computedStyleMap(): StylePropertyMapReadOnly;
    getAttribute(qualifiedName: string): string;
    getAttributeNS(namespace: string, localName: string): string;
    getAttributeNames(): string[];
    getAttributeNode(qualifiedName: string): Attr;
    getAttributeNodeNS(namespace: string, localName: string): Attr;
    getBoundingClientRect(): DOMRect;
    getClientRects(): DOMRectList;
    getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
    getElementsByTagName<K_5 extends keyof HTMLElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<HTMLElementTagNameMap[K_5]>;
    getElementsByTagName<K_6 extends keyof SVGElementTagNameMap>(qualifiedName: K_6): HTMLCollectionOf<SVGElementTagNameMap[K_6]>;
    getElementsByTagName<K_7 extends keyof MathMLElementTagNameMap>(qualifiedName: K_7): HTMLCollectionOf<MathMLElementTagNameMap[K_7]>;
    getElementsByTagName<K_8 extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K_8): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K_8]>;
    getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
    getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
    getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
    getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
    getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
    hasAttribute(qualifiedName: string): boolean;
    hasAttributeNS(namespace: string, localName: string): boolean;
    hasAttributes(): boolean;
    hasPointerCapture(pointerId: number): boolean;
    insertAdjacentElement(where: InsertPosition, element: Element): Element;
    insertAdjacentHTML(position: InsertPosition, text: string): void;
    insertAdjacentText(where: InsertPosition, data: string): void;
    matches(selectors: string): boolean;
    releasePointerCapture(pointerId: number): void;
    removeAttribute(qualifiedName: string): void;
    removeAttributeNS(namespace: string, localName: string): void;
    removeAttributeNode(attr: Attr): Attr;
    requestFullscreen(options?: FullscreenOptions): Promise<void>;
    requestPointerLock(): void;
    scroll(options?: ScrollToOptions): void;
    scroll(x: number, y: number): void;
    scrollBy(options?: ScrollToOptions): void;
    scrollBy(x: number, y: number): void;
    scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
    scrollTo(options?: ScrollToOptions): void;
    scrollTo(x: number, y: number): void;
    setAttribute(qualifiedName: string, value: string): void;
    setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
    setAttributeNode(attr: Attr): Attr;
    setAttributeNodeNS(attr: Attr): Attr;
    setPointerCapture(pointerId: number): void;
    toggleAttribute(qualifiedName: string, force?: boolean): boolean;
    webkitMatchesSelector(selectors: string): boolean;
    readonly baseURI: string;
    readonly childNodes: NodeListOf<ChildNode>;
    readonly firstChild: ChildNode;
    readonly isConnected: boolean;
    readonly lastChild: ChildNode;
    readonly nextSibling: ChildNode;
    readonly nodeName: string;
    readonly nodeType: number;
    nodeValue: string;
    readonly parentElement: HTMLElement;
    readonly parentNode: ParentNode;
    readonly previousSibling: ChildNode;
    textContent: string;
    appendChild<T_1 extends Node>(node: T_1): T_1;
    cloneNode(deep?: boolean): Node;
    compareDocumentPosition(other: Node): number;
    contains(other: Node): boolean;
    getRootNode(options?: GetRootNodeOptions): Node;
    hasChildNodes(): boolean;
    insertBefore<T_2 extends Node>(node: T_2, child: Node): T_2;
    isDefaultNamespace(namespace: string): boolean;
    isEqualNode(otherNode: Node): boolean;
    isSameNode(otherNode: Node): boolean;
    lookupNamespaceURI(prefix: string): string;
    lookupPrefix(namespace: string): string;
    normalize(): void;
    removeChild<T_3 extends Node>(child: T_3): T_3;
    replaceChild<T_4 extends Node>(node: Node, child: T_4): T_4;
    readonly ELEMENT_NODE: 1;
    readonly ATTRIBUTE_NODE: 2;
    readonly TEXT_NODE: 3;
    readonly CDATA_SECTION_NODE: 4;
    readonly ENTITY_REFERENCE_NODE: 5;
    readonly ENTITY_NODE: 6;
    readonly PROCESSING_INSTRUCTION_NODE: 7;
    readonly COMMENT_NODE: 8;
    readonly DOCUMENT_NODE: 9;
    readonly DOCUMENT_TYPE_NODE: 10;
    readonly DOCUMENT_FRAGMENT_NODE: 11;
    readonly NOTATION_NODE: 12;
    readonly DOCUMENT_POSITION_DISCONNECTED: 1;
    readonly DOCUMENT_POSITION_PRECEDING: 2;
    readonly DOCUMENT_POSITION_FOLLOWING: 4;
    readonly DOCUMENT_POSITION_CONTAINS: 8;
    readonly DOCUMENT_POSITION_CONTAINED_BY: 16;
    readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32;
    dispatchEvent(event: Event): boolean;
    ariaAtomic: string;
    ariaAutoComplete: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaColCount: string;
    ariaColIndex: string;
    ariaColSpan: string;
    ariaCurrent: string;
    ariaDescription: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaHasPopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaKeyShortcuts: string;
    ariaLabel: string;
    ariaLevel: string;
    ariaLive: string;
    ariaModal: string;
    ariaMultiLine: string;
    ariaMultiSelectable: string;
    ariaOrientation: string;
    ariaPlaceholder: string;
    ariaPosInSet: string;
    ariaPressed: string;
    ariaReadOnly: string;
    ariaRequired: string;
    ariaRoleDescription: string;
    ariaRowCount: string;
    ariaRowIndex: string;
    ariaRowSpan: string;
    ariaSelected: string;
    ariaSetSize: string;
    ariaSort: string;
    ariaValueMax: string;
    ariaValueMin: string;
    ariaValueNow: string;
    ariaValueText: string;
    role: string;
    animate(keyframes: PropertyIndexedKeyframes | Keyframe[], options?: number | KeyframeAnimationOptions): Animation;
    getAnimations(options?: GetAnimationsOptions): Animation[];
    after(...nodes: (string | Node)[]): void;
    before(...nodes: (string | Node)[]): void;
    remove(): void;
    replaceWith(...nodes: (string | Node)[]): void;
    innerHTML: string;
    readonly nextElementSibling: Element;
    readonly previousElementSibling: Element;
    readonly childElementCount: number;
    readonly children: HTMLCollection;
    readonly firstElementChild: Element;
    readonly lastElementChild: Element;
    append(...nodes: (string | Node)[]): void;
    prepend(...nodes: (string | Node)[]): void;
    querySelector<K_9 extends keyof HTMLElementTagNameMap>(selectors: K_9): HTMLElementTagNameMap[K_9];
    querySelector<K_10 extends keyof SVGElementTagNameMap>(selectors: K_10): SVGElementTagNameMap[K_10];
    querySelector<K_11 extends keyof MathMLElementTagNameMap>(selectors: K_11): MathMLElementTagNameMap[K_11];
    querySelector<K_12 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_12): HTMLElementDeprecatedTagNameMap[K_12];
    querySelector<E_1 extends Element = Element>(selectors: string): E_1;
    querySelectorAll<K_13 extends keyof HTMLElementTagNameMap>(selectors: K_13): NodeListOf<HTMLElementTagNameMap[K_13]>;
    querySelectorAll<K_14 extends keyof SVGElementTagNameMap>(selectors: K_14): NodeListOf<SVGElementTagNameMap[K_14]>;
    querySelectorAll<K_15 extends keyof MathMLElementTagNameMap>(selectors: K_15): NodeListOf<MathMLElementTagNameMap[K_15]>;
    querySelectorAll<K_16 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_16): NodeListOf<HTMLElementDeprecatedTagNameMap[K_16]>;
    querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
    replaceChildren(...nodes: (string | Node)[]): void;
    readonly assignedSlot: HTMLSlotElement;
    readonly attributeStyleMap: StylePropertyMap;
    readonly style: CSSStyleDeclaration;
    contentEditable: string;
    enterKeyHint: string;
    inputMode: string;
    readonly isContentEditable: boolean;
    onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
    onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
    onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
    onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
    onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
    onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    onbeforeinput: (this: GlobalEventHandlers, ev: InputEvent) => any;
    onbeforetoggle: (this: GlobalEventHandlers, ev: Event) => any;
    onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
    oncancel: (this: GlobalEventHandlers, ev: Event) => any;
    oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
    oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
    onchange: (this: GlobalEventHandlers, ev: Event) => any;
    onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    onclose: (this: GlobalEventHandlers, ev: Event) => any;
    oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    oncopy: (this: GlobalEventHandlers, ev: ClipboardEvent) => any;
    oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
    oncut: (this: GlobalEventHandlers, ev: ClipboardEvent) => any;
    ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
    ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
    ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
    ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
    ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
    ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
    ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
    ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
    onemptied: (this: GlobalEventHandlers, ev: Event) => any;
    onended: (this: GlobalEventHandlers, ev: Event) => any;
    onerror: OnErrorEventHandlerNonNull;
    onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
    onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
    ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    oninput: (this: GlobalEventHandlers, ev: Event) => any;
    oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
    onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
    onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
    onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
    onload: (this: GlobalEventHandlers, ev: Event) => any;
    onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
    onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
    onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
    onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    onpaste: (this: GlobalEventHandlers, ev: ClipboardEvent) => any;
    onpause: (this: GlobalEventHandlers, ev: Event) => any;
    onplay: (this: GlobalEventHandlers, ev: Event) => any;
    onplaying: (this: GlobalEventHandlers, ev: Event) => any;
    onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
    onratechange: (this: GlobalEventHandlers, ev: Event) => any;
    onreset: (this: GlobalEventHandlers, ev: Event) => any;
    onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
    onscroll: (this: GlobalEventHandlers, ev: Event) => any;
    onscrollend: (this: GlobalEventHandlers, ev: Event) => any;
    onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
    onseeked: (this: GlobalEventHandlers, ev: Event) => any;
    onseeking: (this: GlobalEventHandlers, ev: Event) => any;
    onselect: (this: GlobalEventHandlers, ev: Event) => any;
    onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
    onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
    onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
    onstalled: (this: GlobalEventHandlers, ev: Event) => any;
    onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
    onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
    ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
    ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
    ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
    ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
    ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
    ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
    ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
    ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
    ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
    ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
    onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
    onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
    onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
    onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
    onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
    onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
    onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
    autofocus: boolean;
    readonly dataset: DOMStringMap;
    tabIndex: number;
    blur(): void;
    focus(options?: FocusOptions): void;
    "__#29640@#logger": _descope_sdk_mixins_static_resources_mixin.Logger;
    "__#29640@#wrapLogger"(logger: Partial<_descope_sdk_mixins_static_resources_mixin.Logger>): _descope_sdk_mixins_static_resources_mixin.Logger;
    get logger(): _descope_sdk_mixins_static_resources_mixin.Logger;
    set logger(logger: Partial<_descope_sdk_mixins_static_resources_mixin.Logger>);
    onLogEvent(logLevel: "error" | "warn" | "info" | "debug", data: any[]): void;
}) & {
    new (...params: any[]): {
        "__#7@#shouldMountInFormEle"(): boolean;
        "__#7@#handleOuterForm"(): void;
        connectedCallback(): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        inert: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        popover: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        hidePopover(): void;
        showPopover(): void;
        togglePopover(force?: boolean): boolean;
        addEventListener<K_17 extends keyof HTMLElementEventMap>(type: K_17, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_17]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_18 extends keyof HTMLElementEventMap>(type: K_18, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_18]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        attributeChangedCallback(attrName: string, oldValue: string, newValue: string): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        checkVisibility(options?: CheckVisibilityOptions): boolean;
        closest<K_19 extends keyof HTMLElementTagNameMap>(selector: K_19): HTMLElementTagNameMap[K_19];
        closest<K_20 extends keyof SVGElementTagNameMap>(selector: K_20): SVGElementTagNameMap[K_20];
        closest<K_21 extends keyof MathMLElementTagNameMap>(selector: K_21): MathMLElementTagNameMap[K_21];
        closest<E_3 extends Element = Element>(selectors: string): E_3;
        computedStyleMap(): StylePropertyMapReadOnly;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_22 extends keyof HTMLElementTagNameMap>(qualifiedName: K_22): HTMLCollectionOf<HTMLElementTagNameMap[K_22]>;
        getElementsByTagName<K_23 extends keyof SVGElementTagNameMap>(qualifiedName: K_23): HTMLCollectionOf<SVGElementTagNameMap[K_23]>;
        getElementsByTagName<K_24 extends keyof MathMLElementTagNameMap>(qualifiedName: K_24): HTMLCollectionOf<MathMLElementTagNameMap[K_24]>;
        getElementsByTagName<K_25 extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K_25): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K_25]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_5 extends Node>(node: T_5, child: Node): T_5;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_6 extends Node>(child: T_6): T_6;
        replaceChild<T_7 extends Node>(node: Node, child: T_7): T_7;
        readonly ELEMENT_NODE: 1;
        readonly ATTRIBUTE_NODE: 2;
        readonly TEXT_NODE: 3;
        readonly CDATA_SECTION_NODE: 4;
        readonly ENTITY_REFERENCE_NODE: 5;
        readonly ENTITY_NODE: 6;
        readonly PROCESSING_INSTRUCTION_NODE: 7;
        readonly COMMENT_NODE: 8;
        readonly DOCUMENT_NODE: 9;
        readonly DOCUMENT_TYPE_NODE: 10;
        readonly DOCUMENT_FRAGMENT_NODE: 11;
        readonly NOTATION_NODE: 12;
        readonly DOCUMENT_POSITION_DISCONNECTED: 1;
        readonly DOCUMENT_POSITION_PRECEDING: 2;
        readonly DOCUMENT_POSITION_FOLLOWING: 4;
        readonly DOCUMENT_POSITION_CONTAINS: 8;
        readonly DOCUMENT_POSITION_CONTAINED_BY: 16;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDescription: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaInvalid: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        role: string;
        animate(keyframes: PropertyIndexedKeyframes | Keyframe[], options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_26 extends keyof HTMLElementTagNameMap>(selectors: K_26): HTMLElementTagNameMap[K_26];
        querySelector<K_27 extends keyof SVGElementTagNameMap>(selectors: K_27): SVGElementTagNameMap[K_27];
        querySelector<K_28 extends keyof MathMLElementTagNameMap>(selectors: K_28): MathMLElementTagNameMap[K_28];
        querySelector<K_29 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_29): HTMLElementDeprecatedTagNameMap[K_29];
        querySelector<E_4 extends Element = Element>(selectors: string): E_4;
        querySelectorAll<K_30 extends keyof HTMLElementTagNameMap>(selectors: K_30): NodeListOf<HTMLElementTagNameMap[K_30]>;
        querySelectorAll<K_31 extends keyof SVGElementTagNameMap>(selectors: K_31): NodeListOf<SVGElementTagNameMap[K_31]>;
        querySelectorAll<K_32 extends keyof MathMLElementTagNameMap>(selectors: K_32): NodeListOf<MathMLElementTagNameMap[K_32]>;
        querySelectorAll<K_33 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_33): NodeListOf<HTMLElementDeprecatedTagNameMap[K_33]>;
        querySelectorAll<E_5 extends Element = Element>(selectors: string): NodeListOf<E_5>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        readonly attributeStyleMap: StylePropertyMap;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onbeforeinput: (this: GlobalEventHandlers, ev: InputEvent) => any;
        onbeforetoggle: (this: GlobalEventHandlers, ev: Event) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncancel: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncopy: (this: GlobalEventHandlers, ev: ClipboardEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        oncut: (this: GlobalEventHandlers, ev: ClipboardEvent) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpaste: (this: GlobalEventHandlers, ev: ClipboardEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onscrollend: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
} & (new (...params: any[]) => {
    "__#29644@#lastBaseUrl"?: string;
    "__#29644@#workingBaseUrl"?: string;
    "__#29644@#getResourceUrls"(filename: string): (URL & {
        baseUrl: string;
    }) | (URL & {
        baseUrl: string;
    })[];
    fetchStaticResource<F extends "text" | "json">(filename: string, format: F): Promise<{
        body: F extends "json" ? Record<string, any> : string;
        headers: Record<string, string>;
    }>;
    readonly baseStaticUrl: string;
    readonly baseUrl: string;
    accessKey: string;
    readonly accessKeyLabel: string;
    autocapitalize: string;
    dir: string;
    draggable: boolean;
    hidden: boolean;
    inert: boolean;
    innerText: string;
    lang: string;
    readonly offsetHeight: number;
    readonly offsetLeft: number;
    readonly offsetParent: Element;
    readonly offsetTop: number;
    readonly offsetWidth: number;
    outerText: string;
    popover: string;
    spellcheck: boolean;
    title: string;
    translate: boolean;
    attachInternals(): ElementInternals;
    click(): void;
    hidePopover(): void;
    showPopover(): void;
    togglePopover(force?: boolean): boolean;
    addEventListener<K_34 extends keyof HTMLElementEventMap>(type: K_34, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_34]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K_1_1 extends keyof HTMLElementEventMap>(type: K_1_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1_1]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    attributeChangedCallback(attrName: string, oldValue: string, newValue: string): void;
    connectedCallback: (() => void) & (() => void) & (() => void);
    readonly attributes: NamedNodeMap;
    readonly classList: DOMTokenList;
    className: string;
    readonly clientHeight: number;
    readonly clientLeft: number;
    readonly clientTop: number;
    readonly clientWidth: number;
    id: string;
    readonly localName: string;
    readonly namespaceURI: string;
    onfullscreenchange: (this: Element, ev: Event) => any;
    onfullscreenerror: (this: Element, ev: Event) => any;
    outerHTML: string;
    readonly ownerDocument: Document;
    readonly part: DOMTokenList;
    readonly prefix: string;
    readonly scrollHeight: number;
    scrollLeft: number;
    scrollTop: number;
    readonly scrollWidth: number;
    readonly shadowRoot: ShadowRoot;
    slot: string;
    readonly tagName: string;
    attachShadow(init: ShadowRootInit): ShadowRoot;
    checkVisibility(options?: CheckVisibilityOptions): boolean;
    closest<K_2_1 extends keyof HTMLElementTagNameMap>(selector: K_2_1): HTMLElementTagNameMap[K_2_1];
    closest<K_3_1 extends keyof SVGElementTagNameMap>(selector: K_3_1): SVGElementTagNameMap[K_3_1];
    closest<K_4_1 extends keyof MathMLElementTagNameMap>(selector: K_4_1): MathMLElementTagNameMap[K_4_1];
    closest<E_6 extends Element = Element>(selectors: string): E_6;
    computedStyleMap(): StylePropertyMapReadOnly;
    getAttribute(qualifiedName: string): string;
    getAttributeNS(namespace: string, localName: string): string;
    getAttributeNames(): string[];
    getAttributeNode(qualifiedName: string): Attr;
    getAttributeNodeNS(namespace: string, localName: string): Attr;
    getBoundingClientRect(): DOMRect;
    getClientRects(): DOMRectList;
    getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
    getElementsByTagName<K_5_1 extends keyof HTMLElementTagNameMap>(qualifiedName: K_5_1): HTMLCollectionOf<HTMLElementTagNameMap[K_5_1]>;
    getElementsByTagName<K_6_1 extends keyof SVGElementTagNameMap>(qualifiedName: K_6_1): HTMLCollectionOf<SVGElementTagNameMap[K_6_1]>;
    getElementsByTagName<K_7_1 extends keyof MathMLElementTagNameMap>(qualifiedName: K_7_1): HTMLCollectionOf<MathMLElementTagNameMap[K_7_1]>;
    getElementsByTagName<K_8_1 extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K_8_1): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K_8_1]>;
    getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
    getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
    getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
    getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
    getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
    hasAttribute(qualifiedName: string): boolean;
    hasAttributeNS(namespace: string, localName: string): boolean;
    hasAttributes(): boolean;
    hasPointerCapture(pointerId: number): boolean;
    insertAdjacentElement(where: InsertPosition, element: Element): Element;
    insertAdjacentHTML(position: InsertPosition, text: string): void;
    insertAdjacentText(where: InsertPosition, data: string): void;
    matches(selectors: string): boolean;
    releasePointerCapture(pointerId: number): void;
    removeAttribute(qualifiedName: string): void;
    removeAttributeNS(namespace: string, localName: string): void;
    removeAttributeNode(attr: Attr): Attr;
    requestFullscreen(options?: FullscreenOptions): Promise<void>;
    requestPointerLock(): void;
    scroll(options?: ScrollToOptions): void;
    scroll(x: number, y: number): void;
    scrollBy(options?: ScrollToOptions): void;
    scrollBy(x: number, y: number): void;
    scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
    scrollTo(options?: ScrollToOptions): void;
    scrollTo(x: number, y: number): void;
    setAttribute(qualifiedName: string, value: string): void;
    setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
    setAttributeNode(attr: Attr): Attr;
    setAttributeNodeNS(attr: Attr): Attr;
    setPointerCapture(pointerId: number): void;
    toggleAttribute(qualifiedName: string, force?: boolean): boolean;
    webkitMatchesSelector(selectors: string): boolean;
    readonly baseURI: string;
    readonly childNodes: NodeListOf<ChildNode>;
    readonly firstChild: ChildNode;
    readonly isConnected: boolean;
    readonly lastChild: ChildNode;
    readonly nextSibling: ChildNode;
    readonly nodeName: string;
    readonly nodeType: number;
    nodeValue: string;
    readonly parentElement: HTMLElement;
    readonly parentNode: ParentNode;
    readonly previousSibling: ChildNode;
    textContent: string;
    appendChild<T_1_1 extends Node>(node: T_1_1): T_1_1;
    cloneNode(deep?: boolean): Node;
    compareDocumentPosition(other: Node): number;
    contains(other: Node): boolean;
    getRootNode(options?: GetRootNodeOptions): Node;
    hasChildNodes(): boolean;
    insertBefore<T_2_1 extends Node>(node: T_2_1, child: Node): T_2_1;
    isDefaultNamespace(namespace: string): boolean;
    isEqualNode(otherNode: Node): boolean;
    isSameNode(otherNode: Node): boolean;
    lookupNamespaceURI(prefix: string): string;
    lookupPrefix(namespace: string): string;
    normalize(): void;
    removeChild<T_3_1 extends Node>(child: T_3_1): T_3_1;
    replaceChild<T_4_1 extends Node>(node: Node, child: T_4_1): T_4_1;
    readonly ELEMENT_NODE: 1;
    readonly ATTRIBUTE_NODE: 2;
    readonly TEXT_NODE: 3;
    readonly CDATA_SECTION_NODE: 4;
    readonly ENTITY_REFERENCE_NODE: 5;
    readonly ENTITY_NODE: 6;
    readonly PROCESSING_INSTRUCTION_NODE: 7;
    readonly COMMENT_NODE: 8;
    readonly DOCUMENT_NODE: 9;
    readonly DOCUMENT_TYPE_NODE: 10;
    readonly DOCUMENT_FRAGMENT_NODE: 11;
    readonly NOTATION_NODE: 12;
    readonly DOCUMENT_POSITION_DISCONNECTED: 1;
    readonly DOCUMENT_POSITION_PRECEDING: 2;
    readonly DOCUMENT_POSITION_FOLLOWING: 4;
    readonly DOCUMENT_POSITION_CONTAINS: 8;
    readonly DOCUMENT_POSITION_CONTAINED_BY: 16;
    readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32;
    dispatchEvent(event: Event): boolean;
    ariaAtomic: string;
    ariaAutoComplete: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaColCount: string;
    ariaColIndex: string;
    ariaColSpan: string;
    ariaCurrent: string;
    ariaDescription: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaHasPopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaKeyShortcuts: string;
    ariaLabel: string;
    ariaLevel: string;
    ariaLive: string;
    ariaModal: string;
    ariaMultiLine: string;
    ariaMultiSelectable: string;
    ariaOrientation: string;
    ariaPlaceholder: string;
    ariaPosInSet: string;
    ariaPressed: string;
    ariaReadOnly: string;
    ariaRequired: string;
    ariaRoleDescription: string;
    ariaRowCount: string;
    ariaRowIndex: string;
    ariaRowSpan: string;
    ariaSelected: string;
    ariaSetSize: string;
    ariaSort: string;
    ariaValueMax: string;
    ariaValueMin: string;
    ariaValueNow: string;
    ariaValueText: string;
    role: string;
    animate(keyframes: PropertyIndexedKeyframes | Keyframe[], options?: number | KeyframeAnimationOptions): Animation;
    getAnimations(options?: GetAnimationsOptions): Animation[];
    after(...nodes: (string | Node)[]): void;
    before(...nodes: (string | Node)[]): void;
    remove(): void;
    replaceWith(...nodes: (string | Node)[]): void;
    innerHTML: string;
    readonly nextElementSibling: Element;
    readonly previousElementSibling: Element;
    readonly childElementCount: number;
    readonly children: HTMLCollection;
    readonly firstElementChild: Element;
    readonly lastElementChild: Element;
    append(...nodes: (string | Node)[]): void;
    prepend(...nodes: (string | Node)[]): void;
    querySelector<K_9_1 extends keyof HTMLElementTagNameMap>(selectors: K_9_1): HTMLElementTagNameMap[K_9_1];
    querySelector<K_10_1 extends keyof SVGElementTagNameMap>(selectors: K_10_1): SVGElementTagNameMap[K_10_1];
    querySelector<K_11_1 extends keyof MathMLElementTagNameMap>(selectors: K_11_1): MathMLElementTagNameMap[K_11_1];
    querySelector<K_12_1 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_12_1): HTMLElementDeprecatedTagNameMap[K_12_1];
    querySelector<E_1_1 extends Element = Element>(selectors: string): E_1_1;
    querySelectorAll<K_13_1 extends keyof HTMLElementTagNameMap>(selectors: K_13_1): NodeListOf<HTMLElementTagNameMap[K_13_1]>;
    querySelectorAll<K_14_1 extends keyof SVGElementTagNameMap>(selectors: K_14_1): NodeListOf<SVGElementTagNameMap[K_14_1]>;
    querySelectorAll<K_15_1 extends keyof MathMLElementTagNameMap>(selectors: K_15_1): NodeListOf<MathMLElementTagNameMap[K_15_1]>;
    querySelectorAll<K_16_1 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_16_1): NodeListOf<HTMLElementDeprecatedTagNameMap[K_16_1]>;
    querySelectorAll<E_2_1 extends Element = Element>(selectors: string): NodeListOf<E_2_1>;
    replaceChildren(...nodes: (string | Node)[]): void;
    readonly assignedSlot: HTMLSlotElement;
    readonly attributeStyleMap: StylePropertyMap;
    readonly style: CSSStyleDeclaration;
    contentEditable: string;
    enterKeyHint: string;
    inputMode: string;
    readonly isContentEditable: boolean;
    onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
    onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
    onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
    onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
    onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
    onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    onbeforeinput: (this: GlobalEventHandlers, ev: InputEvent) => any;
    onbeforetoggle: (this: GlobalEventHandlers, ev: Event) => any;
    onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
    oncancel: (this: GlobalEventHandlers, ev: Event) => any;
    oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
    oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
    onchange: (this: GlobalEventHandlers, ev: Event) => any;
    onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    onclose: (this: GlobalEventHandlers, ev: Event) => any;
    oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    oncopy: (this: GlobalEventHandlers, ev: ClipboardEvent) => any;
    oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
    oncut: (this: GlobalEventHandlers, ev: ClipboardEvent) => any;
    ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
    ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
    ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
    ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
    ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
    ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
    ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
    ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
    onemptied: (this: GlobalEventHandlers, ev: Event) => any;
    onended: (this: GlobalEventHandlers, ev: Event) => any;
    onerror: OnErrorEventHandlerNonNull;
    onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
    onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
    ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    oninput: (this: GlobalEventHandlers, ev: Event) => any;
    oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
    onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
    onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
    onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
    onload: (this: GlobalEventHandlers, ev: Event) => any;
    onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
    onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
    onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
    onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    onpaste: (this: GlobalEventHandlers, ev: ClipboardEvent) => any;
    onpause: (this: GlobalEventHandlers, ev: Event) => any;
    onplay: (this: GlobalEventHandlers, ev: Event) => any;
    onplaying: (this: GlobalEventHandlers, ev: Event) => any;
    onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
    onratechange: (this: GlobalEventHandlers, ev: Event) => any;
    onreset: (this: GlobalEventHandlers, ev: Event) => any;
    onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
    onscroll: (this: GlobalEventHandlers, ev: Event) => any;
    onscrollend: (this: GlobalEventHandlers, ev: Event) => any;
    onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
    onseeked: (this: GlobalEventHandlers, ev: Event) => any;
    onseeking: (this: GlobalEventHandlers, ev: Event) => any;
    onselect: (this: GlobalEventHandlers, ev: Event) => any;
    onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
    onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
    onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
    onstalled: (this: GlobalEventHandlers, ev: Event) => any;
    onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
    onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
    ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
    ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
    ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
    ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
    ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
    ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
    ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
    ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
    ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
    ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
    onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
    onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
    onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
    onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
    onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
    onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
    onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
    autofocus: boolean;
    readonly dataset: DOMStringMap;
    nonce?: string;
    tabIndex: number;
    blur(): void;
    focus(options?: FocusOptions): void;
    readonly projectId: string;
    "__#29643@#handleError"(attrName: string, newValue: string): void;
    init(): Promise<void>;
    "__#29642@#observeMappings": {};
    observeAttribute(attrName: string, onAttrChange: (attrName: string, value: string) => void): () => any;
    observeAttributes(attrs: string[], cb: (attrName: string, value: string) => void): () => void;
    "__#29641@#isInit": boolean;
    "__#29640@#logger": _descope_sdk_mixins_static_resources_mixin.Logger;
    "__#29640@#wrapLogger": ((logger: Partial<_descope_sdk_mixins_static_resources_mixin.Logger>) => _descope_sdk_mixins_static_resources_mixin.Logger) & ((logger: Partial<_descope_sdk_mixins_static_resources_mixin.Logger>) => _descope_sdk_mixins_static_resources_mixin.Logger) & ((logger: Partial<_descope_sdk_mixins_static_resources_mixin.Logger>) => _descope_sdk_mixins_static_resources_mixin.Logger);
    get logger(): _descope_sdk_mixins_static_resources_mixin.Logger;
    set logger(logger: Partial<_descope_sdk_mixins_static_resources_mixin.Logger>);
    onLogEvent: ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void);
}) & (new (...params: any[]) => {
    "__#29656@#globalStyle": _descope_sdk_mixins_static_resources_mixin.InjectedStyle;
    readonly theme: _descope_sdk_mixins_static_resources_mixin.ThemeOptions;
    readonly styleId: string;
    "__#29656@#_themeResource": Promise<void | Record<string, any>>;
    "__#29656@#fetchTheme"(): Promise<Record<string, any>>;
    readonly "__#29656@#themeResource": Promise<void | Record<string, any>>;
    "__#29656@#loadGlobalStyle"(): Promise<void>;
    "__#29656@#loadComponentsStyle"(): Promise<void>;
    "__#29656@#getFontsConfig"(): Promise<Record<string, {
        url?: string;
    }>>;
    "__#29656@#loadFonts"(): Promise<void>;
    "__#29656@#applyTheme"(): Promise<void>;
    "__#29656@#onThemeChange": () => void;
    "__#29656@#loadTheme"(): void;
    "__#29656@#toggleOsThemeChangeListener": (listen: boolean) => void;
    init(): Promise<void>;
    injectStyle: ((cssString: string, { prepend }?: {
        prepend?: boolean;
    }) => CSSStyleSheet | {
        styleEle: HTMLStyleElement;
        ref: HTMLElement | ShadowRoot;
        replaceSync(cssString: string): void;
        readonly cssRules: CSSRuleList;
    }) & ((cssString: string, { prepend }?: {
        prepend?: boolean;
    }) => CSSStyleSheet | {
        styleEle: HTMLStyleElement;
        ref: HTMLElement | ShadowRoot;
        replaceSync(cssString: string): void;
        readonly cssRules: CSSRuleList;
    });
    nonce: string;
    "__#29647@#setNonce": (() => void) & (() => void);
    "__#29642@#observeMappings": {};
    observeAttribute: ((attrName: string, onAttrChange: (attrName: string, value: string) => void) => () => any) & ((attrName: string, onAttrChange: (attrName: string, value: string) => void) => () => any) & ((attrName: string, onAttrChange: (attrName: string, value: string) => void) => () => any) & ((attrName: string, onAttrChange: (attrName: string, value: string) => void) => () => any) & ((attrName: string, onAttrChange: (attrName: string, value: string) => void) => () => any) & ((attrName: string, onAttrChange: (attrName: string, value: string) => void) => () => any) & ((attrName: string, onAttrChange: (attrName: string, value: string) => void) => () => any) & ((attrName: string, onAttrChange: (attrName: string, value: string) => void) => () => any) & ((attrName: string, onAttrChange: (attrName: string, value: string) => void) => () => any);
    observeAttributes: ((attrs: string[], cb: (attrName: string, value: string) => void) => () => void) & ((attrs: string[], cb: (attrName: string, value: string) => void) => () => void) & ((attrs: string[], cb: (attrName: string, value: string) => void) => () => void) & ((attrs: string[], cb: (attrName: string, value: string) => void) => () => void) & ((attrs: string[], cb: (attrName: string, value: string) => void) => () => void) & ((attrs: string[], cb: (attrName: string, value: string) => void) => () => void) & ((attrs: string[], cb: (attrName: string, value: string) => void) => () => void) & ((attrs: string[], cb: (attrName: string, value: string) => void) => () => void) & ((attrs: string[], cb: (attrName: string, value: string) => void) => () => void);
    "__#29641@#isInit": boolean;
    connectedCallback: (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void) & (() => void);
    accessKey: string;
    readonly accessKeyLabel: string;
    autocapitalize: string;
    dir: string;
    draggable: boolean;
    hidden: boolean;
    inert: boolean;
    innerText: string;
    lang: string;
    readonly offsetHeight: number;
    readonly offsetLeft: number;
    readonly offsetParent: Element;
    readonly offsetTop: number;
    readonly offsetWidth: number;
    outerText: string;
    popover: string;
    spellcheck: boolean;
    title: string;
    translate: boolean;
    attachInternals(): ElementInternals;
    click(): void;
    hidePopover(): void;
    showPopover(): void;
    togglePopover(force?: boolean): boolean;
    addEventListener<K_35 extends keyof HTMLElementEventMap>(type: K_35, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_35]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K_1_2 extends keyof HTMLElementEventMap>(type: K_1_2, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1_2]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    attributeChangedCallback(attrName: string, oldValue: string, newValue: string): void;
    readonly attributes: NamedNodeMap;
    readonly classList: DOMTokenList;
    className: string;
    readonly clientHeight: number;
    readonly clientLeft: number;
    readonly clientTop: number;
    readonly clientWidth: number;
    id: string;
    readonly localName: string;
    readonly namespaceURI: string;
    onfullscreenchange: (this: Element, ev: Event) => any;
    onfullscreenerror: (this: Element, ev: Event) => any;
    outerHTML: string;
    readonly ownerDocument: Document;
    readonly part: DOMTokenList;
    readonly prefix: string;
    readonly scrollHeight: number;
    scrollLeft: number;
    scrollTop: number;
    readonly scrollWidth: number;
    readonly shadowRoot: ShadowRoot;
    slot: string;
    readonly tagName: string;
    attachShadow(init: ShadowRootInit): ShadowRoot;
    checkVisibility(options?: CheckVisibilityOptions): boolean;
    closest<K_2_2 extends keyof HTMLElementTagNameMap>(selector: K_2_2): HTMLElementTagNameMap[K_2_2];
    closest<K_3_2 extends keyof SVGElementTagNameMap>(selector: K_3_2): SVGElementTagNameMap[K_3_2];
    closest<K_4_2 extends keyof MathMLElementTagNameMap>(selector: K_4_2): MathMLElementTagNameMap[K_4_2];
    closest<E_7 extends Element = Element>(selectors: string): E_7;
    computedStyleMap(): StylePropertyMapReadOnly;
    getAttribute(qualifiedName: string): string;
    getAttributeNS(namespace: string, localName: string): string;
    getAttributeNames(): string[];
    getAttributeNode(qualifiedName: string): Attr;
    getAttributeNodeNS(namespace: string, localName: string): Attr;
    getBoundingClientRect(): DOMRect;
    getClientRects(): DOMRectList;
    getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
    getElementsByTagName<K_5_2 extends keyof HTMLElementTagNameMap>(qualifiedName: K_5_2): HTMLCollectionOf<HTMLElementTagNameMap[K_5_2]>;
    getElementsByTagName<K_6_2 extends keyof SVGElementTagNameMap>(qualifiedName: K_6_2): HTMLCollectionOf<SVGElementTagNameMap[K_6_2]>;
    getElementsByTagName<K_7_2 extends keyof MathMLElementTagNameMap>(qualifiedName: K_7_2): HTMLCollectionOf<MathMLElementTagNameMap[K_7_2]>;
    getElementsByTagName<K_8_2 extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K_8_2): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K_8_2]>;
    getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
    getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
    getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
    getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
    getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
    hasAttribute(qualifiedName: string): boolean;
    hasAttributeNS(namespace: string, localName: string): boolean;
    hasAttributes(): boolean;
    hasPointerCapture(pointerId: number): boolean;
    insertAdjacentElement(where: InsertPosition, element: Element): Element;
    insertAdjacentHTML(position: InsertPosition, text: string): void;
    insertAdjacentText(where: InsertPosition, data: string): void;
    matches(selectors: string): boolean;
    releasePointerCapture(pointerId: number): void;
    removeAttribute(qualifiedName: string): void;
    removeAttributeNS(namespace: string, localName: string): void;
    removeAttributeNode(attr: Attr): Attr;
    requestFullscreen(options?: FullscreenOptions): Promise<void>;
    requestPointerLock(): void;
    scroll(options?: ScrollToOptions): void;
    scroll(x: number, y: number): void;
    scrollBy(options?: ScrollToOptions): void;
    scrollBy(x: number, y: number): void;
    scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
    scrollTo(options?: ScrollToOptions): void;
    scrollTo(x: number, y: number): void;
    setAttribute(qualifiedName: string, value: string): void;
    setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
    setAttributeNode(attr: Attr): Attr;
    setAttributeNodeNS(attr: Attr): Attr;
    setPointerCapture(pointerId: number): void;
    toggleAttribute(qualifiedName: string, force?: boolean): boolean;
    webkitMatchesSelector(selectors: string): boolean;
    readonly baseURI: string;
    readonly childNodes: NodeListOf<ChildNode>;
    readonly firstChild: ChildNode;
    readonly isConnected: boolean;
    readonly lastChild: ChildNode;
    readonly nextSibling: ChildNode;
    readonly nodeName: string;
    readonly nodeType: number;
    nodeValue: string;
    readonly parentElement: HTMLElement;
    readonly parentNode: ParentNode;
    readonly previousSibling: ChildNode;
    textContent: string;
    appendChild<T_1_2 extends Node>(node: T_1_2): T_1_2;
    cloneNode(deep?: boolean): Node;
    compareDocumentPosition(other: Node): number;
    contains(other: Node): boolean;
    getRootNode(options?: GetRootNodeOptions): Node;
    hasChildNodes(): boolean;
    insertBefore<T_2_2 extends Node>(node: T_2_2, child: Node): T_2_2;
    isDefaultNamespace(namespace: string): boolean;
    isEqualNode(otherNode: Node): boolean;
    isSameNode(otherNode: Node): boolean;
    lookupNamespaceURI(prefix: string): string;
    lookupPrefix(namespace: string): string;
    normalize(): void;
    removeChild<T_3_2 extends Node>(child: T_3_2): T_3_2;
    replaceChild<T_4_2 extends Node>(node: Node, child: T_4_2): T_4_2;
    readonly ELEMENT_NODE: 1;
    readonly ATTRIBUTE_NODE: 2;
    readonly TEXT_NODE: 3;
    readonly CDATA_SECTION_NODE: 4;
    readonly ENTITY_REFERENCE_NODE: 5;
    readonly ENTITY_NODE: 6;
    readonly PROCESSING_INSTRUCTION_NODE: 7;
    readonly COMMENT_NODE: 8;
    readonly DOCUMENT_NODE: 9;
    readonly DOCUMENT_TYPE_NODE: 10;
    readonly DOCUMENT_FRAGMENT_NODE: 11;
    readonly NOTATION_NODE: 12;
    readonly DOCUMENT_POSITION_DISCONNECTED: 1;
    readonly DOCUMENT_POSITION_PRECEDING: 2;
    readonly DOCUMENT_POSITION_FOLLOWING: 4;
    readonly DOCUMENT_POSITION_CONTAINS: 8;
    readonly DOCUMENT_POSITION_CONTAINED_BY: 16;
    readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32;
    dispatchEvent(event: Event): boolean;
    ariaAtomic: string;
    ariaAutoComplete: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaColCount: string;
    ariaColIndex: string;
    ariaColSpan: string;
    ariaCurrent: string;
    ariaDescription: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaHasPopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaKeyShortcuts: string;
    ariaLabel: string;
    ariaLevel: string;
    ariaLive: string;
    ariaModal: string;
    ariaMultiLine: string;
    ariaMultiSelectable: string;
    ariaOrientation: string;
    ariaPlaceholder: string;
    ariaPosInSet: string;
    ariaPressed: string;
    ariaReadOnly: string;
    ariaRequired: string;
    ariaRoleDescription: string;
    ariaRowCount: string;
    ariaRowIndex: string;
    ariaRowSpan: string;
    ariaSelected: string;
    ariaSetSize: string;
    ariaSort: string;
    ariaValueMax: string;
    ariaValueMin: string;
    ariaValueNow: string;
    ariaValueText: string;
    role: string;
    animate(keyframes: PropertyIndexedKeyframes | Keyframe[], options?: number | KeyframeAnimationOptions): Animation;
    getAnimations(options?: GetAnimationsOptions): Animation[];
    after(...nodes: (string | Node)[]): void;
    before(...nodes: (string | Node)[]): void;
    remove(): void;
    replaceWith(...nodes: (string | Node)[]): void;
    innerHTML: string;
    readonly nextElementSibling: Element;
    readonly previousElementSibling: Element;
    readonly childElementCount: number;
    readonly children: HTMLCollection;
    readonly firstElementChild: Element;
    readonly lastElementChild: Element;
    append(...nodes: (string | Node)[]): void;
    prepend(...nodes: (string | Node)[]): void;
    querySelector<K_9_2 extends keyof HTMLElementTagNameMap>(selectors: K_9_2): HTMLElementTagNameMap[K_9_2];
    querySelector<K_10_2 extends keyof SVGElementTagNameMap>(selectors: K_10_2): SVGElementTagNameMap[K_10_2];
    querySelector<K_11_2 extends keyof MathMLElementTagNameMap>(selectors: K_11_2): MathMLElementTagNameMap[K_11_2];
    querySelector<K_12_2 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_12_2): HTMLElementDeprecatedTagNameMap[K_12_2];
    querySelector<E_1_2 extends Element = Element>(selectors: string): E_1_2;
    querySelectorAll<K_13_2 extends keyof HTMLElementTagNameMap>(selectors: K_13_2): NodeListOf<HTMLElementTagNameMap[K_13_2]>;
    querySelectorAll<K_14_2 extends keyof SVGElementTagNameMap>(selectors: K_14_2): NodeListOf<SVGElementTagNameMap[K_14_2]>;
    querySelectorAll<K_15_2 extends keyof MathMLElementTagNameMap>(selectors: K_15_2): NodeListOf<MathMLElementTagNameMap[K_15_2]>;
    querySelectorAll<K_16_2 extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K_16_2): NodeListOf<HTMLElementDeprecatedTagNameMap[K_16_2]>;
    querySelectorAll<E_2_2 extends Element = Element>(selectors: string): NodeListOf<E_2_2>;
    replaceChildren(...nodes: (string | Node)[]): void;
    readonly assignedSlot: HTMLSlotElement;
    readonly attributeStyleMap: StylePropertyMap;
    readonly style: CSSStyleDeclaration;
    contentEditable: string;
    enterKeyHint: string;
    inputMode: string;
    readonly isContentEditable: boolean;
    onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
    onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
    onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
    onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
    onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
    onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    onbeforeinput: (this: GlobalEventHandlers, ev: InputEvent) => any;
    onbeforetoggle: (this: GlobalEventHandlers, ev: Event) => any;
    onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
    oncancel: (this: GlobalEventHandlers, ev: Event) => any;
    oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
    oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
    onchange: (this: GlobalEventHandlers, ev: Event) => any;
    onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    onclose: (this: GlobalEventHandlers, ev: Event) => any;
    oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    oncopy: (this: GlobalEventHandlers, ev: ClipboardEvent) => any;
    oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
    oncut: (this: GlobalEventHandlers, ev: ClipboardEvent) => any;
    ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
    ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
    ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
    ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
    ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
    ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
    ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
    ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
    onemptied: (this: GlobalEventHandlers, ev: Event) => any;
    onended: (this: GlobalEventHandlers, ev: Event) => any;
    onerror: OnErrorEventHandlerNonNull;
    onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
    onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
    ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    oninput: (this: GlobalEventHandlers, ev: Event) => any;
    oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
    onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
    onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
    onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
    onload: (this: GlobalEventHandlers, ev: Event) => any;
    onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
    onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
    onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
    onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
    onpaste: (this: GlobalEventHandlers, ev: ClipboardEvent) => any;
    onpause: (this: GlobalEventHandlers, ev: Event) => any;
    onplay: (this: GlobalEventHandlers, ev: Event) => any;
    onplaying: (this: GlobalEventHandlers, ev: Event) => any;
    onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
    onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
    onratechange: (this: GlobalEventHandlers, ev: Event) => any;
    onreset: (this: GlobalEventHandlers, ev: Event) => any;
    onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
    onscroll: (this: GlobalEventHandlers, ev: Event) => any;
    onscrollend: (this: GlobalEventHandlers, ev: Event) => any;
    onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
    onseeked: (this: GlobalEventHandlers, ev: Event) => any;
    onseeking: (this: GlobalEventHandlers, ev: Event) => any;
    onselect: (this: GlobalEventHandlers, ev: Event) => any;
    onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
    onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
    onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
    onstalled: (this: GlobalEventHandlers, ev: Event) => any;
    onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
    onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
    ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
    ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
    ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
    ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
    ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
    ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
    ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
    ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
    ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
    ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
    onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
    onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
    onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
    onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
    onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
    onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
    onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
    autofocus: boolean;
    readonly dataset: DOMStringMap;
    tabIndex: number;
    blur(): void;
    focus(options?: FocusOptions): void;
    "__#29640@#logger": _descope_sdk_mixins_static_resources_mixin.Logger;
    "__#29640@#wrapLogger": ((logger: Partial<_descope_sdk_mixins_static_resources_mixin.Logger>) => _descope_sdk_mixins_static_resources_mixin.Logger) & ((logger: Partial<_descope_sdk_mixins_static_resources_mixin.Logger>) => _descope_sdk_mixins_static_resources_mixin.Logger) & ((logger: Partial<_descope_sdk_mixins_static_resources_mixin.Logger>) => _descope_sdk_mixins_static_resources_mixin.Logger) & ((logger: Partial<_descope_sdk_mixins_static_resources_mixin.Logger>) => _descope_sdk_mixins_static_resources_mixin.Logger) & ((logger: Partial<_descope_sdk_mixins_static_resources_mixin.Logger>) => _descope_sdk_mixins_static_resources_mixin.Logger) & ((logger: Partial<_descope_sdk_mixins_static_resources_mixin.Logger>) => _descope_sdk_mixins_static_resources_mixin.Logger) & ((logger: Partial<_descope_sdk_mixins_static_resources_mixin.Logger>) => _descope_sdk_mixins_static_resources_mixin.Logger) & ((logger: Partial<_descope_sdk_mixins_static_resources_mixin.Logger>) => _descope_sdk_mixins_static_resources_mixin.Logger) & ((logger: Partial<_descope_sdk_mixins_static_resources_mixin.Logger>) => _descope_sdk_mixins_static_resources_mixin.Logger) & ((logger: Partial<_descope_sdk_mixins_static_resources_mixin.Logger>) => _descope_sdk_mixins_static_resources_mixin.Logger) & ((logger: Partial<_descope_sdk_mixins_static_resources_mixin.Logger>) => _descope_sdk_mixins_static_resources_mixin.Logger) & ((logger: Partial<_descope_sdk_mixins_static_resources_mixin.Logger>) => _descope_sdk_mixins_static_resources_mixin.Logger) & ((logger: Partial<_descope_sdk_mixins_static_resources_mixin.Logger>) => _descope_sdk_mixins_static_resources_mixin.Logger) & ((logger: Partial<_descope_sdk_mixins_static_resources_mixin.Logger>) => _descope_sdk_mixins_static_resources_mixin.Logger) & ((logger: Partial<_descope_sdk_mixins_static_resources_mixin.Logger>) => _descope_sdk_mixins_static_resources_mixin.Logger) & ((logger: Partial<_descope_sdk_mixins_static_resources_mixin.Logger>) => _descope_sdk_mixins_static_resources_mixin.Logger) & ((logger: Partial<_descope_sdk_mixins_static_resources_mixin.Logger>) => _descope_sdk_mixins_static_resources_mixin.Logger) & ((logger: Partial<_descope_sdk_mixins_static_resources_mixin.Logger>) => _descope_sdk_mixins_static_resources_mixin.Logger) & ((logger: Partial<_descope_sdk_mixins_static_resources_mixin.Logger>) => _descope_sdk_mixins_static_resources_mixin.Logger) & ((logger: Partial<_descope_sdk_mixins_static_resources_mixin.Logger>) => _descope_sdk_mixins_static_resources_mixin.Logger);
    get logger(): _descope_sdk_mixins_static_resources_mixin.Logger;
    set logger(logger: Partial<_descope_sdk_mixins_static_resources_mixin.Logger>);
    onLogEvent: ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void) & ((logLevel: "error" | "warn" | "info" | "debug", data: any[]) => void);
    contentRootElement: HTMLElement;
    rootElement: HTMLElement;
    readonly config: Promise<_descope_sdk_mixins_static_resources_mixin.Config>;
    "__#29646@#configCacheClear": (() => void) & (() => void);
    "__#29646@#_configResource": Promise<_descope_sdk_mixins_static_resources_mixin.Config>;
    "__#29646@#fetchConfig": (() => Promise<_descope_sdk_mixins_static_resources_mixin.Config>) & (() => Promise<_descope_sdk_mixins_static_resources_mixin.Config>);
    "__#29645@#callbacks": Map<string, () => void> & Map<string, () => void>;
    onReset: ((sectionId: string, callback: () => void | Promise<void>) => () => void) & ((sectionId: string, callback: () => void | Promise<void>) => () => void);
    reset: ((...sectionIds: string[]) => Promise<void>) & ((...sectionIds: string[]) => Promise<void>);
    "__#29643@#handleError": ((attrName: string, newValue: string) => void) & ((attrName: string, newValue: string) => void) & ((attrName: string, newValue: string) => void) & ((attrName: string, newValue: string) => void) & ((attrName: string, newValue: string) => void) & ((attrName: string, newValue: string) => void);
    "__#29644@#lastBaseUrl"?: string;
    "__#29644@#workingBaseUrl"?: string;
    "__#29644@#getResourceUrls": ((filename: string) => (URL & {
        baseUrl: string;
    }) | (URL & {
        baseUrl: string;
    })[]) & ((filename: string) => (URL & {
        baseUrl: string;
    }) | (URL & {
        baseUrl: string;
    })[]) & ((filename: string) => (URL & {
        baseUrl: string;
    }) | (URL & {
        baseUrl: string;
    })[]);
    fetchStaticResource: (<F_1 extends "text" | "json">(filename: string, format: F_1) => Promise<{
        body: F_1 extends "json" ? Record<string, any> : string;
        headers: Record<string, string>;
    }>) & (<F_1_1 extends "text" | "json">(filename: string, format: F_1_1) => Promise<{
        body: F_1_1 extends "json" ? Record<string, any> : string;
        headers: Record<string, string>;
    }>) & (<F_2 extends "text" | "json">(filename: string, format: F_2) => Promise<{
        body: F_2 extends "json" ? Record<string, any> : string;
        headers: Record<string, string>;
    }>);
    readonly baseStaticUrl: string;
    readonly baseUrl: string;
    readonly projectId: string;
    "__#29650@#getComponentsVersion"(): Promise<string>;
    "__#29650@#descopeUi": Promise<any>;
    readonly descopeUi: Promise<any>;
    "__#29650@#loadDescopeUiComponent"(componentName: string): Promise<any>;
    "__#29650@#getDescopeUi"(): Promise<any>;
    loadDescopeUiComponents(templateOrComponentNames: string[] | HTMLTemplateElement): Promise<any[]>;
    readonly baseCdnUrl: string;
    injectNpmLib(libName: string, version: string, filePath?: string, overrides?: string[]): Promise<{
        id: string;
        url: URL;
    }>;
}) & {
    new (): HTMLElement;
    prototype: HTMLElement;
};
declare class BaseDescopeWc extends BaseClass {
    #private;
    static get observedAttributes(): string[];
    static sdkConfigOverrides: Partial<SdkConfig>;
    flowStatus: FlowStatus;
    loggerWrapper: {
        error: (message: string, description?: string) => void;
        warn: (message: string, description?: string) => void;
        info: (message: string, description?: string, state?: any) => void;
        debug: (message: string, description?: string) => void;
    };
    getComponentsContext: () => {};
    nextRequestStatus: State<{
        isLoading: boolean;
    }>;
    rootElement: HTMLDivElement;
    contentRootElement: HTMLDivElement;
    slotElement: HTMLSlotElement;
    sdk: ReturnType<typeof createSdk>;
    descopeUI: Promise<DescopeUI>;
    constructor(updateExecState: FlowStateUpdateFn);
    get flowId(): string;
    get client(): Record<string, any>;
    get tenantId(): string;
    get redirectUrl(): string;
    get debug(): boolean;
    get locale(): string;
    get autoFocus(): AutoFocusOptions;
    get validateOnBlur(): boolean;
    get storeLastAuthenticatedUser(): boolean;
    get refreshCookieName(): string;
    get keepLastAuthenticatedUserAfterLogout(): boolean;
    get storagePrefix(): string;
    get preview(): boolean;
    get formConfig(): any;
    get form(): string;
    get formConfigValues(): {
        [k: string]: any;
    };
    get outboundAppId(): string;
    get outboundAppScopes(): any;
    getConfig: () => Promise<_descope_sdk_mixins_static_resources_mixin.Config | {
        isMissingConfig: boolean;
    }>;
    get isRestartOnError(): boolean;
    getExecutionContext(): Promise<{
        geo: string;
    }>;
    getProjectConfig(): Promise<ProjectConfiguration>;
    getFlowConfig(): Promise<FlowConfig>;
    getTargetLocales(): Promise<string[]>;
    getComponentsVersion(): Promise<{}>;
    static descopeUI: any;
    init(): Promise<void>;
    disconnectedCallback(): void;
    attributeChangedCallback(attrName: string, oldValue: string, newValue: string): void;
}

declare class DescopeWc extends BaseDescopeWc {
    #private;
    errorTransformer: ((error: {
        text: string;
        type: string;
    }) => string) | undefined;
    static set sdkConfigOverrides(config: Partial<SdkConfig>);
    static get sdkConfigOverrides(): Partial<SdkConfig>;
    flowState: State<FlowState>;
    stepState: State<StepState>;
    onScreenUpdate?: (screenName: string, context: CustomScreenState, next: StepState['next'], ref: typeof this) => boolean | Promise<boolean>;
    constructor();
    bridgeVersion: number;
    nativeCallbacks: {
        complete?: (input: Record<string, any>) => Promise<void>;
        screenResolve?: (value: boolean) => void;
        screenNext?: StepState['next'];
    };
    nativeResume(type: string, payload: string): void;
    nativeOptions?: {
        platform: 'ios' | 'android';
        bridgeVersion: number;
        oauthProvider?: string;
        oauthRedirect?: string;
        magicLinkRedirect?: string;
        ssoRedirect?: string;
        origin?: string;
    };
    /**
     * Get all loaded SDK script modules from elements with data-script-id attribute
     * @returns Array of script modules that can be refreshed before form submission
     */
    loadSdkScriptsModules(): ScriptModule[];
    loadSdkScripts(scripts: ClientScript[]): Promise<unknown>;
    get isDismissScreenErrorOnInput(): boolean;
    init(): Promise<void>;
    _init(): Promise<void>;
    disconnectedCallback(): void;
    getHtmlFilenameWithLocale(locale: string, screenId: string): Promise<string>;
    getPageContent(htmlFilename: string, htmlLocaleFilename: string): Promise<string>;
    onFlowChange(currentState: FlowState, prevState: FlowState, isChanged: IsChanged<FlowState>): Promise<void>;
    handleRedirect: (redirectTo: string) => void;
    onStepChange(currentState: StepState, prevState: StepState): Promise<void>;
    getInputs(): HTMLInputElement[];
}

type ILogger = Partial<DescopeWc['logger']>;

export { type AutoFocusOptions, type ILogger, type ThemeOptions, DescopeWc as default };
