import {
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  h,
  r
} from "./chunk-C4K4ZQL2.js";

// node_modules/@descope/sdk-mixins/dist/esm/mixins/loggerMixin/loggerMixin.js
var logLevels = ["error", "warn", "info", "debug"];
var loggerMixin = h((superclass) => {
  var _LoggerMixinClass_instances, _LoggerMixinClass_logger, _LoggerMixinClass_wrapLogger, _a;
  return _a = class LoggerMixinClass extends superclass {
    constructor() {
      super(...arguments);
      _LoggerMixinClass_instances.add(this);
      _LoggerMixinClass_logger.set(this, __classPrivateFieldGet(this, _LoggerMixinClass_instances, "m", _LoggerMixinClass_wrapLogger).call(this, console));
    }
    set logger(logger) {
      __classPrivateFieldSet(this, _LoggerMixinClass_logger, __classPrivateFieldGet(this, _LoggerMixinClass_instances, "m", _LoggerMixinClass_wrapLogger).call(this, logger || console), "f");
    }
    get logger() {
      return __classPrivateFieldGet(this, _LoggerMixinClass_logger, "f");
    }
    // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars
    onLogEvent(logLevel, data) {
    }
  }, _LoggerMixinClass_logger = /* @__PURE__ */ new WeakMap(), _LoggerMixinClass_instances = /* @__PURE__ */ new WeakSet(), _LoggerMixinClass_wrapLogger = function _LoggerMixinClass_wrapLogger2(logger) {
    return logLevels.reduce((acc, logLevel) => {
      acc[logLevel] = (...args) => {
        var _b;
        this.onLogEvent(logLevel, args);
        (_b = logger[logLevel]) === null || _b === void 0 ? void 0 : _b.call(logger, ...args);
      };
      return acc;
    }, {});
  }, _a;
});

// node_modules/@descope/sdk-mixins/dist/esm/mixins/initLifecycleMixin.js
var initLifecycleMixin = h((superclass) => {
  var _InitLifecycleMixinClass_isInit, _a;
  return _a = class InitLifecycleMixinClass extends superclass {
    constructor() {
      super(...arguments);
      _InitLifecycleMixinClass_isInit.set(this, true);
    }
    connectedCallback() {
      var _b, _c;
      (_b = super.connectedCallback) === null || _b === void 0 ? void 0 : _b.call(this);
      if ((_c = this.shadowRoot) === null || _c === void 0 ? void 0 : _c.isConnected) {
        if (__classPrivateFieldGet(this, _InitLifecycleMixinClass_isInit, "f")) {
          __classPrivateFieldSet(this, _InitLifecycleMixinClass_isInit, false, "f");
          this.init();
        }
      }
    }
    // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-empty-function
    async init() {
    }
  }, _InitLifecycleMixinClass_isInit = /* @__PURE__ */ new WeakMap(), _a;
});

// node_modules/@descope/sdk-mixins/dist/esm/mixins/observeAttributesMixin/helpers.js
var attributesObserver = (ele, callback) => {
  Array.from(ele.attributes).forEach((attr) => callback(attr.name));
  const observer = new MutationObserver((mutationsList) => {
    mutationsList.forEach((mutation) => {
      if (mutation.type === "attributes") {
        callback(mutation.attributeName);
      }
    });
  });
  observer.observe(ele, { attributes: true });
};

// node_modules/@descope/sdk-mixins/dist/esm/mixins/observeAttributesMixin/observeAttributesMixin.js
var observeAttributesMixin = h((superclass) => {
  var _ObserveAttributesMixinClass_observeMappings, _a;
  const BaseClass = r(loggerMixin, initLifecycleMixin)(superclass);
  return _a = class ObserveAttributesMixinClass extends BaseClass {
    constructor() {
      super(...arguments);
      _ObserveAttributesMixinClass_observeMappings.set(this, {});
    }
    async init() {
      var _b;
      await ((_b = super.init) === null || _b === void 0 ? void 0 : _b.call(this));
      attributesObserver(this, (attrName) => {
        var _b2;
        (_b2 = __classPrivateFieldGet(this, _ObserveAttributesMixinClass_observeMappings, "f")[attrName]) === null || _b2 === void 0 ? void 0 : _b2.forEach((cb) => {
          cb(attrName, this.getAttribute(attrName));
        });
      });
    }
    observeAttribute(attrName, onAttrChange) {
      if (!__classPrivateFieldGet(this, _ObserveAttributesMixinClass_observeMappings, "f")[attrName]) {
        __classPrivateFieldGet(this, _ObserveAttributesMixinClass_observeMappings, "f")[attrName] = [];
      }
      const idx = __classPrivateFieldGet(this, _ObserveAttributesMixinClass_observeMappings, "f")[attrName].push(onAttrChange);
      return () => __classPrivateFieldGet(this, _ObserveAttributesMixinClass_observeMappings, "f")[attrName].splice(idx, 1);
    }
    observeAttributes(attrs, cb) {
      const unobserveList = attrs.reduce((acc, attrName) => {
        acc.push(this.observeAttribute(attrName, cb));
        return acc;
      }, []);
      return () => unobserveList.forEach((unobserve) => unobserve());
    }
  }, _ObserveAttributesMixinClass_observeMappings = /* @__PURE__ */ new WeakMap(), _a;
});

// node_modules/@descope/sdk-mixins/dist/esm/mixins/cspNonceMixin.js
var cspNonceMixin = h((superclass) => {
  var _CspNonceMixinClass_instances, _CspNonceMixinClass_setNonce, _a;
  const BaseClass = r(initLifecycleMixin, observeAttributesMixin)(superclass);
  return _a = class CspNonceMixinClass extends BaseClass {
    constructor() {
      super(...arguments);
      _CspNonceMixinClass_instances.add(this);
    }
    get nonce() {
      return this.getAttribute("nonce") || "";
    }
    async init() {
      var _b;
      await ((_b = super.init) === null || _b === void 0 ? void 0 : _b.call(this));
      this.observeAttribute("nonce", __classPrivateFieldGet(this, _CspNonceMixinClass_instances, "m", _CspNonceMixinClass_setNonce).bind(this));
      __classPrivateFieldGet(this, _CspNonceMixinClass_instances, "m", _CspNonceMixinClass_setNonce).call(this);
    }
  }, _CspNonceMixinClass_instances = /* @__PURE__ */ new WeakSet(), _CspNonceMixinClass_setNonce = function _CspNonceMixinClass_setNonce2() {
    window.DESCOPE_NONCE = this.nonce;
  }, _a;
});

// node_modules/@descope/sdk-mixins/dist/esm/mixins/injectStyleMixin.js
var CSSStyleSheetMock = class {
  constructor(ref, nonce, { prepend = false } = {}) {
    this.styleEle = document.createElement("style");
    this.styleEle.setAttribute("nonce", nonce);
    this.ref = ref;
    if (!this.ref) {
      return;
    }
    if (prepend) {
      this.ref.prepend(this.styleEle);
    } else {
      this.ref.append(this.styleEle);
    }
  }
  replaceSync(cssString) {
    this.styleEle.textContent = cssString;
  }
  get cssRules() {
    var _a;
    return (_a = this.styleEle.sheet) === null || _a === void 0 ? void 0 : _a.cssRules;
  }
};
var injectStyleMixin = h((superclass) => {
  const BaseClass = r(cspNonceMixin)(superclass);
  return class InjectStyleMixinClass extends BaseClass {
    injectStyle(cssString, { prepend = false } = {}) {
      let style;
      try {
        style = new CSSStyleSheet();
      } catch (e) {
        style = new CSSStyleSheetMock(this.shadowRoot, this.nonce, {
          prepend
        });
      }
      if (cssString) {
        style.replaceSync(cssString);
      }
      if (style instanceof CSSStyleSheet) {
        const ref = this.shadowRoot;
        if (ref && "adoptedStyleSheets" in ref) {
          const adoptedStyleSheets = [...ref.adoptedStyleSheets || []];
          adoptedStyleSheets[prepend ? "unshift" : "push"](style);
          ref.adoptedStyleSheets = adoptedStyleSheets;
        }
      }
      return style;
    }
  };
});

export {
  loggerMixin,
  initLifecycleMixin,
  observeAttributesMixin,
  injectStyleMixin
};
//# sourceMappingURL=chunk-PGJ4DCSZ.js.map
