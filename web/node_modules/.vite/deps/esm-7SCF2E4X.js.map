{
  "version": 3,
  "sources": ["../../@descope/role-management-widget/src/lib/widget/state/selectors.ts", "../../@descope/role-management-widget/src/lib/widget/state/asyncActions/helpers.ts", "../../@descope/role-management-widget/src/lib/widget/state/asyncActions/createRole.ts", "../../@descope/role-management-widget/src/lib/widget/state/asyncActions/deleteRole.ts", "../../@descope/role-management-widget/src/lib/widget/state/asyncActions/searchRoles.ts", "../../@descope/role-management-widget/src/lib/widget/state/asyncActions/updateRole.ts", "../../@descope/role-management-widget/src/lib/widget/state/asyncActions/getTenantPermissions.ts", "../../@descope/role-management-widget/src/lib/widget/state/initialState.ts", "../../@descope/role-management-widget/src/lib/widget/api/apiPaths.ts", "../../@descope/role-management-widget/src/lib/widget/api/sdk/helpers.ts", "../../@descope/role-management-widget/src/lib/widget/api/sdk/mocks.ts", "../../@descope/role-management-widget/src/lib/widget/api/sdk/createRoleSdk.ts", "../../@descope/role-management-widget/src/lib/widget/api/sdk/createTenantSdk.ts", "../../@descope/role-management-widget/src/lib/widget/mixins/apiMixin.ts", "../../@descope/role-management-widget/src/lib/widget/api/sdk/index.ts", "../../@descope/role-management-widget/src/lib/widget/mixins/stateManagementMixin.ts", "../../@descope/role-management-widget/src/lib/widget/mixins/fetchWidgetPagesMixin.ts", "../../@descope/role-management-widget/src/lib/widget/mixins/initMixin/initComponentsMixins/initWidgetRootMixin.ts", "../../@descope/role-management-widget/src/lib/widget/mixins/initMixin/initComponentsMixins/initCreateRoleModalMixin.ts", "../../@descope/role-management-widget/src/lib/widget/mixins/initMixin/initComponentsMixins/initCreateRoleButtonMixin.ts", "../../@descope/role-management-widget/src/lib/widget/mixins/initMixin/initComponentsMixins/initDeleteRolesModalMixin.ts", "../../@descope/role-management-widget/src/lib/widget/mixins/initMixin/initComponentsMixins/initDeleteRolesButtonMixin.ts", "../../@descope/role-management-widget/src/lib/widget/mixins/initMixin/initComponentsMixins/initEditRoleModalMixin.ts", "../../@descope/role-management-widget/src/lib/widget/mixins/initMixin/initComponentsMixins/initEditRolesButtonMixin.ts", "../../@descope/role-management-widget/src/lib/widget/mixins/initMixin/initComponentsMixins/initFilterRolesInputMixin.ts", "../../@descope/role-management-widget/src/lib/widget/mixins/initMixin/initComponentsMixins/initNotificationsMixin.ts", "../../@descope/role-management-widget/src/lib/widget/mixins/initMixin/initComponentsMixins/initRolesTableMixin.ts", "../../@descope/role-management-widget/src/lib/widget/mixins/initMixin/initMixin.ts", "../../@descope/role-management-widget/src/lib/widget/index.ts", "../../@descope/role-management-widget/src/lib/index.ts"],
  "sourcesContent": ["import { createSelector } from 'reselect';\nimport { State } from './types';\n\nexport const getRawRolesList = (state: State) => state.rolesList.data;\nexport const getSelectedRolesIds = (state: State) => state.selectedRolesIds;\nexport const getNotifications = (state: State) => state.notifications;\nexport const getSearchParams = (state: State) => state.searchParams;\nexport const getTenantPermissions = (state: State) =>\n  state.tenantPermissions.data || [];\n\nexport const getRolesList = createSelector(getRawRolesList, (roles) =>\n  roles.map((role) => ({\n    ...role,\n    editable: role?.tenantId?.length === 0 ? 'no' : 'yes',\n  })),\n);\n\nexport const getSelectedRoles = createSelector(\n  getSelectedRolesIds,\n  getRolesList,\n  (selected, roles) => roles.filter((role) => selected.includes(role.name)),\n);\n\nexport const getIsRolesSelected = createSelector(\n  getSelectedRolesIds,\n  (selected) => !!selected.length,\n);\n\nexport const getIsSingleRolesSelected = createSelector(\n  getSelectedRolesIds,\n  (selected) => selected.length === 1,\n);\n\nexport const getIsSelectedRoleEditable = createSelector(\n  getSelectedRoles,\n  getIsSingleRolesSelected,\n  (selected, singleRoleSelected) =>\n    singleRoleSelected && selected[0].editable === 'yes',\n);\n\nexport const getSelectedRolesDetailsForDisplay = createSelector(\n  getSelectedRoles,\n  (selectedRoles) => {\n    if (selectedRoles.length === 1) {\n      return selectedRoles[0].name;\n    }\n    return `${selectedRoles.length} roles`;\n  },\n);\n", "/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable no-param-reassign */\n\nimport {\n  ActionReducerMapBuilder,\n  AsyncThunk,\n  PayloadAction,\n  SerializedError,\n} from '@reduxjs/toolkit';\nimport { State } from '../types';\n\ntype ExtractedArg<T> = T extends AsyncThunk<any, infer U, any> ? U : never;\n\ntype FulfilledAction<T extends AsyncThunk<any, any, any>> = PayloadAction<\n  any,\n  string,\n  {\n    arg: ExtractedArg<T>;\n    requestId: string;\n  },\n  never\n>;\n\ntype RejectedAction<T extends AsyncThunk<any, any, any>> = PayloadAction<\n  any,\n  string,\n  {\n    arg: ExtractedArg<T>;\n    requestId: string;\n  },\n  SerializedError\n>;\n\ntype PendingAction<T extends AsyncThunk<any, any, any>> = PayloadAction<\n  unknown,\n  string,\n  {\n    arg: ExtractedArg<T>;\n    requestId: string;\n  }\n>;\n\ntype AsyncReducerConfig<T extends AsyncThunk<any, any, any>> = {\n  onFulfilled?: (state: State, action: FulfilledAction<T>) => void;\n  onRejected?: (state: State, action: RejectedAction<T>) => void;\n  onPending?: (state: State, action: PendingAction<T>) => void;\n};\n\nexport const buildAsyncReducer =\n  <T extends AsyncThunk<any, any, any>>(action: T) =>\n  (...args: AsyncReducerConfig<T>[]) =>\n  (builder: ActionReducerMapBuilder<State>) => {\n    builder.addCase(action.pending, (state, action) => {\n      args.forEach(({ onPending }) => {\n        onPending?.(state, action);\n      });\n    });\n\n    builder.addCase(action.fulfilled, (state, action) => {\n      args.forEach(({ onFulfilled }) => {\n        onFulfilled?.(state, action);\n      });\n    });\n\n    builder.addCase(action.rejected, (state, action) => {\n      args.forEach(({ onRejected }) => {\n        onRejected?.(state, action);\n      });\n    });\n  };\n\nexport const withRequestStatus = (\n  getStateSection: (state: State) => { loading: boolean; error: unknown },\n): AsyncReducerConfig<any> => ({\n  onFulfilled: (state) => {\n    getStateSection(state).loading = false;\n  },\n  onPending: (state) => {\n    getStateSection(state).loading = true;\n    getStateSection(state).error = null;\n  },\n  onRejected: (state, action) => {\n    getStateSection(state).loading = false;\n    getStateSection(state).error = action.error;\n  },\n});\n\nexport const withNotifications = ({\n  getErrorMsg,\n  getSuccessMsg,\n}: {\n  getErrorMsg?: (action?: RejectedAction<AsyncThunk<any, any, any>>) => string;\n  getSuccessMsg?: (\n    action?: FulfilledAction<AsyncThunk<any, any, any>>,\n  ) => string;\n}): AsyncReducerConfig<any> => ({\n  onFulfilled: (state, action) => {\n    if (getSuccessMsg)\n      state.notifications.push({ type: 'success', msg: getSuccessMsg(action) });\n  },\n  onRejected: (state, action) => {\n    if (getErrorMsg)\n      state.notifications.push({ type: 'error', msg: getErrorMsg(action) });\n  },\n});\n", "/* eslint-disable no-param-reassign */\n/* eslint-disable @typescript-eslint/no-shadow */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { Sdk } from '../../api/sdk';\nimport { FirstParameter, State, ThunkConfigExtraApi } from '../types';\nimport {\n  buildAsyncReducer,\n  withNotifications,\n  withRequestStatus,\n} from './helpers';\n\nconst action = createAsyncThunk<\n  any,\n  FirstParameter<Sdk['role']['create']>,\n  ThunkConfigExtraApi\n>('roles/create', (arg, { extra: { api } }) => api.role.create(arg));\n\nconst reducer = buildAsyncReducer(action)(\n  {\n    onFulfilled: (state, action) => {\n      state.rolesList.data.unshift(action.payload);\n    },\n  },\n  withRequestStatus((state: State) => state.createRole),\n  withNotifications({\n    getSuccessMsg: () => 'Role created successfully',\n    getErrorMsg: (action) => {\n      const errorMsg = action.error?.message;\n      return `\n      <div>\n        <div>Failed to create role</div>\n        ${errorMsg}\n      </div>`;\n    },\n  }),\n);\n\nexport const createRole = { action, reducer };\n", "/* eslint-disable no-param-reassign */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { pluralize } from '@descope/sdk-helpers';\nimport { Sdk } from '../../api/sdk';\nimport { FirstParameter, State, ThunkConfigExtraApi } from '../types';\nimport {\n  buildAsyncReducer,\n  withNotifications,\n  withRequestStatus,\n} from './helpers';\n\nconst action = createAsyncThunk<\n  any,\n  FirstParameter<Sdk['role']['deleteBatch']>,\n  ThunkConfigExtraApi\n>('roles/delete', (arg, { extra: { api } }) => api.role.deleteBatch(arg));\n\nconst reducer = buildAsyncReducer(action)(\n  {\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    onFulfilled: (state, action) => {\n      state.rolesList.data = state.rolesList.data.filter(\n        (role) =>\n          role?.tenantId?.length === 0 || !action.meta.arg.includes(role.name),\n      );\n      state.selectedRolesIds = [];\n    },\n  },\n  withRequestStatus((state: State) => state.deleteRole),\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  withNotifications({\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    getSuccessMsg: (action) =>\n      pluralize(action.meta.arg.length)`${['', action.meta.arg.length]} ${[\n        'R',\n        'r',\n      ]}ole${['', 's']} deleted successfully`,\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    getErrorMsg: (action) =>\n      pluralize(action.meta.arg.length)`Failed to delete role${['', 's']}`,\n  }),\n);\n\nexport const deleteRoles = { action, reducer };\n", "/* eslint-disable no-param-reassign */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { Sdk } from '../../api/sdk';\nimport { FirstParameter, State, ThunkConfigExtraApi } from '../types';\nimport { buildAsyncReducer, withRequestStatus } from './helpers';\nimport { getSearchParams } from '../selectors';\n\nconst action = createAsyncThunk<\n  any,\n  FirstParameter<Sdk['role']['search']> | void,\n  ThunkConfigExtraApi\n>('roles/search', (arg, { extra: { api }, getState }) => {\n  // we get the existing search params from state, and adding the new search params from the action\n  const searchParams = getSearchParams(getState() as State);\n  return api.role.search({ ...searchParams, ...arg });\n});\n\nconst reducer = buildAsyncReducer(action)(\n  {\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    onPending: (state, action) => {\n      state.searchParams = { ...state.searchParams, ...action.meta.arg };\n    },\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    onFulfilled: (state, action) => {\n      state.rolesList.data = action.payload;\n    },\n  },\n  withRequestStatus((state: State) => state.rolesList),\n);\n\nexport const searchRole = { action, reducer };\n", "/* eslint-disable no-param-reassign */\n/* eslint-disable @typescript-eslint/no-shadow */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { Sdk } from '../../api/sdk';\nimport { FirstParameter, State, ThunkConfigExtraApi } from '../types';\nimport {\n  buildAsyncReducer,\n  withNotifications,\n  withRequestStatus,\n} from './helpers';\n\nconst action = createAsyncThunk<\n  any,\n  FirstParameter<Sdk['role']['update']>,\n  ThunkConfigExtraApi\n>('roles/update', (arg, { extra: { api } }) => api.role.update(arg));\n\nconst reducer = buildAsyncReducer(action)(\n  {\n    onFulfilled: (state, action) => {\n      const roleIdx = state.rolesList.data.findIndex(\n        (role) => role.name === action.payload.oldName,\n      );\n      if (roleIdx !== -1) {\n        state.rolesList.data[roleIdx] = action.payload;\n      }\n    },\n  },\n  withRequestStatus((state: State) => state.updateRole),\n  withNotifications({\n    getSuccessMsg: () => 'Role updated successfully',\n    getErrorMsg: (action) => {\n      const errorMsg = action.error?.message;\n      return `\n      <div>\n        <div>Failed to update role</div>\n        ${errorMsg}\n      </div>`;\n    },\n  }),\n);\n\nexport const updateRole = { action, reducer };\n", "import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { Sdk } from '../../api/sdk';\nimport { FirstParameter, State, ThunkConfigExtraApi } from '../types';\nimport { buildAsyncReducer, withRequestStatus } from './helpers';\n\nconst action = createAsyncThunk<\n  any,\n  FirstParameter<Sdk['tenant']['getTenantPermissions']>,\n  ThunkConfigExtraApi\n>('tenant/getTenantPermissions', (_, { extra: { api } }) =>\n  api.tenant.getTenantPermissions(),\n);\n\nconst reducer = buildAsyncReducer(action)(\n  {\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    onFulfilled: (state, action) => {\n      // eslint-disable-next-line no-param-reassign\n      state.tenantPermissions.data = action.payload.permissions;\n    },\n  },\n  withRequestStatus((state: State) => state.tenantPermissions),\n);\n\nexport const getTenantPermissions = { action, reducer };\n", "import { State } from './types';\n\nexport const initialState: State = {\n  rolesList: {\n    data: [],\n    loading: false,\n    error: null,\n  },\n  createRole: {\n    loading: false,\n    error: null,\n  },\n  updateRole: {\n    loading: false,\n    error: null,\n  },\n  deleteRole: {\n    loading: false,\n    error: null,\n  },\n  tenantPermissions: {\n    loading: false,\n    error: null,\n    data: [],\n  },\n  searchParams: { text: '', sort: [] },\n  selectedRolesIds: [],\n  notifications: [],\n};\n", "export const apiPaths = {\n  role: {\n    search: '/v1/mgmt/role/search',\n    deleteBatch: '/v1/mgmt/role/delete/batch',\n    create: '/v1/mgmt/role/create',\n    update: '/v1/mgmt/role/update',\n  },\n  tenant: {\n    permissions: '/v1/mgmt/permission/all',\n  },\n};\n", "export const withErrorHandler = async (res: Response) => {\n  const text = await res.text();\n  const json = JSON.parse(text);\n\n  if (!res.ok) {\n    const descopeErrorMsg = `${json.errorDescription}${\n      json.errorMessage ? `: ${json.errorMessage}` : ''\n    }`;\n    throw Error(descopeErrorMsg || `${res.status} ${res.statusText}`);\n  }\n\n  res.json = () => Promise.resolve(json);\n  res.text = () => Promise.resolve(text);\n};\n", "import {\n  CreateRoleConfig,\n  Permission,\n  Role,\n  SearchRolesConfig,\n  UpdateRoleConfig,\n} from '../types';\n\nconst search: (\n  config: SearchRolesConfig,\n  tenantId: string,\n) => Promise<Role[]> = async ({ text, sort }, tenantId) =>\n  new Promise((resolve) => {\n    const roles: Role[] = [];\n    for (let i = 1; i < 10; i += 1) {\n      roles.push({\n        name: `Role ${i}`,\n        description: `Role description ${i}`,\n        permissionNames: [`Permission ${i}`],\n        createdTime: new Date(),\n        tenantId,\n      });\n    }\n    sort.forEach((s) => {\n      roles.sort((a, b) =>\n        !s.desc\n          ? (a[s.field] as string)?.localeCompare(b[s.field] as string)\n          : (b[s.field] as string)?.localeCompare(a[s.field] as string),\n      );\n    });\n    resolve(\n      roles.filter(\n        (role) =>\n          role.name.toLowerCase().includes(text.toLowerCase()) ||\n          role.description.toLowerCase().includes(text.toLowerCase()),\n      ),\n    );\n  });\n\nconst create: (\n  config: CreateRoleConfig,\n  tenantId: string,\n) => Promise<Role> = async ({ name, description, permissionNames }, tenantId) =>\n  new Promise((resolve) => {\n    resolve({\n      name,\n      description,\n      permissionNames,\n      createdTime: new Date(),\n      tenantId,\n    });\n  });\n\nconst update: (\n  config: UpdateRoleConfig,\n  tenantId: string,\n) => Promise<Role & { oldName: string }> = async (\n  { name, newName, description, permissionNames },\n  tenantId,\n) =>\n  new Promise((resolve) => {\n    resolve({\n      name: newName,\n      description,\n      permissionNames,\n      createdTime: new Date(),\n      oldName: name,\n      tenantId,\n    });\n  });\n\nconst deleteBatch = async () => {};\n\nconst getTenantPermissions = (): Promise<{\n  permissions: Permission[];\n}> =>\n  new Promise((resolve) => {\n    const permissions: Permission[] = [];\n    for (let i = 1; i < 5; i += 1) {\n      permissions.push({\n        name: `Permission ${i}`,\n      });\n    }\n    resolve({ permissions });\n  });\n\nconst role = {\n  search,\n  create,\n  update,\n  deleteBatch,\n};\nconst tenants = {\n  getTenantPermissions,\n};\nexport { role, tenants };\n", "import {\n  CreateRoleConfig,\n  HttpClient,\n  SearchRolesConfig,\n  UpdateRoleConfig,\n  Role,\n} from '../types';\nimport { apiPaths } from '../apiPaths';\nimport { withErrorHandler } from './helpers';\nimport { role } from './mocks';\n\nexport const createRoleSdk = ({\n  httpClient,\n  tenant,\n  mock,\n}: {\n  httpClient: HttpClient;\n  tenant: string;\n  mock: boolean;\n}) => {\n  const search: (config: SearchRolesConfig) => Promise<Role[]> = async ({\n    page,\n    limit = 10000,\n    text,\n    sort,\n  } = {}) => {\n    if (mock) {\n      return role.search({ page, limit, text, sort }, tenant);\n    }\n    const res = await httpClient.post(\n      apiPaths.role.search,\n      {\n        limit,\n        page,\n        text,\n        sort,\n      },\n      {\n        queryParams: { tenant },\n      },\n    );\n\n    await withErrorHandler(res);\n\n    const json = await res.json();\n\n    return json.roles;\n  };\n\n  const deleteBatch = async (roleNames: string[]) => {\n    if (mock) {\n      return role.deleteBatch();\n    }\n    const res = await httpClient.post(\n      apiPaths.role.deleteBatch,\n      { roleNames },\n      {\n        queryParams: { tenant },\n      },\n    );\n\n    await withErrorHandler(res);\n\n    return res.json();\n  };\n\n  const create: (config: CreateRoleConfig) => Promise<Role[]> = async ({\n    name,\n    description,\n    permissionNames,\n  }) => {\n    if (mock) {\n      return role.create({ name, description, permissionNames }, tenant);\n    }\n    const res = await httpClient.post(\n      apiPaths.role.create,\n      {\n        name,\n        description,\n        permissionNames,\n        tenantId: tenant,\n      },\n      {\n        queryParams: { tenant },\n      },\n    );\n\n    await withErrorHandler(res);\n\n    const json = await res.json();\n\n    return json;\n  };\n\n  const update: (config: UpdateRoleConfig) => Promise<Role[]> = async ({\n    name,\n    newName,\n    description,\n    permissionNames,\n  }) => {\n    if (mock) {\n      return role.update(\n        { name, newName, description, permissionNames },\n        tenant,\n      );\n    }\n    const res = await httpClient.post(\n      apiPaths.role.update,\n      {\n        name,\n        newName,\n        description,\n        permissionNames,\n        tenantId: tenant,\n      },\n      {\n        queryParams: { tenant },\n      },\n    );\n\n    await withErrorHandler(res);\n\n    const json = await res.json();\n    json.oldName = name;\n    return json;\n  };\n\n  return {\n    search,\n    deleteBatch,\n    create,\n    update,\n  };\n};\n", "import { HttpClient, Permission } from '../types';\nimport { apiPaths } from '../apiPaths';\nimport { withErrorHandler } from './helpers';\nimport { tenants } from './mocks';\n\nexport const createTenantSdk = ({\n  httpClient,\n  tenant,\n  mock,\n}: {\n  httpClient: HttpClient;\n  tenant: string;\n  mock: boolean;\n}) => {\n  const getTenantPermissions = async (): Promise<{\n    permissions: Permission[];\n  }> => {\n    if (mock) {\n      return tenants.getTenantPermissions();\n    }\n    const res = await httpClient.get(apiPaths.tenant.permissions, {\n      queryParams: { tenant },\n    });\n\n    await withErrorHandler(res);\n\n    return res.json();\n  };\n\n  return {\n    getTenantPermissions,\n  };\n};\n", "import { compose, createSingletonMixin } from '@descope/sdk-helpers';\nimport {\n  baseUrlMixin,\n  cookieConfigMixin,\n  createValidateAttributesMixin,\n  loggerMixin,\n  observeAttributesMixin,\n  projectIdMixin,\n} from '@descope/sdk-mixins';\nimport { Sdk, createSdk } from '../api/sdk';\n\nexport const apiMixin = createSingletonMixin(\n  <T extends CustomElementConstructor>(superclass: T) => {\n    const BaseClass = compose(\n      projectIdMixin,\n      observeAttributesMixin,\n      loggerMixin,\n      baseUrlMixin,\n      cookieConfigMixin,\n      createValidateAttributesMixin({\n        tenant: createValidateAttributesMixin.missingAttrValidator,\n      }),\n    )(superclass);\n\n    return class ApiMixinClass extends BaseClass {\n      #api: Sdk;\n\n      #createSdk() {\n        this.logger.debug('creating an sdk instance');\n        this.#api = createSdk(\n          {\n            projectId: this.projectId,\n            baseUrl: this.baseUrl,\n            refreshCookieName: this.refreshCookieName,\n          },\n          this.tenantId,\n          this.mock === 'true',\n          this.widgetId,\n        );\n      }\n\n      get tenantId() {\n        return this.getAttribute('tenant');\n      }\n\n      get widgetId() {\n        return this.getAttribute('widget-id');\n      }\n\n      get mock() {\n        return this.getAttribute('mock');\n      }\n\n      get api() {\n        if (!this.#api) {\n          this.#createSdk();\n        }\n\n        return this.#api;\n      }\n\n      async init() {\n        await super.init?.();\n\n        this.observeAttributes(['project-id', 'base-url', 'tenant'], () => {\n          if (this.#api) {\n            this.#createSdk();\n          }\n        });\n      }\n    };\n  },\n);\n", "import createWebSdk from '@descope/web-js-sdk';\nimport { createRoleSdk } from './createRoleSdk';\nimport { createTenantSdk } from './createTenantSdk';\n\ndeclare const BUILD_VERSION: string;\n\nexport const createSdk = (\n  config: Parameters<typeof createWebSdk>[0],\n  tenant: string,\n  mock: boolean,\n  widgetId?: string,\n) => {\n  const webSdk = createWebSdk({\n    ...config,\n    persistTokens: true,\n    baseHeaders: {\n      'x-descope-widget-type': 'role-management-widget',\n      'x-descope-widget-id': widgetId,\n      'x-descope-widget-version': BUILD_VERSION,\n    },\n  });\n\n  return {\n    role: createRoleSdk({ httpClient: webSdk.httpClient, tenant, mock }),\n    tenant: createTenantSdk({ httpClient: webSdk.httpClient, tenant, mock }),\n  };\n};\n\nexport type Sdk = ReturnType<typeof createSdk>;\n", "/* eslint-disable no-param-reassign */\nimport { compose, createSingletonMixin } from '@descope/sdk-helpers';\nimport {\n  createStateManagementMixin,\n  initLifecycleMixin,\n  loggerMixin,\n} from '@descope/sdk-mixins';\nimport {\n  createRole,\n  deleteRoles,\n  getTenantPermissions,\n  searchRole,\n  updateRole,\n} from '../state/asyncActions';\nimport { initialState } from '../state/initialState';\nimport { apiMixin } from './apiMixin';\n\nexport const stateManagementMixin = createSingletonMixin(\n  <T extends CustomElementConstructor>(superclass: T) => {\n    const BaseClass = compose(\n      createStateManagementMixin({\n        name: 'widget',\n        initialState,\n        reducers: {\n          setSelectedRolesIds: (state, { payload }) => {\n            state.selectedRolesIds = payload;\n          },\n          clearNotifications: (state) => {\n            state.notifications = [];\n          },\n        },\n        extraReducers: (builder) => {\n          createRole.reducer(builder);\n          updateRole.reducer(builder);\n          deleteRoles.reducer(builder);\n          searchRole.reducer(builder);\n          getTenantPermissions.reducer(builder);\n        },\n        asyncActions: {\n          searchRoles: searchRole.action,\n          createRole: createRole.action,\n          updateRole: updateRole.action,\n          deleteRoles: deleteRoles.action,\n          getTenantPermissions: getTenantPermissions.action,\n        },\n      }),\n      initLifecycleMixin,\n      loggerMixin,\n      apiMixin,\n    )(superclass);\n    return class StateManagementMixinClass extends BaseClass {\n      state = initialState;\n\n      constructor(...args: any) {\n        super(...args);\n\n        this.subscribe((state: typeof initialState) => {\n          this.logger.debug('State update:', state);\n          this.state = state;\n        });\n      }\n    };\n  },\n);\n", "import { compose, createSingletonMixin } from '@descope/sdk-helpers';\nimport {\n  createValidateAttributesMixin,\n  staticResourcesMixin,\n} from '@descope/sdk-mixins';\n\nconst WIDGET_PAGES_BASE_DIR = 'role-management-widget';\n\nexport const fetchWidgetPagesMixin = createSingletonMixin(\n  <T extends CustomElementConstructor>(superclass: T) => {\n    const BaseClass = compose(\n      staticResourcesMixin,\n      createValidateAttributesMixin({\n        'widget-id': createValidateAttributesMixin.missingAttrValidator,\n      }),\n    )(superclass);\n    return class FetchWidgetPagesMixinClass extends BaseClass {\n      get widgetId() {\n        return this.getAttribute('widget-id');\n      }\n\n      async fetchWidgetPage(filename: string) {\n        const res = await this.fetchStaticResource(\n          `${WIDGET_PAGES_BASE_DIR}/${this.widgetId}/${filename}`,\n          'text',\n        );\n        return res.body;\n      }\n    };\n  },\n);\n", "import {\n  compose,\n  createSingletonMixin,\n  createTemplate,\n} from '@descope/sdk-helpers';\nimport {\n  descopeUiMixin,\n  initElementMixin,\n  initLifecycleMixin,\n  loggerMixin,\n} from '@descope/sdk-mixins';\nimport { fetchWidgetPagesMixin } from '../../fetchWidgetPagesMixin';\nimport { stateManagementMixin } from '../../stateManagementMixin';\n\nexport const initWidgetRootMixin = createSingletonMixin(\n  <T extends CustomElementConstructor>(superclass: T) =>\n    class InitWidgetRootMixinClass extends compose(\n      loggerMixin,\n      initLifecycleMixin,\n      descopeUiMixin,\n      initElementMixin,\n      fetchWidgetPagesMixin,\n      stateManagementMixin,\n    )(superclass) {\n      async #initWidgetRoot() {\n        const template = createTemplate(\n          // await import('../../../../../../test/mocks/rootMock').then(module => module.default)\n          await this.fetchWidgetPage('root.html'),\n        );\n        await this.loadDescopeUiComponents(template);\n        this.contentRootElement.append(template.content.cloneNode(true));\n      }\n\n      // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-empty-function\n      async onWidgetRootReady() {}\n\n      async init() {\n        await super.init?.();\n\n        await Promise.all([\n          this.#initWidgetRoot(),\n          this.actions.searchRoles(),\n          this.actions.getTenantPermissions(),\n        ]);\n\n        this.onWidgetRootReady();\n      }\n    },\n);\n", "import {\n  ButtonDriver,\n  ModalDriver,\n  MultiSelectDriver,\n} from '@descope/sdk-component-drivers';\nimport {\n  compose,\n  createSingletonMixin,\n  createTemplate,\n} from '@descope/sdk-helpers';\nimport { formMixin, loggerMixin, modalMixin } from '@descope/sdk-mixins';\nimport { getTenantPermissions } from '../../../state/selectors';\nimport { stateManagementMixin } from '../../stateManagementMixin';\nimport { initWidgetRootMixin } from './initWidgetRootMixin';\n\nexport const initCreateRoleModalMixin = createSingletonMixin(\n  <T extends CustomElementConstructor>(superclass: T) =>\n    class InitCreateRoleModalMixinClass extends compose(\n      stateManagementMixin,\n      modalMixin,\n      formMixin,\n      loggerMixin,\n      initWidgetRootMixin,\n    )(superclass) {\n      createRoleModal: ModalDriver;\n\n      #permissionsMultiSelect: MultiSelectDriver;\n\n      async #initCreateRoleModal() {\n        this.createRoleModal = this.createModal();\n        this.createRoleModal.setContent(\n          createTemplate(\n            // await import('../../../../../../test/mocks/createRoleModalMock').then(module => module.default)\n            await this.fetchWidgetPage('create-role-modal.html'),\n          ),\n        );\n\n        const cancelButton = new ButtonDriver(\n          () =>\n            this.createRoleModal.ele?.querySelector('[data-id=\"modal-cancel\"]'),\n          { logger: this.logger },\n        );\n        cancelButton.onClick(() => {\n          this.createRoleModal.close();\n          this.resetFormData(this.createRoleModal.ele);\n        });\n\n        const submitButton = new ButtonDriver(\n          () =>\n            this.createRoleModal.ele?.querySelector('[data-id=\"modal-submit\"]'),\n          { logger: this.logger },\n        );\n        submitButton.onClick(async () => {\n          if (this.validateForm(this.createRoleModal.ele)) {\n            this.actions.createRole({\n              ...this.getFormData(this.createRoleModal.ele),\n            });\n            this.createRoleModal.close();\n            this.resetFormData(this.createRoleModal.ele);\n          }\n        });\n\n        this.#permissionsMultiSelect = new MultiSelectDriver(\n          () =>\n            this.createRoleModal.ele?.querySelector(\n              '[data-id=\"permissions-multiselect\"]',\n            ),\n          { logger: this.logger },\n        );\n\n        this.#updatePermissionsMultiSelect();\n      }\n\n      #updatePermissionsMultiSelect = async () => {\n        await this.#permissionsMultiSelect.setData(\n          getTenantPermissions(this.state)?.map(({ name }) => ({\n            value: name,\n            label: name,\n          })),\n        );\n      };\n\n      async onWidgetRootReady() {\n        await super.onWidgetRootReady?.();\n\n        this.#initCreateRoleModal();\n      }\n    },\n);\n", "import { ButtonDriver } from '@descope/sdk-component-drivers';\nimport { compose, createSingletonMixin } from '@descope/sdk-helpers';\nimport { loggerMixin } from '@descope/sdk-mixins';\nimport { initCreateRoleModalMixin } from './initCreateRoleModalMixin';\nimport { initWidgetRootMixin } from './initWidgetRootMixin';\n\nexport const initCreateRoleButtonMixin = createSingletonMixin(\n  <T extends CustomElementConstructor>(superclass: T) =>\n    class InitCreateRoleButtonMixinClass extends compose(\n      loggerMixin,\n      initCreateRoleModalMixin,\n      initWidgetRootMixin,\n    )(superclass) {\n      createButton: ButtonDriver;\n\n      #initCreateButton() {\n        this.createButton = new ButtonDriver(\n          this.shadowRoot?.querySelector('[data-id=\"create-role\"]'),\n          { logger: this.logger },\n        );\n        this.createButton.onClick(() => this.createRoleModal.open());\n      }\n\n      async onWidgetRootReady() {\n        await super.onWidgetRootReady?.();\n\n        this.#initCreateButton();\n      }\n    },\n);\n", "import {\n  ButtonDriver,\n  ModalDriver,\n  TextDriver,\n} from '@descope/sdk-component-drivers';\nimport {\n  compose,\n  createSingletonMixin,\n  createTemplate,\n} from '@descope/sdk-helpers';\nimport { loggerMixin, modalMixin } from '@descope/sdk-mixins';\nimport {\n  getSelectedRoles,\n  getSelectedRolesDetailsForDisplay,\n} from '../../../state/selectors';\nimport { stateManagementMixin } from '../../stateManagementMixin';\nimport { initWidgetRootMixin } from './initWidgetRootMixin';\n\nexport const initDeleteRolesModalMixin = createSingletonMixin(\n  <T extends CustomElementConstructor>(superclass: T) =>\n    class InitDeleteRolesModalMixinClass extends compose(\n      stateManagementMixin,\n      modalMixin,\n      loggerMixin,\n      initWidgetRootMixin,\n    )(superclass) {\n      deleteRolesModal: ModalDriver;\n\n      async #initDeleteRoleModal() {\n        this.deleteRolesModal = this.createModal();\n        this.deleteRolesModal.setContent(\n          createTemplate(\n            // await import('../../../../../../test/mocks/deleteRoleModalMock').then(module => module.default)\n            await this.fetchWidgetPage('delete-roles-modal.html'),\n          ),\n        );\n\n        const cancelButton = new ButtonDriver(\n          () =>\n            this.deleteRolesModal.ele?.querySelector(\n              '[data-id=\"modal-cancel\"]',\n            ),\n          { logger: this.logger },\n        );\n        cancelButton.onClick(() => this.deleteRolesModal.close());\n\n        const submitButton = new ButtonDriver(\n          () =>\n            this.deleteRolesModal.ele?.querySelector(\n              '[data-id=\"modal-submit\"]',\n            ),\n          { logger: this.logger },\n        );\n        submitButton.onClick(() => {\n          const selectedRoles = getSelectedRoles(this.state);\n          this.actions.deleteRoles(selectedRoles?.map((role) => role.name));\n          this.deleteRolesModal.close();\n        });\n\n        const description = new TextDriver(\n          this.deleteRolesModal.ele?.querySelector('[data-id=\"body-text\"]'),\n          { logger: this.logger },\n        );\n\n        this.deleteRolesModal.beforeOpen = () => {\n          const roleDetails = getSelectedRolesDetailsForDisplay(this.state);\n          description.text = `Delete ${roleDetails}?`;\n        };\n      }\n\n      async onWidgetRootReady() {\n        await super.onWidgetRootReady?.();\n\n        await this.#initDeleteRoleModal();\n      }\n    },\n);\n", "import { ButtonDriver } from '@descope/sdk-component-drivers';\nimport {\n  compose,\n  createSingletonMixin,\n  withMemCache,\n} from '@descope/sdk-helpers';\nimport { loggerMixin } from '@descope/sdk-mixins';\nimport { getIsRolesSelected } from '../../../state/selectors';\nimport { stateManagementMixin } from '../../stateManagementMixin';\nimport { initDeleteRolesModalMixin } from './initDeleteRolesModalMixin';\nimport { initWidgetRootMixin } from './initWidgetRootMixin';\n\nexport const initDeleteRolesButtonMixin = createSingletonMixin(\n  <T extends CustomElementConstructor>(superclass: T) =>\n    class InitDeleteRolesButtonMixinClass extends compose(\n      loggerMixin,\n      initWidgetRootMixin,\n      stateManagementMixin,\n      initDeleteRolesModalMixin,\n    )(superclass) {\n      deleteButton: ButtonDriver;\n\n      #initDeleteButton() {\n        this.deleteButton = new ButtonDriver(\n          this.shadowRoot?.querySelector('[data-id=\"delete-roles\"]'),\n          { logger: this.logger },\n        );\n        this.deleteButton.disable();\n        this.deleteButton.onClick(() => {\n          this.deleteRolesModal.open();\n        });\n      }\n\n      #onIsRoleSelectedUpdate = withMemCache(\n        (isSelected: ReturnType<typeof getIsRolesSelected>) => {\n          if (isSelected) {\n            this.deleteButton.enable();\n          } else {\n            this.deleteButton.disable();\n          }\n        },\n      );\n\n      async onWidgetRootReady() {\n        await super.onWidgetRootReady?.();\n\n        this.#initDeleteButton();\n\n        this.subscribe(\n          this.#onIsRoleSelectedUpdate.bind(this),\n          getIsRolesSelected,\n        );\n      }\n    },\n);\n", "import {\n  ButtonDriver,\n  ModalDriver,\n  MultiSelectDriver,\n} from '@descope/sdk-component-drivers';\nimport {\n  compose,\n  createSingletonMixin,\n  createTemplate,\n} from '@descope/sdk-helpers';\nimport { formMixin, loggerMixin, modalMixin } from '@descope/sdk-mixins';\nimport {\n  getSelectedRoles,\n  getTenantPermissions,\n} from '../../../state/selectors';\nimport { stateManagementMixin } from '../../stateManagementMixin';\nimport { initWidgetRootMixin } from './initWidgetRootMixin';\n\nexport const initEditRoleModalMixin = createSingletonMixin(\n  <T extends CustomElementConstructor>(superclass: T) =>\n    class InitEditRoleModalMixinClass extends compose(\n      stateManagementMixin,\n      modalMixin,\n      loggerMixin,\n      formMixin,\n      initWidgetRootMixin,\n    )(superclass) {\n      editRoleModal: ModalDriver;\n\n      #permissionsMultiSelect: MultiSelectDriver;\n\n      #initCancelButton() {\n        const cancelButton = new ButtonDriver(\n          () =>\n            this.editRoleModal.ele?.querySelector('[data-id=\"modal-cancel\"]'),\n          { logger: this.logger },\n        );\n        cancelButton.onClick(() => this.editRoleModal.close());\n      }\n\n      #initSubmitButton() {\n        const submitButton = new ButtonDriver(\n          () =>\n            this.editRoleModal.ele?.querySelector('[data-id=\"modal-submit\"]'),\n          { logger: this.logger },\n        );\n\n        submitButton.onClick(() => {\n          if (this.validateForm(this.editRoleModal.ele)) {\n            const { name, ...formData } = this.getFormData(\n              this.editRoleModal.ele,\n            );\n            const roleDetails = getSelectedRoles(this.state)?.[0];\n            this.actions.updateRole({\n              newName: name,\n              name: roleDetails.name,\n              ...formData,\n            });\n            this.editRoleModal.close();\n            this.resetFormData(this.editRoleModal.ele);\n          }\n        });\n      }\n\n      #updatePermissionsMultiSelect = async () => {\n        await this.#permissionsMultiSelect.setData(\n          getTenantPermissions(this.state)?.map(({ name }) => ({\n            value: name,\n            label: name,\n          })),\n        );\n      };\n\n      #updateModalData = () => {\n        const roleDetails = getSelectedRoles(this.state)?.[0];\n\n        const formData = {\n          name: roleDetails?.name,\n          description: roleDetails?.description,\n          permissionNames: roleDetails?.permissionNames,\n        };\n\n        this.setFormData(this.editRoleModal.ele, formData);\n      };\n\n      async #initEditRoleModal() {\n        this.editRoleModal = this.createModal();\n        this.editRoleModal.setContent(\n          createTemplate(\n            // await import('../../../../../../test/mocks/editRoleModalMock').then(module => module.default)\n            await this.fetchWidgetPage('edit-role-modal.html'),\n          ),\n        );\n\n        this.#initCancelButton();\n        this.#initSubmitButton();\n\n        this.#permissionsMultiSelect = new MultiSelectDriver(\n          () =>\n            this.editRoleModal.ele?.querySelector(\n              '[data-id=\"permissions-multiselect\"]',\n            ),\n          { logger: this.logger },\n        );\n\n        this.editRoleModal.beforeOpen = async () => {\n          await this.#updatePermissionsMultiSelect();\n          this.#updateModalData();\n        };\n      }\n\n      async onWidgetRootReady() {\n        await super.onWidgetRootReady?.();\n\n        await this.#initEditRoleModal();\n      }\n    },\n);\n", "import { ButtonDriver } from '@descope/sdk-component-drivers';\nimport {\n  compose,\n  createSingletonMixin,\n  withMemCache,\n} from '@descope/sdk-helpers';\nimport { formMixin, loggerMixin } from '@descope/sdk-mixins';\nimport { getIsSelectedRoleEditable } from '../../../state/selectors';\nimport { stateManagementMixin } from '../../stateManagementMixin';\nimport { initEditRoleModalMixin } from './initEditRoleModalMixin';\nimport { initWidgetRootMixin } from './initWidgetRootMixin';\n\nexport const initEditRoleButtonMixin = createSingletonMixin(\n  <T extends CustomElementConstructor>(superclass: T) =>\n    class InitEditRoleButtonMixinClass extends compose(\n      loggerMixin,\n      initWidgetRootMixin,\n      stateManagementMixin,\n      initEditRoleModalMixin,\n      formMixin,\n    )(superclass) {\n      editButton: ButtonDriver;\n\n      #initEditButton() {\n        this.editButton = new ButtonDriver(\n          this.shadowRoot?.querySelector('[data-id=\"edit-role\"]'),\n          { logger: this.logger },\n        );\n        this.editButton.disable();\n        this.editButton.onClick(() => {\n          this.editRoleModal.open();\n        });\n      }\n\n      #onIsRoleSelectedUpdate = withMemCache(\n        (isEditable: ReturnType<typeof getIsSelectedRoleEditable>) => {\n          if (isEditable) {\n            this.editButton.enable();\n          } else {\n            this.editButton.disable();\n          }\n        },\n      );\n\n      async onWidgetRootReady() {\n        await super.onWidgetRootReady?.();\n\n        this.#initEditButton();\n\n        this.subscribe(\n          this.#onIsRoleSelectedUpdate.bind(this),\n          getIsSelectedRoleEditable,\n        );\n      }\n    },\n);\n", "import { TextFieldDriver } from '@descope/sdk-component-drivers';\nimport { compose, createSingletonMixin, debounce } from '@descope/sdk-helpers';\nimport { loggerMixin } from '@descope/sdk-mixins';\nimport { stateManagementMixin } from '../../stateManagementMixin';\nimport { initWidgetRootMixin } from './initWidgetRootMixin';\n\nexport const initFilterRolesInputMixin = createSingletonMixin(\n  <T extends CustomElementConstructor>(superclass: T) =>\n    class InitFilterRolesInputMixinClass extends compose(\n      loggerMixin,\n      initWidgetRootMixin,\n      stateManagementMixin,\n    )(superclass) {\n      searchInput: TextFieldDriver;\n\n      #onInput = debounce(() => {\n        this.actions.searchRoles({ text: this.searchInput.value });\n      });\n\n      #initSearchInput() {\n        // currently we are doing it on client side because we assume there will not be more than 10000 roles per tenant\n        this.searchInput = new TextFieldDriver(\n          this.shadowRoot?.querySelector('[data-id=\"search-input\"]'),\n          { logger: this.logger },\n        );\n        this.searchInput.onInput(this.#onInput);\n      }\n\n      async onWidgetRootReady() {\n        await super.onWidgetRootReady?.();\n\n        this.#initSearchInput();\n      }\n    },\n);\n", "import {\n  compose,\n  createSingletonMixin,\n  withMemCache,\n} from '@descope/sdk-helpers';\nimport {\n  initLifecycleMixin,\n  loggerMixin,\n  notificationsMixin,\n} from '@descope/sdk-mixins';\nimport checkmark from '../../../../assets/checkmark.svg';\nimport close from '../../../../assets/close.svg';\nimport warning from '../../../../assets/warning.svg';\nimport { getNotifications } from '../../../state/selectors';\nimport { stateManagementMixin } from '../../stateManagementMixin';\n\ntype Notifications = ReturnType<typeof getNotifications>;\ntype Notification = Notifications[0];\n\nconst SUCCESS_NOTIFICATION_DURATION = 3000;\nconst ERROR_NOTIFICATION_DURATION = 0;\n\nconst notificationTypesIcons = {\n  success: checkmark(),\n  error: warning(),\n};\n\nexport const initNotificationsMixin = createSingletonMixin(\n  <T extends CustomElementConstructor>(superclass: T) =>\n    class InitNotificationsMixinClass extends compose(\n      loggerMixin,\n      stateManagementMixin,\n      notificationsMixin,\n      initLifecycleMixin,\n    )(superclass) {\n      // eslint-disable-next-line class-methods-use-this\n      #createNotificationContent({ type, msg }: Notification) {\n        const icon = notificationTypesIcons[type];\n\n        const closeIcon = Object.assign(close(), { slot: 'close' });\n\n        return `${icon?.outerHTML || ''}${msg}${closeIcon.outerHTML}`;\n      }\n\n      #createNotification(type: Notification['type']) {\n        return this.createNotification({\n          mode: type,\n          duration:\n            type === 'error'\n              ? ERROR_NOTIFICATION_DURATION\n              : SUCCESS_NOTIFICATION_DURATION,\n          position: 'bottom-start',\n          size: 'sm',\n        });\n      }\n\n      #onNotificationsUpdate = withMemCache((notifications: Notifications) => {\n        if (notifications.length) {\n          notifications.forEach(({ type, msg }) => {\n            const notification = this.#createNotification(type);\n\n            notification.setContent(\n              this.#createNotificationContent({ type, msg }),\n            );\n\n            notification.show();\n          });\n\n          // when there is a selection update from the table we get a double notification\n          // this is why we are wrapping the clearNotifications action with timeout;\n          setTimeout(() => this.actions.clearNotifications());\n        }\n      });\n\n      async init() {\n        await super.init?.();\n\n        this.subscribe(\n          this.#onNotificationsUpdate.bind(this),\n          getNotifications,\n        );\n      }\n    },\n);\n", "import { GridDriver } from '@descope/sdk-component-drivers';\nimport {\n  compose,\n  createSingletonMixin,\n  debounce,\n  withMemCache,\n} from '@descope/sdk-helpers';\nimport { loggerMixin } from '@descope/sdk-mixins';\nimport { Role } from '../../../api/types';\nimport { getRolesList } from '../../../state/selectors';\nimport { stateManagementMixin } from '../../stateManagementMixin';\nimport { initWidgetRootMixin } from './initWidgetRootMixin';\n\nexport const initRolesTableMixin = createSingletonMixin(\n  <T extends CustomElementConstructor>(superclass: T) =>\n    class InitRolesTableMixinClass extends compose(\n      stateManagementMixin,\n      loggerMixin,\n      initWidgetRootMixin,\n    )(superclass) {\n      rolesTable: GridDriver<Role>;\n\n      #initRolesTable() {\n        this.rolesTable = new GridDriver(\n          this.shadowRoot?.querySelector('[data-id=\"roles-table\"]'),\n          { logger: this.logger },\n        );\n        this.rolesTable.onSelectedItemsChange((e) => {\n          this.actions.setSelectedRolesIds(\n            e.detail.value.map(({ name }) => name),\n          );\n        });\n      }\n\n      #onRolesListUpdate = withMemCache(\n        (rolesList: ReturnType<typeof getRolesList>) => {\n          this.rolesTable.data = rolesList;\n        },\n      );\n\n      #onColumnSortChange = debounce(\n        (\n          ele: HTMLElement & { path: string },\n          detail: { value: 'asc' | 'desc' | null },\n        ) => {\n          const sort = [];\n          const { value } = detail;\n          if (value) {\n            const field = ele.path;\n            sort.push({ field, desc: value === 'desc' });\n          }\n          this.actions.searchRoles({ sort });\n        },\n      );\n\n      async onWidgetRootReady() {\n        await super.onWidgetRootReady?.();\n\n        this.#initRolesTable();\n        this.rolesTable.columns.forEach((column) => {\n          column.onSortDirectionChange((e: MouseEvent) => {\n            this.#onColumnSortChange(e.target, e.detail);\n          });\n        });\n\n        // because we are not waiting for the rest calls,\n        // we need to make sure the table is updated with the received roles\n        this.#onRolesListUpdate(getRolesList(this.state));\n        this.subscribe(this.#onRolesListUpdate.bind(this), getRolesList);\n      }\n    },\n);\n", "import { compose, createSingletonMixin } from '@descope/sdk-helpers';\nimport { debuggerMixin, themeMixin } from '@descope/sdk-mixins';\nimport { initCreateRoleButtonMixin } from './initComponentsMixins/initCreateRoleButtonMixin';\nimport { initDeleteRolesButtonMixin } from './initComponentsMixins/initDeleteRolesButtonMixin';\nimport { initEditRoleButtonMixin } from './initComponentsMixins/initEditRolesButtonMixin';\nimport { initFilterRolesInputMixin } from './initComponentsMixins/initFilterRolesInputMixin';\nimport { initNotificationsMixin } from './initComponentsMixins/initNotificationsMixin';\nimport { initRolesTableMixin } from './initComponentsMixins/initRolesTableMixin';\n\nexport const initMixin = createSingletonMixin(\n  <T extends CustomElementConstructor>(superclass: T) =>\n    // @ts-ignore\n    class InitMixinClass extends compose(\n      debuggerMixin,\n      themeMixin,\n      initRolesTableMixin,\n      initCreateRoleButtonMixin,\n      initDeleteRolesButtonMixin,\n      initEditRoleButtonMixin,\n      initFilterRolesInputMixin,\n      initNotificationsMixin,\n    )(superclass) {\n      async init() {\n        await super.init?.();\n      }\n    },\n);\n", "import { compose } from '@descope/sdk-helpers';\nimport { initMixin } from './mixins/initMixin/initMixin';\n\nconst rootMixin = (superclass: CustomElementConstructor) =>\n  class RootMixinClass extends initMixin(superclass) {};\n\nexport const RoleManagementWidget = compose(rootMixin)(HTMLElement);\n", "// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport type { Unsubscribe } from 'redux'; //  workaround for https://github.com/microsoft/TypeScript/issues/42873\nimport { RoleManagementWidget } from './widget';\n\nexport default RoleManagementWidget;\n\ncustomElements.define('descope-role-management-widget', RoleManagementWidget);\n"],
  "mappings": "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",
  "names": ["getSelectedRolesIds", "state", "selectedRolesIds", "getNotifications", "notifications", "getTenantPermissions", "tenantPermissions", "data", "getRolesList", "createSelector", "rolesList", "roles", "map", "role", "Object", "assign", "editable", "_a", "e", "tenantId", "length", "getSelectedRoles", "selected", "filter", "includes", "name", "getIsRolesSelected", "getIsSingleRolesSelected", "getIsSelectedRoleEditable", "singleRoleSelected", "getSelectedRolesDetailsForDisplay", "selectedRoles", "buildAsyncReducer", "action", "args", "builder", "addCase", "pending", "forEach", "onPending", "fulfilled", "onFulfilled", "rejected", "onRejected", "withRequestStatus", "getStateSection", "loading", "error", "withNotifications", "getErrorMsg", "getSuccessMsg", "push", "type", "msg", "createAsyncThunk", "arg", "extra", "api", "create", "reducer", "unshift", "payload", "createRole", "message", "deleteBatch", "meta", "deleteRole", "pluralize", "deleteRoles", "getState", "searchParams", "search", "searchRole", "update", "roleIdx", "findIndex", "oldName", "updateRole", "_", "tenant", "permissions", "initialState", "text", "sort", "apiPaths", "withErrorHandler", "res", "__awaiter", "json", "JSON", "parse", "ok", "descopeErrorMsg", "errorDescription", "errorMessage", "Error", "status", "statusText", "Promise", "resolve", "tenantId_1", "i", "description", "permissionNames", "createdTime", "Date", "s", "a", "b", "desc", "_b", "field", "localeCompare", "toLowerCase", "tenantId_2", "_c", "tenantId_3", "newName", "tenants", "createRoleSdk", "httpClient", "mock", "args_1", "page", "limit", "post", "queryParams", "roleNames", "createTenantSdk", "get", "apiMixin", "createSingletonMixin", "superclass", "BaseClass", "compose", "projectIdMixin", "observeAttributesMixin", "loggerMixin", "baseUrlMixin", "cookieConfigMixin", "createValidateAttributesMixin", "missingAttrValidator", "constructor", "_ApiMixinClass_api", "set", "this", "getAttribute", "__classPrivateFieldGet", "_ApiMixinClass_instances", "_ApiMixinClass_createSdk", "call", "init", "_super", "observeAttributes", "o", "logger", "debug", "__classPrivateFieldSet", "config", "widgetId", "webSdk", "createWebSdk", "persistTokens", "baseHeaders", "projectId", "baseUrl", "refreshCookieName", "stateManagementMixin", "createStateManagementMixin", "reducers", "setSelectedRolesIds", "clearNotifications", "extraReducers", "asyncActions", "searchRoles", "initLifecycleMixin", "super", "subscribe", "fetchWidgetPagesMixin", "staticResourcesMixin", "filename", "fetchStaticResource", "body", "initWidgetRootMixin", "_InitWidgetRootMixinClass_instances", "_InitWidgetRootMixinClass_initWidgetRoot", "descopeUiMixin", "initElementMixin", "onWidgetRootReady", "all", "actions", "template", "createTemplate", "fetchWidgetPage", "loadDescopeUiComponents", "contentRootElement", "append", "content", "cloneNode", "initCreateRoleModalMixin", "_InitCreateRoleModalMixinClass_instances", "_InitCreateRoleModalMixinClass_permissionsMultiSelect", "_InitCreateRoleModalMixinClass_initCreateRoleModal", "_InitCreateRoleModalMixinClass_updatePermissionsMultiSelect", "modalMixin", "formMixin", "setData", "value", "label", "d", "n", "createRoleModal", "createModal", "setContent", "ButtonDriver", "ele", "querySelector", "onClick", "close", "resetFormData", "validateForm", "getFormData", "MultiSelectDriver", "initCreateRoleButtonMixin", "_InitCreateRoleButtonMixinClass_instances", "_InitCreateRoleButtonMixinClass_initCreateButton", "createButton", "shadowRoot", "open", "initDeleteRolesModalMixin", "_InitDeleteRolesModalMixinClass_instances", "_InitDeleteRolesModalMixinClass_initDeleteRoleModal", "deleteRolesModal", "cancelButton", "submitButton", "TextDriver", "beforeOpen", "roleDetails", "initDeleteRolesButtonMixin", "_InitDeleteRolesButtonMixinClass_instances", "_InitDeleteRolesButtonMixinClass_initDeleteButton", "_InitDeleteRolesButtonMixinClass_onIsRoleSelectedUpdate", "withMemCache", "isSelected", "deleteButton", "enable", "disable", "bind", "initEditRoleModalMixin", "_InitEditRoleModalMixinClass_instances", "_InitEditRoleModalMixinClass_permissionsMultiSelect", "_InitEditRoleModalMixinClass_initCancelButton", "_InitEditRoleModalMixinClass_initSubmitButton", "_InitEditRoleModalMixinClass_updatePermissionsMultiSelect", "_InitEditRoleModalMixinClass_updateModalData", "_InitEditRoleModalMixinClass_initEditRoleModal", "formData", "setFormData", "editRoleModal", "__rest", "initEditRoleButtonMixin", "_InitEditRoleButtonMixinClass_instances", "_InitEditRoleButtonMixinClass_initEditButton", "_InitEditRoleButtonMixinClass_onIsRoleSelectedUpdate", "isEditable", "editButton", "initFilterRolesInputMixin", "_InitFilterRolesInputMixinClass_instances", "_InitFilterRolesInputMixinClass_onInput", "_InitFilterRolesInputMixinClass_initSearchInput", "debounce", "searchInput", "TextFieldDriver", "onInput", "notificationTypesIcons", "success", "initNotificationsMixin", "_InitNotificationsMixinClass_instances", "_InitNotificationsMixinClass_createNotificationContent", "_InitNotificationsMixinClass_createNotification", "_InitNotificationsMixinClass_onNotificationsUpdate", "notificationsMixin", "notification", "show", "setTimeout", "l", "icon", "closeIcon", "slot", "outerHTML", "createNotification", "mode", "duration", "position", "size", "initRolesTableMixin", "_InitRolesTableMixinClass_instances", "_InitRolesTableMixinClass_initRolesTable", "_InitRolesTableMixinClass_onRolesListUpdate", "_InitRolesTableMixinClass_onColumnSortChange", "rolesTable", "detail", "path", "columns", "column", "onSortDirectionChange", "target", "GridDriver", "onSelectedItemsChange", "initMixin", "debuggerMixin", "themeMixin", "RoleManagementWidget", "HTMLElement", "customElements", "define"]
}
