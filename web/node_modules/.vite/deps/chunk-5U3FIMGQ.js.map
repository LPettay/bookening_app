{
  "version": 3,
  "sources": ["../../@descope/web-component/src/lib/helpers/templates.ts", "../../@descope/web-component/src/lib/helpers/abTestingKey.ts", "../../@descope/web-component/src/lib/helpers/conditions.ts", "../../@descope/web-component/src/lib/helpers/lastAuth.ts", "../../@descope/web-component/src/lib/helpers/flowInputs.ts", "../../@descope/web-component/src/lib/mixins/formMountMixin.ts", "../../@descope/web-component/src/lib/descope-wc/BaseDescopeWc.ts", "../../@descope/web-component/src/lib/descope-wc/DescopeWc.ts", "../../@descope/web-component/src/lib/descope-wc/index.ts"],
  "sourcesContent": ["import { escapeMarkdown } from '@descope/escape-markdown';\nimport {\n  ELEMENT_TYPE_ATTRIBUTE,\n  DESCOPE_ATTRIBUTE_EXCLUDE_FIELD,\n  HAS_DYNAMIC_VALUES_ATTR_NAME,\n} from '../constants';\nimport { ComponentsConfig, CssVars, ScreenState } from '../types';\nimport { shouldHandleMarkdown } from './helpers';\n\nconst ALLOWED_INPUT_CONFIG_ATTRS = ['disabled'];\n\nexport const replaceElementMessage = (\n  baseEle: HTMLElement,\n  eleType: string,\n  message = '',\n) => {\n  const eleList = baseEle.querySelectorAll(\n    `[${ELEMENT_TYPE_ATTRIBUTE}=\"${eleType}\"]`,\n  );\n  eleList.forEach((ele: HTMLElement) => {\n    // eslint-disable-next-line no-param-reassign\n    ele.textContent = message;\n    ele.classList[message ? 'remove' : 'add']('hide');\n  });\n};\n\n/**\n * Replace the 'value' attribute of screen inputs with screen state's inputs.\n * For example: if base element contains '<input name=\"key1\" ...>' and screen input is in form of { key1: 'val1' },\n * it will add 'val1' as the input value\n */\nconst replaceElementInputs = (\n  baseEle: HTMLElement,\n  screenInputs: Record<string, string>,\n) => {\n  Object.entries(screenInputs || {}).forEach(([name, value]) => {\n    const inputEls = Array.from(\n      baseEle.querySelectorAll(\n        `*[name=\"${name}\"]:not([${DESCOPE_ATTRIBUTE_EXCLUDE_FIELD}])`,\n      ),\n    ) as HTMLInputElement[];\n    inputEls.forEach((inputEle) => {\n      // eslint-disable-next-line no-param-reassign\n      inputEle.value = value;\n    });\n  });\n};\n\n/**\n * Get object nested path.\n * Examples:\n *  - getByPath({ { a { b: 'rob' } }, 'a.b') => 'hey rob'\n *  - getByPath({}, 'a.b') => ''\n */\nconst getByPath = (obj: Record<string, any>, path: string) =>\n  path.split('.').reduce((prev, next) => prev?.[next] || '', obj);\n\n/**\n * Apply template language on text, based on screen state.\n * Examples:\n *  - 'hey {{a.b}}', { a { b: 'rob' }} => 'hey rob'\n *  - 'hey {{not.exists}}', {} => 'hey '\n */\nconst applyTemplates = (\n  text: string,\n  screenState?: Record<string, any>,\n  handleMarkdown?: boolean,\n): string =>\n  text.replace(/{{(.+?)}}/g, (_, match) =>\n    handleMarkdown\n      ? escapeMarkdown(getByPath(screenState, match))\n      : getByPath(screenState, match),\n  );\n\n/**\n * Replace the templates of content of inner text/link elements with screen state data\n */\nconst replaceElementTemplates = (\n  baseEle: DocumentFragment,\n  screenState?: Record<string, any>,\n) => {\n  const eleList = baseEle.querySelectorAll(\n    'descope-text,descope-link,descope-enriched-text,descope-code-snippet',\n  );\n  eleList.forEach((inEle: HTMLElement) => {\n    const handleMarkdown = shouldHandleMarkdown(inEle.localName);\n    // eslint-disable-next-line no-param-reassign\n    inEle.textContent = applyTemplates(\n      inEle.textContent,\n      screenState,\n      handleMarkdown,\n    );\n    const href = inEle.getAttribute('href');\n    if (href) {\n      inEle.setAttribute('href', applyTemplates(href, screenState));\n    }\n  });\n};\n\nconst replaceTemplateDynamicAttrValues = (\n  baseEle: DocumentFragment,\n  screenState?: Record<string, any>,\n) => {\n  const eleList = baseEle.querySelectorAll(`[${HAS_DYNAMIC_VALUES_ATTR_NAME}]`);\n  eleList.forEach((ele: HTMLElement) => {\n    Array.from(ele.attributes).forEach((attr) => {\n      // eslint-disable-next-line no-param-reassign\n      attr.value = applyTemplates(attr.value, screenState);\n    });\n  });\n};\n\nconst replaceHrefByDataType = (\n  baseEle: DocumentFragment,\n  dataType: string,\n  provisionUrl?: string,\n) => {\n  const eleList = baseEle.querySelectorAll(\n    `[${ELEMENT_TYPE_ATTRIBUTE}=\"${dataType}\"]`,\n  );\n  eleList.forEach((ele: HTMLLinkElement) => {\n    // eslint-disable-next-line no-param-reassign\n    ele.setAttribute('href', provisionUrl);\n  });\n};\n\nconst setFormConfigValues = (\n  baseEle: DocumentFragment,\n  formData: Record<string, string>,\n) => {\n  Object.entries(formData).forEach(([name, config]) => {\n    const eles = baseEle.querySelectorAll(`[name=\"${name}\"]`);\n\n    eles.forEach((ele) => {\n      Object.entries(config).forEach(([attrName, attrValue]) => {\n        if (ALLOWED_INPUT_CONFIG_ATTRS.includes(attrName)) {\n          ele.setAttribute(attrName, attrValue);\n        }\n      });\n    });\n  });\n};\n\nexport const setCssVars = (\n  rootEle: HTMLElement,\n  nextPageTemplate: DocumentFragment,\n  cssVars: CssVars,\n  logger: {\n    error: (message: string, description: string) => void;\n    info: (message: string, description: string) => void;\n    debug: (message: string, description: string) => void;\n  },\n) => {\n  if (!cssVars) {\n    return;\n  }\n\n  Object.keys(cssVars).forEach((componentName) => {\n    if (!nextPageTemplate.querySelector(componentName)) {\n      logger.debug(\n        `Skipping css vars for component \"${componentName}}\"`,\n        `Got css vars for component ${componentName} but Could not find it on next page`,\n      );\n    }\n    const componentClass:\n      | (CustomElementConstructor & { cssVarList: CssVars })\n      | undefined = customElements.get(componentName) as any;\n\n    if (!componentClass) {\n      logger.info(\n        `Could not find component class for ${componentName}`,\n        'Check if the component is registered',\n      );\n      return;\n    }\n\n    Object.keys(cssVars[componentName]).forEach((cssVarKey) => {\n      const componentCssVars = cssVars[componentName];\n      const varName = componentClass?.cssVarList?.[cssVarKey];\n\n      if (!varName) {\n        logger.info(\n          `Could not find css variable name for ${cssVarKey} in ${componentName}`,\n          'Check if the css variable is defined in the component',\n        );\n        return;\n      }\n\n      const value = componentCssVars[cssVarKey];\n\n      rootEle.style.setProperty(varName, value);\n    });\n  });\n};\n\nconst setElementConfig = (\n  baseEle: DocumentFragment,\n  componentsConfig: ComponentsConfig,\n  logger?: { error: (message: string, description: string) => void },\n) => {\n  if (!componentsConfig) {\n    return;\n  }\n  const { componentsDynamicAttrs, ...rest } = componentsConfig;\n\n  const configMap = Object.keys(rest).reduce((acc, componentName) => {\n    acc[`[name=${componentName}]`] = rest[componentName];\n    return acc;\n  }, {});\n\n  if (componentsDynamicAttrs) {\n    Object.keys(componentsDynamicAttrs).forEach((componentSelector) => {\n      const componentDynamicAttrs = componentsDynamicAttrs[componentSelector];\n      if (componentDynamicAttrs) {\n        const { attributes } = componentDynamicAttrs;\n        if (attributes && Object.keys(attributes).length) {\n          configMap[componentSelector] = attributes;\n        }\n      }\n    });\n  }\n\n  // collect components that needs configuration from DOM\n  Object.keys(configMap).forEach((componentsSelector) => {\n    baseEle.querySelectorAll(componentsSelector).forEach((comp) => {\n      const config = configMap[componentsSelector];\n\n      Object.keys(config).forEach((attr) => {\n        let value = config[attr];\n\n        if (typeof value !== 'string') {\n          try {\n            value = JSON.stringify(value);\n          } catch (e) {\n            logger.error(\n              `Could not stringify value \"${value}\" for \"${attr}\"`,\n              e.message,\n            );\n            value = '';\n          }\n        }\n\n        comp.setAttribute(attr, value);\n      });\n    });\n  });\n};\n\nconst setImageVariable = (\n  rootEle: HTMLElement,\n  name: string,\n  image?: string,\n) => {\n  const imageVarName = (\n    customElements.get(name) as CustomElementConstructor & {\n      cssVarList: Record<string, string>;\n    }\n  )?.cssVarList.url;\n\n  if (image && imageVarName) {\n    rootEle?.style?.setProperty(\n      imageVarName,\n      `url(data:image/jpg;base64,${image})`,\n    );\n  }\n};\n\n/**\n * Update a screen template based on the screen state\n *  - Show/hide error messages\n *  - Replace element templates ({{...}} syntax) with screen state object\n */\nexport const updateTemplateFromScreenState = (\n  baseEle: DocumentFragment,\n  screenState?: ScreenState,\n  componentsConfig?: ComponentsConfig,\n  flowInputs?: Record<string, string>,\n  logger?: { error: (message: string, description: string) => void },\n) => {\n  replaceHrefByDataType(baseEle, 'totp-link', screenState?.totp?.provisionUrl);\n  replaceHrefByDataType(baseEle, 'notp-link', screenState?.notp?.redirectUrl);\n  replaceElementTemplates(baseEle, screenState);\n  setElementConfig(baseEle, componentsConfig, logger);\n  replaceTemplateDynamicAttrValues(baseEle, screenState);\n  setFormConfigValues(baseEle, flowInputs);\n};\n\n/**\n * Update a screen based on a screen state\n *  - Replace values of element inputs with screen state's inputs\n */\nexport const updateScreenFromScreenState = (\n  baseEle: HTMLElement,\n  screenState?: ScreenState,\n) => {\n  replaceElementInputs(baseEle, screenState?.inputs);\n  replaceElementInputs(baseEle, screenState?.form);\n};\n\nexport const setTOTPVariable = (rootEle: HTMLElement, image?: string) => {\n  setImageVariable(rootEle, 'descope-totp-image', image);\n};\n\nexport const setNOTPVariable = (rootEle: HTMLElement, image?: string) => {\n  setImageVariable(rootEle, 'descope-notp-image', image);\n};\n\nexport const setPhoneAutoDetectDefaultCode = (\n  fragment: DocumentFragment,\n  autoDetectCode?: string,\n) => {\n  Array.from(fragment.querySelectorAll('[default-code=\"autoDetect\"]')).forEach(\n    (phoneEle) => {\n      phoneEle.setAttribute('default-code', autoDetectCode);\n    },\n  );\n};\n\nexport const disableWebauthnButtons = (fragment: DocumentFragment) => {\n  const webauthnButtons = fragment.querySelectorAll(\n    `descope-button[${ELEMENT_TYPE_ATTRIBUTE}=\"biometrics\"]`,\n  );\n  webauthnButtons.forEach((button) => button.setAttribute('disabled', 'true'));\n};\n\nexport const getDescopeUiComponentsList = (clone: DocumentFragment) => [\n  ...Array.from(clone.querySelectorAll('*')).reduce<Set<string>>(\n    (acc, el: HTMLElement) =>\n      el.tagName.startsWith('DESCOPE-')\n        ? acc.add(el.tagName.toLocaleLowerCase())\n        : acc,\n    new Set(),\n  ),\n];\n", "const LOCAL_STORAGE_AB_TESTING_KEY = 'dls_ab_testing_id';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const getABTestingKey = (): number => {\n  const abTestingKey = localStorage.getItem(LOCAL_STORAGE_AB_TESTING_KEY);\n  if (!abTestingKey) {\n    const generatedKey = Math.floor(Math.random() * 100 + 1);\n    localStorage.setItem(LOCAL_STORAGE_AB_TESTING_KEY, generatedKey.toString());\n    return generatedKey;\n  }\n  return Number(abTestingKey);\n};\n", "import { ClientCondition, ConditionsMap, Context } from '../types';\n\nconst elseInteractionId = 'ELSE';\n\nconst conditionsMap: ConditionsMap = {\n  'lastAuth.loginId': {\n    'not-empty': (ctx) => !!ctx.loginId || !!ctx.lastAuth?.loginId,\n    empty: (ctx) => !ctx.loginId && !ctx.lastAuth?.loginId,\n  },\n  idpInitiated: {\n    'is-true': (ctx) => !!ctx.code,\n    'is-false': (ctx) => !ctx.code,\n  },\n  externalToken: {\n    'is-true': (ctx) => !!ctx.token,\n    'is-false': (ctx) => !ctx.token,\n  },\n  abTestingKey: {\n    'greater-than': (ctx, predicate: number) =>\n      (ctx.abTestingKey || 0) > predicate,\n    'less-than': (ctx, predicate: number) =>\n      (ctx.abTestingKey || 0) < predicate,\n    'greater-than-or-equal': (ctx, predicate: number) =>\n      (ctx.abTestingKey || 0) >= predicate,\n    'less-than-or-equal': (ctx, predicate: number) =>\n      (ctx.abTestingKey || 0) <= predicate,\n    'in-range': (ctx, predicate: string) => {\n      const [min, max] = predicate\n        ? predicate.split(',').map(Number)\n        : [undefined, undefined];\n      return (\n        (ctx.abTestingKey || 0) >= (min ?? 0) &&\n        (ctx.abTestingKey || 0) <= (max ?? 0)\n      );\n    },\n    'not-in-range': (ctx, predicate: string) => {\n      const [min, max] = predicate\n        ? predicate.split(',').map(Number)\n        : [undefined, undefined];\n      if (\n        min === undefined ||\n        max === undefined ||\n        Number.isNaN(min) ||\n        Number.isNaN(max)\n      ) {\n        // if no range is provided, return true, this is consistent with Descope server behavior\n        return true;\n      }\n      return (ctx.abTestingKey || 0) < min || (ctx.abTestingKey || 0) > max;\n    },\n    'devised-by': (ctx, predicate: string) => {\n      const predicateNum = Number(predicate);\n      if (Number.isNaN(predicateNum)) {\n        return false;\n      }\n      return (ctx.abTestingKey || 0) % predicateNum === 0;\n    },\n  },\n};\n\nexport const calculateCondition = (\n  condition: ClientCondition,\n  ctx: Context,\n) => {\n  const checkFunc = conditionsMap[condition?.key]?.[condition.operator];\n  if (!checkFunc) {\n    return {};\n  }\n  const conditionResult = checkFunc(ctx, condition.predicate)\n    ? condition.met\n    : condition.unmet;\n  return {\n    startScreenId: conditionResult?.screenId,\n    startScreenName: conditionResult?.screenName,\n    conditionInteractionId: conditionResult?.interactionId,\n  };\n};\n\n/* eslint-disable import/prefer-default-export */\nexport const calculateConditions = (\n  ctx: Context,\n  conditions?: ClientCondition[],\n) => {\n  const conditionResult = conditions?.find(({ key, operator, predicate }) => {\n    if (key === elseInteractionId) {\n      return true;\n    }\n    const checkFunc = conditionsMap[key]?.[operator];\n    return !!checkFunc?.(ctx, predicate);\n  });\n  return !conditionResult\n    ? {}\n    : {\n        startScreenId: conditionResult.met.screenId,\n        startScreenName: conditionResult.met.screenName,\n        conditionInteractionId: conditionResult.met.interactionId,\n        clientScripts: conditionResult.met.clientScripts,\n        componentsConfig: conditionResult.met.componentsConfig,\n      };\n};\n", "import {\n  DESCOPE_LAST_AUTH_LOCAL_STORAGE_KEY,\n  IS_LOCAL_STORAGE,\n} from '../constants';\nimport { NextFnReturnPromiseValue } from '../types';\n\nexport function getLastAuth(loginId: string) {\n  const lastAuth = {};\n  try {\n    Object.assign(\n      lastAuth,\n      JSON.parse(localStorage.getItem(DESCOPE_LAST_AUTH_LOCAL_STORAGE_KEY)),\n    );\n  } catch (e) {\n    /* empty */\n  }\n\n  if (!(lastAuth as any)?.loginId && !loginId) {\n    return {};\n  }\n  return lastAuth;\n}\n\n// save last auth to local storage\nexport function setLastAuth(\n  lastAuth: NextFnReturnPromiseValue['data']['lastAuth'],\n  forceLoginId?: boolean,\n) {\n  if (!lastAuth?.authMethod) {\n    return;\n  }\n  if (forceLoginId && !(lastAuth as any)?.loginId) {\n    return;\n  }\n  if (IS_LOCAL_STORAGE) {\n    localStorage.setItem(\n      DESCOPE_LAST_AUTH_LOCAL_STORAGE_KEY,\n      JSON.stringify(lastAuth),\n    );\n  }\n}\n", "const flattenFormObject = (obj: any, prefix = '') =>\n  Object.keys(obj).reduce((res, el) => {\n    if (Array.isArray(obj[el])) {\n      return {\n        ...res,\n        [el]: {\n          value: obj[el].map((item: any) =>\n            typeof item === 'object' && item !== null\n              ? flattenFormObject(item)\n              : item,\n          ),\n        },\n      };\n    }\n    if (typeof obj[el] === 'object' && obj[el] !== null && !obj[el]?.value) {\n      return { ...res, ...flattenFormObject(obj[el], `${prefix + el}.`) };\n    }\n    const v = typeof obj[el] === 'object' ? obj[el] : { value: obj[el] };\n    const fl = { ...res, [prefix + el]: v, [`form.${prefix}${el}`]: v };\n    if (el === 'displayName') {\n      return { ...fl, [`${prefix}fullName`]: v, [`form.${prefix}fullName`]: v };\n    }\n    return fl;\n  }, []);\n\nexport const transformFlowInputFormData = (formData: string) => {\n  try {\n    return flattenFormObject(JSON.parse(formData));\n  } catch (e) {\n    return {};\n  }\n};\n\nexport const extractNestedAttribute = (\n  formData: Record<string, string | Record<string, string> | string[]>,\n  attr: string,\n) =>\n  Object.fromEntries(\n    Object.entries(formData).map(([name, values]) => [name, values[attr]]),\n  );\n", "/* eslint-disable import/prefer-default-export */\nimport { createSingletonMixin } from '@descope/sdk-helpers';\nimport { isChromium } from '../helpers';\n\nexport const formMountMixin = createSingletonMixin(\n  <T extends CustomElementConstructor>(superclass: T) =>\n    class FormMountMixin extends superclass {\n      #shouldMountInFormEle() {\n        const wc = this.shadowRoot.host;\n        return !wc.closest('form') && isChromium();\n      }\n\n      // we want to make sure the web-component is wrapped with on outer form element\n      // this is needed in order to support webauthn conditional UI (which currently supported only in Chrome when input is inside a web-component)\n      // for more info see here: https://github.com/descope/etc/issues/733\n      #handleOuterForm() {\n        const wc = this.shadowRoot.host;\n        const form = document.createElement('form');\n        form.style.width = '100%';\n        form.style.height = '100%';\n        wc.parentElement.appendChild(form);\n        form.appendChild(wc);\n      }\n\n      connectedCallback() {\n        if (this.#shouldMountInFormEle()) {\n          this.#handleOuterForm();\n        }\n        super.connectedCallback?.();\n      }\n    },\n);\n", "import { compose } from '@descope/sdk-helpers';\n// eslint-disable-next-line import/no-duplicates\nimport { staticResourcesMixin } from '@descope/sdk-mixins/static-resources-mixin';\n// eslint-disable-next-line import/no-duplicates\nimport { themeMixin } from '@descope/sdk-mixins/theme-mixin';\n// eslint-disable-next-line import/no-duplicates\nimport { injectStyleMixin } from '@descope/sdk-mixins/inject-style-mixin';\nimport createSdk from '@descope/web-js-sdk';\nimport {\n  CONFIG_FILENAME,\n  ELEMENTS_TO_IGNORE_ENTER_KEY_ON,\n  FETCH_EXCEPTION_ERROR_CODE,\n  PREV_VER_ASSETS_FOLDER,\n} from '../constants';\nimport {\n  camelCase,\n  clearRunIdsFromUrl,\n  fetchContent,\n  getContentUrl,\n  getRunIdsFromUrl,\n  handleUrlParams,\n  State,\n} from '../helpers';\nimport {\n  extractNestedAttribute,\n  transformFlowInputFormData,\n} from '../helpers/flowInputs';\nimport { IsChanged } from '../helpers/state';\nimport { formMountMixin } from '../mixins';\nimport {\n  AutoFocusOptions,\n  DebuggerMessage,\n  DebugState,\n  DescopeUI,\n  FlowConfig,\n  FlowState,\n  FlowStateUpdateFn,\n  FlowStatus,\n  ProjectConfiguration,\n  SdkConfig,\n} from '../types';\n\n// this is replaced in build time\ndeclare const BUILD_VERSION: string;\n\nconst BaseClass = compose(\n  themeMixin,\n  staticResourcesMixin,\n  formMountMixin,\n  injectStyleMixin,\n)(HTMLElement);\n\n// this base class is responsible for WC initialization\nclass BaseDescopeWc extends BaseClass {\n  static get observedAttributes() {\n    return [\n      'project-id',\n      'flow-id',\n      'base-url',\n      'tenant',\n      'locale',\n      'debug',\n      'storage-prefix',\n      'preview',\n      'redirect-url',\n      'auto-focus',\n      'store-last-authenticated-user',\n      'refresh-cookie-name',\n      'keep-last-authenticated-user-after-logout',\n      'validate-on-blur',\n      'style-id',\n    ];\n  }\n\n  // this is a way for extending the sdk config from outside\n  static sdkConfigOverrides: Partial<SdkConfig> = {\n    baseHeaders: {\n      'x-descope-sdk-name': 'web-component',\n      'x-descope-sdk-version': BUILD_VERSION,\n    },\n  };\n\n  #init = false;\n\n  flowStatus: FlowStatus = 'initial';\n\n  loggerWrapper = {\n    error: (message: string, description = '') => {\n      this.logger.error(message, description, new Error());\n      this.#updateDebuggerMessages(message, description);\n    },\n    warn: (message: string, description = '') => {\n      this.logger.warn(message, description);\n    },\n    info: (message: string, description = '', state: any = {}) => {\n      this.logger.info(message, description, state);\n    },\n    debug: (message: string, description = '') => {\n      this.logger.debug(message, description);\n    },\n  };\n\n  #flowState = new State<FlowState>();\n\n  #debugState = new State<DebugState>();\n\n  #componentsContext = {};\n\n  getComponentsContext = () => this.#componentsContext;\n\n  nextRequestStatus = new State<{ isLoading: boolean }>({ isLoading: false });\n\n  rootElement: HTMLDivElement;\n\n  contentRootElement: HTMLDivElement;\n\n  slotElement: HTMLSlotElement;\n\n  #debuggerEle: HTMLElement & {\n    updateData: (data: DebuggerMessage | DebuggerMessage[]) => void;\n  };\n\n  #eventsCbRefs = {\n    popstate: this.#syncStateIdFromUrl.bind(this),\n    componentsContext: this.#handleComponentsContext.bind(this),\n  };\n\n  sdk: ReturnType<typeof createSdk>;\n\n  #updateExecState: FlowStateUpdateFn;\n\n  descopeUI: Promise<DescopeUI>;\n\n  constructor(updateExecState: FlowStateUpdateFn) {\n    super();\n    this.#updateExecState = updateExecState;\n\n    this.#initShadowDom();\n  }\n\n  #loadInitStyle() {\n    this.injectStyle(`\n    :host {\n\t\t\twidth: 100%;\n      display: block;\n\t\t}\n\n\t\t#root {\n\t\t\theight: 100%;\n      display: flex;\n      flex-direction: column;\n\t\t}\n\n    #content-root {\n      all: initial;\n      transition: opacity 200ms ease-in-out;\n    }\n\n\t\t#root[data-theme] {\n\t\t\tbackground-color: transparent;\n\t\t}\n\n\t\t.fade-out {\n\t\t\topacity: 0.1!important;\n\t\t}\n\n    .hidden {\n      display: none;\n    }\n    `);\n  }\n\n  #initShadowDom() {\n    this.#loadInitStyle();\n    this.slotElement = document.createElement('slot');\n    this.slotElement.classList.add('hidden');\n    this.rootElement.appendChild(this.slotElement);\n  }\n\n  get flowId() {\n    return this.getAttribute('flow-id');\n  }\n\n  get client() {\n    try {\n      return (JSON.parse(this.getAttribute('client')) || {}) as Record<\n        string,\n        any\n      >;\n    } catch (e) {\n      return {};\n    }\n  }\n\n  get tenantId() {\n    return this.getAttribute('tenant') || undefined;\n  }\n\n  get redirectUrl() {\n    return this.getAttribute('redirect-url') || undefined;\n  }\n\n  get debug() {\n    return this.getAttribute('debug') === 'true';\n  }\n\n  get locale() {\n    return this.getAttribute('locale') || undefined;\n  }\n\n  get autoFocus(): AutoFocusOptions {\n    const res = this.getAttribute('auto-focus') ?? 'true';\n    if (res === 'skipFirstScreen') {\n      return res;\n    }\n    return res === 'true';\n  }\n\n  get validateOnBlur() {\n    return this.getAttribute('validate-on-blur') === 'true';\n  }\n\n  get storeLastAuthenticatedUser() {\n    const res = this.getAttribute('store-last-authenticated-user') ?? 'true';\n    return res === 'true';\n  }\n\n  get refreshCookieName() {\n    return this.getAttribute('refresh-cookie-name') || '';\n  }\n\n  get keepLastAuthenticatedUserAfterLogout() {\n    const res = this.getAttribute('keep-last-authenticated-user-after-logout');\n    return res === 'true';\n  }\n\n  get storagePrefix() {\n    return this.getAttribute('storage-prefix') || '';\n  }\n\n  get preview() {\n    return !!this.getAttribute('preview');\n  }\n\n  get formConfig() {\n    return transformFlowInputFormData(this.form);\n  }\n\n  get form() {\n    return this.getAttribute('form');\n  }\n\n  get formConfigValues() {\n    return extractNestedAttribute(this.formConfig, 'value');\n  }\n\n  get outboundAppId() {\n    return this.getAttribute('outbound-app-id');\n  }\n\n  get outboundAppScopes() {\n    try {\n      const scopes = JSON.parse(this.getAttribute('outbound-app-scopes'));\n      if (!scopes) return null;\n      return scopes;\n    } catch (err) {\n      return null;\n    }\n  }\n\n  #validateAttrs() {\n    const optionalAttributes = [\n      'base-url',\n      'tenant',\n      'locale',\n      'debug',\n      'redirect-url',\n      'auto-focus',\n      'store-last-authenticated-user',\n      'refresh-cookie-name',\n      'keep-last-authenticated-user-after-logout',\n      'preview',\n      'storage-prefix',\n      'form',\n      'client',\n      'validate-on-blur',\n      'style-id',\n      'outbound-app-id',\n      'outbound-app-scopes',\n    ];\n\n    BaseDescopeWc.observedAttributes.forEach((attr: string) => {\n      if (!optionalAttributes.includes(attr) && !this[camelCase(attr)])\n        throw Error(`${attr} cannot be empty`);\n    });\n  }\n\n  #syncStateIdFromUrl() {\n    const { stepId, executionId } = getRunIdsFromUrl(this.flowId);\n    this.#flowState.update({ stepId, executionId });\n  }\n\n  #createSdk(projectId: string, baseUrl: string) {\n    this.sdk = createSdk({\n      // Use persist tokens options in order to add existing tokens in outgoing requests (if they exists)\n      persistTokens: true,\n      preview: this.preview,\n      storagePrefix: this.storagePrefix,\n      storeLastAuthenticatedUser: this.storeLastAuthenticatedUser,\n      keepLastAuthenticatedUserAfterLogout:\n        this.keepLastAuthenticatedUserAfterLogout,\n      refreshCookieName: this.refreshCookieName,\n      ...BaseDescopeWc.sdkConfigOverrides,\n      projectId,\n      baseUrl,\n    });\n\n    // we are wrapping the next & start function so we can indicate the request status\n    ['start', 'next'].forEach((key) => {\n      const origFn = this.sdk.flow[key];\n\n      this.sdk.flow[key] = async (...args: Parameters<typeof origFn>) => {\n        try {\n          const resp = await origFn(...args);\n          return resp;\n        } catch (e) {\n          // return a generic error object in case of an error\n          return {\n            error: {\n              errorCode: FETCH_EXCEPTION_ERROR_CODE,\n              errorDescription: e.toString(),\n            },\n          };\n        }\n      };\n    });\n  }\n\n  async #onFlowChange(\n    currentState: FlowState,\n    _prevState: FlowState,\n    isChanged: IsChanged<FlowState>,\n  ) {\n    const { projectId, baseUrl } = currentState;\n\n    const shouldCreateSdkInstance =\n      isChanged('projectId') || isChanged('baseUrl');\n\n    if (shouldCreateSdkInstance) {\n      if (!projectId) return;\n      // Initialize the sdk when got a new project id\n      this.#createSdk(projectId, baseUrl);\n    }\n\n    // update runtime state\n    this.#updateExecState(currentState);\n  }\n\n  async #getIsFlowsVersionMismatch() {\n    const config = await this.getConfig();\n\n    return (\n      'isMissingConfig' in config &&\n      config.isMissingConfig &&\n      (await this.#isPrevVerConfig())\n    );\n  }\n\n  // we are not using fetchStaticResource here\n  // because we do not want to use the fallbacks mechanism\n  async #isPrevVerConfig() {\n    const prevVerConfigUrl = getContentUrl({\n      projectId: this.projectId,\n      filename: CONFIG_FILENAME,\n      assetsFolder: PREV_VER_ASSETS_FOLDER,\n      baseUrl: this.baseStaticUrl,\n    });\n    try {\n      await fetchContent(prevVerConfigUrl, 'json');\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  getConfig = async () => (await this.config) || { isMissingConfig: true };\n\n  #handleComponentsContext(e: CustomEvent) {\n    this.#componentsContext = { ...this.#componentsContext, ...e.detail };\n  }\n\n  get isRestartOnError() {\n    return this.getAttribute('restart-on-error') === 'true';\n  }\n\n  async getExecutionContext() {\n    const config = await this.getConfig();\n    return 'executionContext' in config ? config.executionContext : undefined;\n  }\n\n  #disableDebugger() {\n    this.#debuggerEle?.remove();\n    this.#debuggerEle = null;\n  }\n\n  async #handleDebugMode({ isDebug }) {\n    if (isDebug) {\n      this.#debuggerEle = document.createElement(\n        'descope-debugger',\n      ) as HTMLElement & {\n        updateData: (data: DebuggerMessage | DebuggerMessage[]) => void;\n      };\n\n      Object.assign(this.#debuggerEle.style, {\n        position: 'fixed',\n        top: '0',\n        right: '0',\n        height: '100vh',\n        width: '100vw',\n        pointerEvents: 'none',\n        zIndex: 99999,\n      });\n\n      // we are importing the debugger dynamically so we won't load it when it's not needed\n      await import('../debugger-wc');\n\n      document.body.appendChild(this.#debuggerEle);\n    } else {\n      this.#disableDebugger();\n    }\n  }\n\n  #updateDebuggerMessages(title: string, description: string) {\n    if (title && this.debug)\n      this.#debuggerEle?.updateData({ title, description });\n  }\n\n  async getProjectConfig(): Promise<ProjectConfiguration> {\n    const config = await this.getConfig();\n    return 'projectConfig' in config ? config.projectConfig : undefined;\n  }\n\n  async getFlowConfig(): Promise<FlowConfig> {\n    const projectConfig = await this.getProjectConfig();\n\n    const flowConfig =\n      projectConfig?.flows?.[this.flowId] || ({} as FlowConfig);\n    flowConfig.version ??= 0;\n    return flowConfig;\n  }\n\n  async getTargetLocales() {\n    const flowConfig = await this.getFlowConfig();\n    return (flowConfig?.targetLocales || []).map((locale: string) =>\n      locale.toLowerCase(),\n    );\n  }\n\n  #handleKeyPress() {\n    // we want to simulate submit when the user presses Enter\n    this.rootElement.onkeydown = (e) => {\n      // we do not want to submit the form if the focus is on a link element\n      const isLinkEleFocused =\n        !!this.shadowRoot.activeElement?.getAttribute('href');\n      const isIgnoredElementFocused = ELEMENTS_TO_IGNORE_ENTER_KEY_ON.includes(\n        this.shadowRoot.activeElement?.localName ?? '',\n      );\n\n      if (e.key !== 'Enter' || isLinkEleFocused || isIgnoredElementFocused)\n        return;\n\n      e.preventDefault();\n      const buttons: NodeListOf<HTMLButtonElement> =\n        this.rootElement.querySelectorAll('descope-button');\n\n      // in case there is a single button on the page, click on it\n      if (\n        buttons.length === 1 &&\n        buttons[0].getAttribute('auto-submit') !== 'false'\n      ) {\n        buttons[0].click();\n        return;\n      }\n\n      const autoSubmitButtons = Array.from(buttons).filter(\n        (button) => button.getAttribute('auto-submit') === 'true',\n      );\n      if (autoSubmitButtons.length === 1) {\n        autoSubmitButtons[0].click();\n        return;\n      }\n\n      const genericButtons = Array.from(buttons).filter(\n        (button) => button.getAttribute('data-type') === 'button',\n      );\n\n      // in case there is a single \"generic\" button on the page, click on it\n      if (genericButtons.length === 1) {\n        if (genericButtons[0].getAttribute('auto-submit') !== 'false') {\n          genericButtons[0].click();\n        }\n      } else if (genericButtons.length === 0) {\n        const ssoButtons = Array.from(buttons).filter(\n          (button) => button.getAttribute('data-type') === 'sso',\n        );\n\n        // in case there is a single \"sso\" button on the page, click on it\n        if (ssoButtons.length === 1) {\n          if (ssoButtons[0].getAttribute('auto-submit') !== 'false') {\n            ssoButtons[0].click();\n          }\n        }\n      }\n    };\n  }\n\n  async getComponentsVersion() {\n    const config = await this.getConfig();\n    const version =\n      'projectConfig' in config ? config.projectConfig?.componentsVersion : {};\n\n    if (version) return version;\n\n    this.logger.error('Did not get components version, using latest version');\n\n    return 'latest';\n  }\n\n  static descopeUI: any;\n\n  async init() {\n    this.flowStatus = 'loading';\n    ['ready', 'error', 'success'].forEach((status: FlowStatus) =>\n      this.addEventListener(status, () => {\n        this.flowStatus = status;\n      }),\n    );\n\n    await super.init?.();\n    this.#debugState.subscribe(this.#handleDebugMode.bind(this));\n    this.#debugState.update({ isDebug: this.debug });\n\n    this.#validateAttrs();\n\n    if (await this.#getIsFlowsVersionMismatch()) {\n      this.loggerWrapper.error(\n        'This SDK version does not support your flows version',\n        'Make sure to upgrade your flows to the latest version or use an older SDK version',\n      );\n\n      return;\n    }\n\n    const config = await this.getConfig();\n    if ('isMissingConfig' in config && config.isMissingConfig) {\n      this.loggerWrapper.error(\n        'Cannot get config file',\n        'Make sure that your projectId & flowId are correct',\n      );\n\n      return;\n    }\n\n    this.#handleKeyPress();\n\n    const {\n      executionId,\n      stepId,\n      token,\n      code,\n      isPopup,\n      exchangeError,\n      redirectAuthCallbackUrl,\n      redirectAuthBackupCallbackUri,\n      redirectAuthCodeChallenge,\n      redirectAuthInitiator,\n      ssoQueryParams,\n    } = handleUrlParams(this.flowId, this.loggerWrapper);\n\n    // we want to update the state when user clicks on back in the browser\n    window.addEventListener('popstate', this.#eventsCbRefs.popstate);\n\n    // adding event to listen to events coming from components (e.g. recaptcha risk token) that want to add data to the context\n    // this data will be sent to the server on the next request\n    window.addEventListener(\n      'components-context',\n      this.#eventsCbRefs.componentsContext,\n    );\n\n    this.#flowState.subscribe(this.#onFlowChange.bind(this));\n\n    this.#flowState.update({\n      projectId: this.projectId,\n      flowId: this.flowId,\n      baseUrl: this.baseUrl,\n      tenant: this.tenantId,\n      redirectUrl: this.redirectUrl,\n      locale: this.locale,\n      stepId,\n      executionId,\n      token,\n      code,\n      isPopup,\n      exchangeError,\n      redirectAuthCallbackUrl,\n      redirectAuthBackupCallbackUri,\n      redirectAuthCodeChallenge,\n      redirectAuthInitiator,\n      ...ssoQueryParams,\n    });\n\n    this.#init = true;\n  }\n\n  disconnectedCallback() {\n    this.#flowState.unsubscribeAll();\n    this.#debugState.unsubscribeAll();\n    this.#disableDebugger();\n    window.removeEventListener('popstate', this.#eventsCbRefs.popstate);\n    window.removeEventListener(\n      'components-context',\n      this.#eventsCbRefs.componentsContext,\n    );\n  }\n\n  attributeChangedCallback(\n    attrName: string,\n    oldValue: string,\n    newValue: string,\n  ) {\n    if (!this.shadowRoot.isConnected || !this.#init) return;\n\n    if (\n      oldValue !== newValue &&\n      BaseDescopeWc.observedAttributes.includes(attrName)\n    ) {\n      this.#validateAttrs();\n\n      const isInitialRun = oldValue === null;\n\n      this.#flowState.update(({ stepId, executionId }) => {\n        let newStepId = stepId;\n        let newExecutionId = executionId;\n\n        // If not initial run and we got a new project/flow, we want to restart the step\n        if (!isInitialRun) {\n          newExecutionId = null;\n          newStepId = null;\n          clearRunIdsFromUrl();\n        }\n\n        return {\n          [camelCase(attrName)]: newValue,\n          stepId: newStepId,\n          executionId: newExecutionId,\n        };\n      });\n\n      this.#debugState.update({ isDebug: this.debug });\n    }\n  }\n}\n\nexport default BaseDescopeWc;\n", "import {\n  clearFingerprintData,\n  ensureFingerprintIds,\n} from '@descope/web-js-sdk';\nimport {\n  CUSTOM_INTERACTIONS,\n  DESCOPE_ATTRIBUTE_EXCLUDE_FIELD,\n  DESCOPE_ATTRIBUTE_EXCLUDE_NEXT_BUTTON,\n  ELEMENT_TYPE_ATTRIBUTE,\n  FETCH_ERROR_RESPONSE_ERROR_CODE,\n  FETCH_EXCEPTION_ERROR_CODE,\n  FLOW_REQUESTED_IS_IN_OLD_VERSION_ERROR_CODE,\n  FLOW_TIMED_OUT_ERROR_CODE,\n  POLLING_STATUS_NOT_FOUND_ERROR_CODE,\n  RESPONSE_ACTIONS,\n  SDK_SCRIPTS_LOAD_TIMEOUT,\n  URL_CODE_PARAM_NAME,\n  URL_RUN_IDS_PARAM_NAME,\n  URL_TOKEN_PARAM_NAME,\n} from '../constants';\nimport {\n  clearPreviousExternalInputs,\n  getAnimationDirection,\n  getElementDescopeAttributes,\n  getFirstNonEmptyValue,\n  getScriptResultPath,\n  getUserLocale,\n  handleAutoFocus,\n  handleReportValidityOnBlur,\n  injectSamlIdpForm,\n  isConditionalLoginSupported,\n  leadingDebounce,\n  openCenteredPopup,\n  setTOTPVariable,\n  showFirstScreenOnExecutionInit,\n  State,\n  submitForm,\n  timeoutPromise,\n  transformScreenInputs,\n  transformStepStateForCustomScreen,\n  updateScreenFromScreenState,\n  updateTemplateFromScreenState,\n  withMemCache,\n} from '../helpers';\nimport { getABTestingKey } from '../helpers/abTestingKey';\nimport { calculateCondition, calculateConditions } from '../helpers/conditions';\nimport { getLastAuth, setLastAuth } from '../helpers/lastAuth';\nimport { IsChanged } from '../helpers/state';\nimport {\n  disableWebauthnButtons,\n  replaceElementMessage,\n  setCssVars,\n  setNOTPVariable,\n  setPhoneAutoDetectDefaultCode,\n} from '../helpers/templates';\nimport {\n  ClientScript,\n  ComponentsConfig,\n  CustomScreenState,\n  FlowState,\n  NextFn,\n  NextFnReturnPromiseValue,\n  ScriptElement,\n  ScriptModule,\n  SdkConfig,\n  StepState,\n} from '../types';\nimport BaseDescopeWc from './BaseDescopeWc';\n\n// this class is responsible for WC flow execution\nclass DescopeWc extends BaseDescopeWc {\n  errorTransformer:\n    | ((error: { text: string; type: string }) => string)\n    | undefined;\n\n  static set sdkConfigOverrides(config: Partial<SdkConfig>) {\n    BaseDescopeWc.sdkConfigOverrides = config;\n  }\n\n  static get sdkConfigOverrides() {\n    return BaseDescopeWc.sdkConfigOverrides;\n  }\n\n  flowState: State<FlowState>;\n\n  stepState = new State<StepState>({} as StepState);\n\n  #pollingTimeout: NodeJS.Timeout;\n\n  #conditionalUiAbortController = null;\n\n  onScreenUpdate?: (\n    screenName: string,\n    context: CustomScreenState,\n    next: StepState['next'],\n    ref: typeof this,\n  ) => boolean | Promise<boolean>;\n\n  #sdkScriptsLoading = null;\n\n  constructor() {\n    const flowState = new State<FlowState>({\n      deferredRedirect: false,\n    } as FlowState);\n\n    super(flowState.update.bind(flowState));\n\n    this.flowState = flowState;\n  }\n\n  #eventsCbRefs = {\n    visibilitychange: this.#syncStateWithVisibility.bind(this),\n  };\n\n  #syncStateWithVisibility() {\n    if (!document.hidden) {\n      // Defer the update a bit, it won't work otherwise\n      setTimeout(() => {\n        // Trigger state update that will redirect and pending deferred redirection\n        this.flowState.update({ deferredRedirect: false });\n      }, 300);\n    }\n  }\n\n  // Native bridge version native / web syncing - change this when\n  // a major change happens that requires some form of compatibility\n  bridgeVersion = 2;\n\n  // A collection of callbacks that are maintained as part of the web-component state\n  // when it's connected to a native bridge.\n  nativeCallbacks: {\n    // This callback will be initialized once a 'nativeBridge' action is\n    // received from a start or next request. It will then be called by\n    // nativeResume if appropriate as part of handling some payload types.\n    complete?: (input: Record<string, any>) => Promise<void>;\n\n    // This callback is invoked when 'nativeResume' is called with a 'beforeScreen'\n    // type, so the native bridge can resolve the async call to 'nativeBeforeScreen'\n    // and tell the web-component whether it wants a custom screen or not.\n    screenResolve?: (value: boolean) => void;\n\n    // This callback it kept until 'nativeResume' is called with a 'resumeScreen'\n    // type, so the native bridge can submit the result of a custom screen.\n    screenNext?: StepState['next'];\n  } = {};\n\n  // Notifies the native bridge that we're about to show a new screen and lets it\n  // override it by showing a native screen instead.\n  async #nativeBeforeScreen(\n    screen: string,\n    context: CustomScreenState,\n    next: StepState['next'],\n  ): Promise<boolean> {\n    if (this.nativeOptions?.bridgeVersion >= 2) {\n      return new Promise<boolean>((resolve) => {\n        this.nativeCallbacks.screenNext = next;\n        this.nativeCallbacks.screenResolve = resolve;\n        this.#nativeNotifyBridge('beforeScreen', { screen, context });\n      });\n    }\n    return false;\n  }\n\n  // Notifies the native bridge that a screen has been shown.\n  #nativeAfterScreen(screen: string) {\n    if (this.nativeOptions?.bridgeVersion >= 2) {\n      this.#nativeNotifyBridge('afterScreen', { screen });\n    }\n  }\n\n  // This callback is called by the native layer to resume a flow\n  // that's waiting for some external trigger, such as a magic link\n  // redirect or native OAuth authentication.\n  nativeResume(type: string, payload: string) {\n    const response = JSON.parse(payload);\n    if (type === 'oauthWeb' || type === 'sso') {\n      let { exchangeCode } = response;\n      if (!exchangeCode) {\n        const url = new URL(response.url);\n        exchangeCode = url.searchParams?.get(URL_CODE_PARAM_NAME);\n      }\n      this.nativeCallbacks.complete?.({\n        exchangeCode,\n        idpInitiated: true,\n      });\n    } else if (type === 'magicLink') {\n      const url = new URL(response.url);\n      const token = url.searchParams.get(URL_TOKEN_PARAM_NAME);\n      const stepId = url.searchParams\n        .get(URL_RUN_IDS_PARAM_NAME)\n        .split('_')\n        .pop();\n      this.#resetPollingTimeout();\n      // update the state along with cancelling out the action to abort the polling mechanism\n      this.flowState.update({ token, stepId, action: undefined });\n    } else if (type === 'beforeScreen') {\n      const { screenResolve } = this.nativeCallbacks;\n      this.nativeCallbacks.screenResolve = null;\n      const { override } = response;\n      if (!override) {\n        this.nativeCallbacks.screenNext = null;\n      }\n      screenResolve?.(override);\n    } else if (type === 'resumeScreen') {\n      const { interactionId, form } = response;\n      const { screenNext } = this.nativeCallbacks;\n      this.nativeCallbacks.screenNext = null;\n      screenNext?.(interactionId, form);\n    } else {\n      // expected: 'oauthNative', 'webauthnCreate', 'webauthnGet', 'failure'\n      this.nativeCallbacks.complete?.(response);\n    }\n  }\n\n  // Utility function for sending a generic message to the native bridge.\n  #nativeNotifyBridge(type: string, payload: Record<string, any>) {\n    this.#dispatch('bridge', {\n      type,\n      payload,\n    });\n  }\n\n  // This object is set by the native layer to\n  // inject native specific data into the 'flowState'.\n  nativeOptions?: {\n    platform: 'ios' | 'android';\n    bridgeVersion: number;\n    oauthProvider?: string;\n    oauthRedirect?: string;\n    magicLinkRedirect?: string;\n    ssoRedirect?: string;\n    origin?: string;\n  };\n\n  /**\n   * Get all loaded SDK script modules from elements with data-script-id attribute\n   * @returns Array of script modules that can be refreshed before form submission\n   */\n  loadSdkScriptsModules() {\n    // Get all modules from the data-script-id elements\n    const scriptElements = this.shadowRoot.querySelectorAll(\n      'div[data-script-id]',\n    );\n\n    // Filter out elements without moduleRes property\n    return Array.from(scriptElements)\n      .map((el) => (el as ScriptElement).moduleRes)\n      .filter((module): module is ScriptModule => !!module);\n  }\n\n  loadSdkScripts(scripts: ClientScript[]) {\n    if (!scripts?.length) {\n      return null;\n    }\n\n    const createScriptCallback =\n      (\n        script: {\n          id: string;\n          resultKey?: string;\n        },\n        resolve: (value: any) => void,\n      ) =>\n      (result: string) => {\n        this.dispatchEvent(\n          // update the context with the result, under the `resultKey` key\n          new CustomEvent('components-context', {\n            detail: {\n              // we store the result with script.id prefix to avoid conflicts with other scripts results\n              // that may have the same key\n              [getScriptResultPath(script.id, script.resultKey)]: result,\n            },\n            bubbles: true,\n            composed: true,\n          }),\n        );\n        resolve(script.id);\n      };\n\n    this.loggerWrapper.debug(\n      `Preparing to load scripts: ${scripts.map((s) => s.id).join(', ')}`,\n    );\n    const promises = Promise.all(\n      scripts?.map(async (script) => {\n        const scriptElement = this.shadowRoot.querySelector(\n          `[data-script-id=\"${script.id}\"]`,\n        ) as ScriptElement;\n        if (scriptElement) {\n          this.loggerWrapper.debug('Script already loaded', script.id);\n          const { moduleRes } = scriptElement;\n          moduleRes?.start?.();\n          return moduleRes;\n        }\n        await this.injectNpmLib(\n          '@descope/flow-scripts',\n          '1.0.11', // currently using a fixed version when loading scripts\n          `dist/${script.id}.js`,\n        );\n        const module = globalThis.descope?.[script.id];\n        return new Promise((resolve, reject) => {\n          try {\n            const moduleRes = module(\n              script.initArgs as any,\n              { baseUrl: this.baseUrl, ref: this },\n              createScriptCallback(script, resolve),\n            );\n            if (moduleRes) {\n              const newScriptElement = document.createElement(\n                'div',\n              ) as ScriptElement;\n              newScriptElement.setAttribute('data-script-id', script.id);\n              newScriptElement.moduleRes = moduleRes;\n              this.shadowRoot.appendChild(newScriptElement);\n              this.nextRequestStatus.subscribe(() => {\n                this.loggerWrapper.debug('Unloading script', script.id);\n                moduleRes.stop?.();\n              });\n            }\n          } catch (e) {\n            reject(e);\n          }\n        });\n      }),\n    );\n\n    const toPromise = new Promise((resolve) => {\n      setTimeout(() => {\n        this.loggerWrapper.warn('SDK scripts loading timeout');\n        resolve(true);\n      }, SDK_SCRIPTS_LOAD_TIMEOUT);\n    });\n\n    return Promise.race([promises, toPromise]);\n  }\n\n  get isDismissScreenErrorOnInput() {\n    return this.getAttribute('dismiss-screen-error-on-input') === 'true';\n  }\n\n  #handleGlobalErrors({\n    errorText,\n    errorType,\n  }: {\n    errorText: string;\n    errorType: string;\n  }) {\n    const updateGlobalError = () => {\n      let transformedErrorText = errorText;\n      try {\n        transformedErrorText =\n          this.errorTransformer?.({\n            text: errorText,\n            type: errorType,\n          }) || errorText;\n      } catch (e) {\n        this.loggerWrapper.error('Error transforming error message', e.message);\n      }\n      replaceElementMessage(\n        this.contentRootElement,\n        'error-message',\n        transformedErrorText,\n      );\n    };\n\n    // we do not know if the page is going to be updated or not,\n    // so we are updating the error message component before and after the screen update\n    this.addEventListener('screen-updated', updateGlobalError, { once: true });\n    updateGlobalError();\n  }\n\n  init() {\n    // when running in a webview (mobile SDK) we want to lazy init the component\n    // so the mobile SDK will be able to register all the necessary callbacks\n    // before the component will start loading the flow\n    if (!(window as any).descopeBridge) {\n      // eslint-disable-next-line no-underscore-dangle\n      return this._init();\n    }\n    // eslint-disable-next-line no-underscore-dangle\n    (this as any).lazyInit = this._init;\n    return undefined;\n  }\n\n  #subscribeStepState() {\n    this.stepState?.subscribe(\n      this.onStepChange.bind(this),\n      ({\n        screenState: { errorText, errorType, ...screenState } = {},\n        ...state\n      }) => ({ ...state, screenState }),\n    );\n\n    this.stepState?.subscribe(\n      this.#handleGlobalErrors.bind(this),\n      (state) => ({\n        errorText: state?.screenState?.errorText,\n        errorType: state?.screenState?.errorType,\n      }),\n      { forceUpdate: true },\n    );\n\n    this.stepState?.subscribe(\n      this.#handlePasscodeCleanup.bind(this),\n      (state) => ({\n        errorText: state?.screenState?.errorText,\n        errorType: state?.screenState?.errorType,\n      }),\n      { forceUpdate: true },\n    );\n  }\n\n  // because the screen does not re-render,\n  // in case of an OTP code error, we want to clean the invalid code\n  #handlePasscodeCleanup({ errorText, errorType }) {\n    if (errorType || errorText) {\n      this.contentRootElement\n        .querySelectorAll('descope-passcode[data-auto-submit=\"true\"]')\n        .forEach((passcodeEle: HTMLInputElement) => {\n          // currently we do not have a way to reset the code value\n          // so we are clearing the inputs\n          passcodeEle.shadowRoot\n            .querySelectorAll('descope-text-field[data-id]')\n            .forEach((input: HTMLInputElement) => {\n              // eslint-disable-next-line no-param-reassign\n              input.value = '';\n            });\n        });\n\n      // this should not be handled here, it's a workaround for focusing the code component on error\n      // maybe it's about time to refactor this sdk\n      handleAutoFocus(this.contentRootElement, this.autoFocus, false);\n    }\n  }\n\n  // eslint-disable-next-line no-underscore-dangle\n  async _init() {\n    if (this.shadowRoot.isConnected) {\n      this.flowState?.subscribe(this.onFlowChange.bind(this));\n      this.#subscribeStepState();\n\n      window.addEventListener(\n        'visibilitychange',\n        this.#eventsCbRefs.visibilitychange,\n      );\n    }\n    await super.init?.();\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    this.flowState.unsubscribeAll();\n    this.stepState.unsubscribeAll();\n\n    this.#conditionalUiAbortController?.abort();\n    this.#conditionalUiAbortController = null;\n\n    window.removeEventListener(\n      'visibilitychange',\n      this.#eventsCbRefs.visibilitychange,\n    );\n  }\n\n  async getHtmlFilenameWithLocale(locale: string, screenId: string) {\n    let filenameWithLocale: string;\n    const userLocale = getUserLocale(locale); // use provided locals, otherwise use browser locale\n    const targetLocales = await this.getTargetLocales();\n\n    if (targetLocales.includes(userLocale.locale)) {\n      filenameWithLocale = `${screenId}-${userLocale.locale}.html`;\n    } else if (targetLocales.includes(userLocale.fallback)) {\n      filenameWithLocale = `${screenId}-${userLocale.fallback}.html`;\n    }\n    return filenameWithLocale;\n  }\n\n  async getPageContent(htmlFilename: string, htmlLocaleFilename: string) {\n    if (htmlLocaleFilename) {\n      // try first locale url, if can't get for some reason, fallback to the original html url (the one without locale)\n      try {\n        const { body } = await this.fetchStaticResource(\n          htmlLocaleFilename,\n          'text',\n        );\n        return body;\n      } catch (ex) {\n        this.loggerWrapper.error(\n          `Failed to fetch flow page from ${htmlLocaleFilename}. Fallback to url ${htmlFilename}`,\n          ex,\n        );\n      }\n    }\n\n    try {\n      const { body } = await this.fetchStaticResource(htmlFilename, 'text');\n      return body;\n    } catch (ex) {\n      this.loggerWrapper.error(`Failed to fetch flow page`, ex.message);\n    }\n    return null;\n  }\n\n  async #handleFlowRestart() {\n    this.loggerWrapper.debug('Trying to restart the flow');\n    const prevCompVersion = await this.getComponentsVersion();\n    this.reset();\n    const compVersion = await this.getComponentsVersion();\n\n    if (prevCompVersion === compVersion) {\n      this.loggerWrapper.debug(\n        'Components version was not changed, restarting flow',\n      );\n      this.flowState.update({\n        stepId: null,\n        executionId: null,\n      });\n    } else {\n      this.loggerWrapper.error(\n        'Components version mismatch, please reload the page',\n      );\n    }\n  }\n\n  #isPrevCustomScreen = false;\n\n  async #handleCustomScreen(stepStateUpdate: Partial<StepState>) {\n    const { next, stepName, ...state } = {\n      ...this.stepState.current,\n      ...stepStateUpdate,\n    };\n\n    const context = transformStepStateForCustomScreen(state);\n\n    // first check if we're running in a native bridge and the app wants a custom screen\n    let isCustomScreen = await this.#nativeBeforeScreen(\n      stepName,\n      context,\n      next,\n    );\n    if (!isCustomScreen) {\n      // now check any custom callbacks that have been set on the component itself\n      isCustomScreen = Boolean(\n        await this.onScreenUpdate?.(stepName, context, next, this),\n      );\n    }\n\n    const isFirstScreen = !this.stepState.current.htmlFilename;\n    this.#toggleScreenVisibility(isCustomScreen);\n\n    // if we switched from a custom screen to a regular screen or the other way around\n    if (this.#isPrevCustomScreen !== isCustomScreen) {\n      const [currentMode, prevMode] = ['flow', 'custom'].sort(() =>\n        isCustomScreen ? -1 : 1,\n      );\n      this.loggerWrapper.debug(\n        `Switching from ${prevMode} screen to ${currentMode} screen`,\n      );\n\n      this.#isPrevCustomScreen = isCustomScreen;\n\n      if (isCustomScreen) {\n        // we are unsubscribing all the listeners because we are going to render a custom screen\n        // and we do not want that onStepChange will be called\n        this.stepState.unsubscribeAll();\n      } else {\n        // we are subscribing to the step state again because we are going to render a regular screen\n        this.#subscribeStepState();\n      }\n    }\n\n    if (isCustomScreen) {\n      this.loggerWrapper.debug('Showing a custom screen');\n      this.#dispatchPageEvents({\n        isFirstScreen,\n        isCustomScreen,\n        stepName: stepStateUpdate.stepName,\n      });\n    }\n\n    this.stepState.forceUpdate = isCustomScreen;\n  }\n\n  async onFlowChange(\n    currentState: FlowState,\n    prevState: FlowState,\n    isChanged: IsChanged<FlowState>,\n  ) {\n    const {\n      projectId,\n      flowId,\n      tenant,\n      stepId,\n      executionId,\n      action,\n      screenId,\n      screenState,\n      redirectTo,\n      redirectIsPopup,\n      redirectUrl,\n      token,\n      code,\n      isPopup,\n      exchangeError,\n      webauthnTransactionId,\n      webauthnOptions,\n      redirectAuthCodeChallenge,\n      redirectAuthCallbackUrl,\n      redirectAuthBackupCallbackUri,\n      redirectAuthInitiator,\n      locale,\n      samlIdpResponseUrl,\n      samlIdpResponseSamlResponse,\n      samlIdpResponseRelayState,\n      nativeResponseType,\n      nativePayload,\n      reqTimestamp,\n      ...ssoQueryParams\n    } = currentState;\n\n    let startScreenId: string;\n    let startScreenName: string;\n    let conditionInteractionId: string;\n    const abTestingKey = getABTestingKey();\n    const { outboundAppId } = this;\n    const { outboundAppScopes } = this;\n    const loginId = this.sdk.getLastUserLoginId();\n    const flowConfig = await this.getFlowConfig();\n    const projectConfig = await this.getProjectConfig();\n    const flowVersions = Object.entries(projectConfig.flows || {}).reduce(\n      // pass also current versions for all flows, it may be used as a part of the current flow\n      (acc, [key, value]) => {\n        acc[key] = value.version;\n        return acc;\n      },\n      {} as Record<string, number>,\n    );\n    const redirectAuth =\n      redirectAuthCallbackUrl && redirectAuthCodeChallenge\n        ? {\n            callbackUrl: redirectAuthCallbackUrl,\n            codeChallenge: redirectAuthCodeChallenge,\n            backupCallbackUri: redirectAuthBackupCallbackUri,\n          }\n        : undefined;\n    const nativeOptions = this.nativeOptions\n      ? {\n          platform: this.nativeOptions.platform,\n          bridgeVersion: this.nativeOptions.bridgeVersion,\n          oauthProvider: this.nativeOptions.oauthProvider,\n          oauthRedirect: this.nativeOptions.oauthRedirect,\n          magicLinkRedirect: this.nativeOptions.magicLinkRedirect,\n          ssoRedirect: this.nativeOptions.ssoRedirect,\n        }\n      : undefined;\n    let conditionComponentsConfig: ComponentsConfig = {};\n\n    // if there is no execution id we should start a new flow\n    if (!executionId) {\n      const clientScripts = [\n        ...(flowConfig.clientScripts || []),\n        ...(flowConfig.sdkScripts || []),\n      ];\n\n      if (flowConfig.conditions) {\n        let conditionScripts = [];\n        ({\n          startScreenId,\n          conditionInteractionId,\n          startScreenName,\n          clientScripts: conditionScripts,\n          componentsConfig: conditionComponentsConfig,\n        } = calculateConditions(\n          {\n            loginId,\n            code,\n            token,\n            abTestingKey,\n            lastAuth: getLastAuth(loginId),\n          },\n          flowConfig.conditions,\n        ));\n        clientScripts.push(...(conditionScripts || []));\n      } else if (flowConfig.condition) {\n        ({ startScreenId, conditionInteractionId } = calculateCondition(\n          flowConfig.condition,\n          {\n            loginId,\n            code,\n            token,\n            abTestingKey,\n            lastAuth: getLastAuth(loginId),\n          },\n        ));\n      } else {\n        startScreenName = flowConfig.startScreenName;\n        startScreenId = flowConfig.startScreenId;\n      }\n\n      this.#sdkScriptsLoading = this.loadSdkScripts(clientScripts);\n      if (flowConfig.fingerprintEnabled && flowConfig.fingerprintKey) {\n        await ensureFingerprintIds(flowConfig.fingerprintKey, this.baseUrl);\n      } else {\n        clearFingerprintData();\n      }\n\n      // As an optimization - we want to show the first screen if it is possible\n      if (!showFirstScreenOnExecutionInit(startScreenId, ssoQueryParams)) {\n        const sdkResp = await this.sdk.flow.start(\n          flowId,\n          {\n            tenant,\n            redirectAuth,\n            ...ssoQueryParams,\n            client: this.client,\n            ...(redirectUrl && { redirectUrl }),\n            lastAuth: getLastAuth(loginId),\n            abTestingKey,\n            locale: getUserLocale(locale).locale,\n            nativeOptions,\n            outboundAppId,\n            outboundAppScopes,\n          },\n          conditionInteractionId,\n          '',\n          projectConfig.componentsVersion,\n          flowVersions,\n          {\n            ...this.formConfigValues,\n            ...(code ? { exchangeCode: code, idpInitiated: true } : {}),\n            ...(ssoQueryParams.descopeIdpInitiated && { idpInitiated: true }),\n            ...(token ? { token } : {}),\n            ...(ssoQueryParams.oidcLoginHint\n              ? { externalId: ssoQueryParams.oidcLoginHint }\n              : {}),\n          },\n        );\n\n        this.#handleSdkResponse(sdkResp);\n        if (sdkResp?.data?.status !== 'completed') {\n          this.flowState.update({ code: undefined, token: undefined });\n        }\n        return;\n      }\n    }\n\n    this.loggerWrapper.debug(\n      'Before popup postmessage send',\n      JSON.stringify({\n        isPopup,\n        code,\n        exchangeError,\n        isCodeChanged: isChanged('code'),\n        isExchangeErrorChanged: isChanged('exchangeError'),\n      }),\n    );\n    if (\n      isPopup &&\n      ((isChanged('code') && code) ||\n        (isChanged('exchangeError') && exchangeError))\n    ) {\n      this.loggerWrapper.debug('Creating popup channel', executionId);\n      const channel = new BroadcastChannel(executionId);\n      this.loggerWrapper.debug(\n        'Posting message to popup channel',\n        JSON.stringify({ code, exchangeError }),\n      );\n      channel.postMessage({\n        data: { code, exchangeError },\n        action: 'code',\n      });\n      this.loggerWrapper.debug('Popup channel message posted, closing channel');\n      channel.close();\n      this.loggerWrapper.debug('Popup channel closed, closing window');\n      window.close();\n      return;\n    }\n\n    // if there is a descope url param on the url its because the user clicked on email link or redirected back to the app\n    // we should call next with the params\n    if (\n      executionId &&\n      ((isChanged('token') && token) ||\n        (isChanged('code') && code) ||\n        (isChanged('exchangeError') && exchangeError))\n    ) {\n      const sdkResp = await this.sdk.flow.next(\n        executionId,\n        stepId,\n        CUSTOM_INTERACTIONS.submit,\n        flowConfig.version,\n        projectConfig.componentsVersion,\n        {\n          token,\n          exchangeCode: code,\n          exchangeError,\n        },\n      );\n      this.#handleSdkResponse(sdkResp);\n      this.flowState.update({\n        token: undefined,\n        code: undefined,\n        exchangeError: undefined,\n      }); // should happen after handleSdkResponse, otherwise we will not have screen id on the next run\n      return;\n    }\n\n    const samlProps = [\n      'samlIdpResponseUrl',\n      'samlIdpResponseSamlResponse',\n      'samlIdpResponseRelayState',\n    ];\n    if (\n      action === RESPONSE_ACTIONS.loadForm &&\n      samlProps.some((samlProp) => isChanged(samlProp))\n    ) {\n      if (!samlIdpResponseUrl || !samlIdpResponseSamlResponse) {\n        this.loggerWrapper.error('Did not get saml idp params data to load');\n        return;\n      }\n\n      // Handle SAML IDP end of flow (\"redirect like\" by using html form with hidden params)\n      injectSamlIdpForm(\n        samlIdpResponseUrl,\n        samlIdpResponseSamlResponse,\n        samlIdpResponseRelayState || '',\n        submitForm,\n      ); // will redirect us to the saml acs url\n    }\n\n    if (\n      action === RESPONSE_ACTIONS.redirect &&\n      (isChanged('redirectTo') || isChanged('deferredRedirect'))\n    ) {\n      if (!redirectTo) {\n        this.loggerWrapper.error('Did not get redirect url');\n        return;\n      }\n      if (redirectAuthInitiator === 'android' && document.hidden) {\n        // on android native flows, defer redirects until in foreground\n        this.flowState.update({\n          deferredRedirect: true,\n        });\n        return;\n      }\n\n      this.loggerWrapper.debug(`Redirect is popup ${redirectIsPopup}`);\n      if (redirectIsPopup) {\n        // this width is below the breakpoint of most providers\n        this.loggerWrapper.debug('Opening redirect in popup');\n        const popup = openCenteredPopup(redirectTo, '?', 598, 700);\n\n        this.loggerWrapper.debug('Creating broadcast channel');\n        const channel = new BroadcastChannel(executionId);\n\n        this.loggerWrapper.debug('Starting popup closed detection');\n        // detect when the popup is closed\n        const intervalId = setInterval(() => {\n          if (popup.closed) {\n            this.loggerWrapper.debug(\n              'Popup closed, dispatching popupclosed event and clearing interval',\n            );\n            clearInterval(intervalId);\n\n            // we are dispatching a popupclosed event so we can handle it on other parts of the code (loading state management)\n            this.#dispatch('popupclosed', {});\n\n            this.loggerWrapper.debug('Closing channel');\n            channel.close();\n          }\n        }, 1000);\n\n        this.loggerWrapper.debug('Listening for postMessage on channel');\n        const onPostMessage = (event: MessageEvent) => {\n          this.loggerWrapper.debug(\n            'Received postMessage on channel',\n            JSON.stringify(event),\n          );\n          this.loggerWrapper.debug(\n            'Comparing origins',\n            JSON.stringify({\n              eventOrigin: event.origin,\n              windowLocationOrigin: window.location.origin,\n            }),\n          );\n          if (event.origin !== window.location.origin) return;\n\n          this.loggerWrapper.debug(\n            'PostMessage origin matches, processing message',\n          );\n          // eslint-disable-next-line @typescript-eslint/no-shadow\n          const { action, data } = event.data;\n          this.loggerWrapper.debug(\n            `PostMessage action: ${action}, data: ${JSON.stringify(data)}`,\n          );\n          if (action === 'code') {\n            this.loggerWrapper.debug(\n              'Updating flow state with code and exchangeError',\n            );\n            this.flowState.update({\n              code: data.code,\n              exchangeError: data.exchangeError,\n            });\n          }\n        };\n\n        channel.onmessage = onPostMessage;\n      } else {\n        this.handleRedirect(redirectTo);\n      }\n      return;\n    }\n\n    if (\n      action === RESPONSE_ACTIONS.webauthnCreate ||\n      action === RESPONSE_ACTIONS.webauthnGet\n    ) {\n      if (!webauthnTransactionId || !webauthnOptions) {\n        this.loggerWrapper.error(\n          'Did not get webauthn transaction id or options',\n        );\n        return;\n      }\n\n      this.#conditionalUiAbortController?.abort();\n      this.#conditionalUiAbortController = null;\n\n      let response: string;\n      let failure: string;\n\n      try {\n        response =\n          action === RESPONSE_ACTIONS.webauthnCreate\n            ? await this.sdk.webauthn.helpers.create(webauthnOptions)\n            : await this.sdk.webauthn.helpers.get(webauthnOptions);\n      } catch (e) {\n        if (e.name === 'InvalidStateError') {\n          // currently returned in Chrome when trying to register a WebAuthn device\n          // that's already registered for the user\n          this.loggerWrapper.warn('WebAuthn operation failed', e.message);\n        } else if (e.name !== 'NotAllowedError') {\n          // shouldn't happen in normal usage ('AbortError' is only when setting an AbortController)\n          this.loggerWrapper.error(e.message);\n        }\n        failure = e.name;\n      }\n      // Call next with the transactionId and the response or failure\n      const sdkResp = await this.sdk.flow.next(\n        executionId,\n        stepId,\n        CUSTOM_INTERACTIONS.submit,\n        flowConfig.version,\n        projectConfig.componentsVersion,\n        {\n          transactionId: webauthnTransactionId,\n          response,\n          failure,\n        },\n      );\n      this.#handleSdkResponse(sdkResp);\n    }\n\n    if (action === RESPONSE_ACTIONS.nativeBridge) {\n      // prepare a callback with the current flow state, and accept\n      // the input to be a JSON, passed down from the native layer.\n      // this function will be called as an async response to a 'bridge' event\n      this.nativeCallbacks.complete = async (input: Record<string, any>) => {\n        const sdkResp = await this.sdk.flow.next(\n          executionId,\n          stepId,\n          CUSTOM_INTERACTIONS.submit,\n          flowConfig.version,\n          projectConfig.componentsVersion,\n          input,\n        );\n        this.#handleSdkResponse(sdkResp);\n      };\n      // notify the bridging native layer that a native action is requested via 'bridge' event.\n      // the response will be in the form of calling the 'nativeCallbacks.complete' callback via\n      // the 'nativeResume' function.\n      this.#nativeNotifyBridge(nativeResponseType, nativePayload);\n      return;\n    }\n\n    if (isChanged('action')) {\n      this.#handlePollingResponse(\n        executionId,\n        stepId,\n        flowConfig.version,\n        projectConfig.componentsVersion,\n      );\n    }\n\n    // if there is no screen id (possibly due to page refresh or no screen flow) we should get it from the server\n    if (!screenId && !startScreenId) {\n      this.loggerWrapper.warn('No screen was found to show');\n      return;\n    }\n\n    const readyScreenId = startScreenId || screenId;\n\n    // get the right filename according to the user locale and flow target locales\n    const filenameWithLocale: string = await this.getHtmlFilenameWithLocale(\n      locale,\n      readyScreenId,\n    );\n\n    const {\n      oidcLoginHint,\n      oidcPrompt,\n      oidcErrorRedirectUri,\n      oidcResource,\n      samlIdpUsername,\n    } = ssoQueryParams;\n\n    // generate step state update data\n    const stepStateUpdate: Partial<StepState> = {\n      direction: getAnimationDirection(stepId, prevState.stepId),\n      screenState: {\n        ...screenState,\n        form: {\n          ...this.formConfigValues,\n          ...screenState?.form,\n        },\n        lastAuth: {\n          loginId,\n          name: this.sdk.getLastUserDisplayName() || loginId,\n        },\n        componentsConfig: {\n          ...flowConfig.componentsConfig,\n          ...conditionComponentsConfig,\n          ...screenState?.componentsConfig,\n        },\n      },\n      htmlFilename: `${readyScreenId}.html`,\n      htmlLocaleFilename: filenameWithLocale,\n      screenId: readyScreenId,\n      stepName: currentState.stepName || startScreenName,\n      samlIdpUsername,\n      oidcLoginHint,\n      oidcPrompt,\n      oidcErrorRedirectUri,\n      oidcResource,\n      action,\n    };\n\n    const lastAuth = getLastAuth(loginId);\n\n    // If there is a start screen id, next action should start the flow\n    // But if any of the sso params are not empty, this optimization doesn't happen\n    // because Descope may decide not to show the first screen (in cases like a user is already logged in) - this is more relevant for SSO scenarios\n    if (showFirstScreenOnExecutionInit(startScreenId, ssoQueryParams)) {\n      stepStateUpdate.next = async (interactionId, inputs) => {\n        const res = await this.sdk.flow.start(\n          flowId,\n          {\n            tenant,\n            redirectAuth,\n            ...ssoQueryParams,\n            lastAuth,\n            preview: this.preview,\n            abTestingKey,\n            client: this.client,\n            ...(redirectUrl && { redirectUrl }),\n            locale: getUserLocale(locale).locale,\n            nativeOptions,\n            outboundAppId,\n            outboundAppScopes,\n          },\n          conditionInteractionId,\n          interactionId,\n          projectConfig.componentsVersion,\n          flowVersions,\n          {\n            ...this.formConfigValues,\n            ...transformScreenInputs(inputs),\n            ...(code && { exchangeCode: code, idpInitiated: true }),\n            ...(ssoQueryParams.descopeIdpInitiated && { idpInitiated: true }),\n            ...(token && { token }),\n          },\n        );\n\n        this.#handleSdkResponse(res);\n\n        return res;\n      };\n    } else if (\n      isChanged('projectId') ||\n      isChanged('baseUrl') ||\n      isChanged('executionId') ||\n      isChanged('stepId')\n    ) {\n      stepStateUpdate.next = async (interactionId, input) => {\n        const res = await this.sdk.flow.next(\n          executionId,\n          stepId,\n          interactionId,\n          flowConfig.version,\n          projectConfig.componentsVersion,\n          transformScreenInputs(input),\n        );\n\n        this.#handleSdkResponse(res);\n\n        return res;\n      };\n    }\n\n    this.loggerWrapper.debug('Got a screen with id', stepStateUpdate.screenId);\n\n    await this.#handleCustomScreen(stepStateUpdate);\n\n    // update step state\n    this.stepState.update(stepStateUpdate);\n  }\n\n  // this function is used to handle redirects in the web component\n  // it can be overridden by the user to handle redirects in a custom way\n  // eslint-disable-next-line class-methods-use-this\n  handleRedirect = (redirectTo: string) => {\n    window.location.assign(redirectTo);\n  };\n\n  #toggleScreenVisibility = (isCustomScreen: boolean) => {\n    const toggleVisibility = () => {\n      this.contentRootElement.classList.toggle('hidden', isCustomScreen);\n      this.slotElement.classList.toggle('hidden', !isCustomScreen);\n      if (isCustomScreen) {\n        this.contentRootElement.innerHTML = '';\n      }\n    };\n\n    if (isCustomScreen && this.contentRootElement.hasChildNodes()) {\n      this.#handlePageSwitchTransition(toggleVisibility);\n    } else {\n      toggleVisibility();\n    }\n  };\n\n  #handlePageSwitchTransition(onTransitionEnd: () => void) {\n    const transitionEndHandler = () => {\n      this.loggerWrapper.debug('page switch transition end');\n      this.contentRootElement.classList.remove('fade-out');\n      onTransitionEnd();\n    };\n    this.contentRootElement.addEventListener(\n      'transitionend',\n      transitionEndHandler,\n      { once: true },\n    );\n    this.loggerWrapper.debug('page switch transition start');\n    this.contentRootElement.classList.add('fade-out');\n  }\n\n  #handlePollingResponse = (\n    executionId: string,\n    stepId: string,\n    flowVersion: number,\n    componentsVersion: string,\n    rescheduled: boolean = false,\n  ) => {\n    const pollingDefaultDelay = 2000;\n    const pollingDefaultTimeout = 6000;\n    const pollingThrottleDelay = 500;\n    const pollingThrottleThreshold = 500;\n    const pollingThrottleTimeout = 1000;\n    const stopOnErrors = [\n      FLOW_TIMED_OUT_ERROR_CODE,\n      POLLING_STATUS_NOT_FOUND_ERROR_CODE,\n    ];\n\n    if (this.flowState.current.action === RESPONSE_ACTIONS.poll) {\n      // schedule next polling request for 2 seconds from now\n      this.logger.debug('polling - Scheduling polling request');\n      const scheduledAt = Date.now();\n      const delay = rescheduled ? pollingThrottleDelay : pollingDefaultDelay;\n      this.#pollingTimeout = setTimeout(async () => {\n        this.logger.debug('polling - Calling next');\n\n        const nextCall = this.sdk.flow.next(\n          executionId,\n          stepId,\n          CUSTOM_INTERACTIONS.polling,\n          flowVersion,\n          componentsVersion,\n          {},\n        );\n\n        // Try to detect whether the tab is being throttled when running in a mobile browser, specifically on iOS.\n        // We check whether the tab seems to hidden and the polling callback was called much later than expected,\n        // in which case we allow a much shorter timeout for the polling request. The reschedule check ensures\n        // this cannot happen twice consecutively.\n        const throttled =\n          document.hidden &&\n          !rescheduled &&\n          Date.now() - scheduledAt > delay + pollingThrottleThreshold;\n        if (throttled) {\n          this.logger.debug('polling - The polling seems to be throttled');\n        }\n\n        let sdkResp: Awaited<typeof nextCall>;\n        try {\n          const timeout = throttled\n            ? pollingThrottleTimeout\n            : pollingDefaultTimeout;\n          sdkResp = await timeoutPromise(timeout, nextCall);\n        } catch (err) {\n          this.logger.warn(\n            `polling - The ${\n              throttled ? 'throttled fetch' : 'fetch'\n            } call timed out or was aborted`,\n          );\n          this.#handlePollingResponse(\n            executionId,\n            stepId,\n            flowVersion,\n            componentsVersion,\n            throttled,\n          );\n          return;\n        }\n\n        if (sdkResp?.error?.errorCode === FETCH_EXCEPTION_ERROR_CODE) {\n          this.logger.debug(\n            'polling - Got a generic error due to exception in fetch call',\n          );\n          this.#handlePollingResponse(\n            executionId,\n            stepId,\n            flowVersion,\n            componentsVersion,\n          );\n          return;\n        }\n\n        this.logger.debug('polling - Got a response');\n        if (sdkResp?.error) {\n          this.logger.debug(\n            'polling - Response has an error',\n            JSON.stringify(sdkResp.error, null, 4),\n          );\n        }\n\n        // we want to stop polling for some errors\n        if (\n          !sdkResp?.error?.errorCode ||\n          !stopOnErrors.includes(sdkResp.error.errorCode)\n        ) {\n          // will poll again if needed\n          // handleSdkResponse will clear the timeout if the response action is not polling response\n          this.#handlePollingResponse(\n            executionId,\n            stepId,\n            flowVersion,\n            componentsVersion,\n          );\n        } else {\n          this.logger.debug('polling - Stopping polling due to error');\n        }\n\n        this.#handleSdkResponse(sdkResp);\n      }, delay);\n    }\n  };\n\n  #resetPollingTimeout = () => {\n    clearTimeout(this.#pollingTimeout);\n    this.#pollingTimeout = null;\n  };\n\n  #handleSdkResponse = (sdkResp: NextFnReturnPromiseValue) => {\n    if (!sdkResp?.ok) {\n      const defaultMessage = sdkResp?.response?.url;\n      const defaultDescription = `${sdkResp?.response?.status} - ${sdkResp?.response?.statusText}`;\n\n      this.#dispatch(\n        'error',\n        sdkResp?.error || {\n          errorCode: FETCH_ERROR_RESPONSE_ERROR_CODE,\n          errorDescription: defaultDescription,\n          errorMessage: defaultMessage,\n        },\n      );\n\n      this.loggerWrapper.error(\n        sdkResp?.error?.errorDescription || defaultMessage,\n        sdkResp?.error?.errorMessage || defaultDescription,\n      );\n\n      const errorCode = sdkResp?.error?.errorCode;\n      if (\n        (errorCode === FLOW_REQUESTED_IS_IN_OLD_VERSION_ERROR_CODE ||\n          errorCode === FLOW_TIMED_OUT_ERROR_CODE) &&\n        this.isRestartOnError\n      ) {\n        this.#handleFlowRestart();\n      }\n      return;\n    }\n\n    sdkResp.data?.runnerLogs?.forEach((l) => {\n      const { level, title, log } = l;\n      if (level && this.loggerWrapper[level]) {\n        this.loggerWrapper[level](title, log);\n      } else {\n        this.loggerWrapper.info(title, log);\n      }\n    });\n    const errorText = sdkResp.data?.screen?.state?.errorText;\n    if (sdkResp.data?.error) {\n      this.loggerWrapper.error(\n        `[${sdkResp.data.error.code}]: ${sdkResp.data.error.description}`,\n        `${errorText ? `${errorText} - ` : ''}${sdkResp.data.error.message}`,\n      );\n    } else if (errorText) {\n      this.loggerWrapper.error(errorText);\n    }\n\n    const { status, authInfo, lastAuth, action, openInNewTabUrl } =\n      sdkResp.data;\n\n    if (action !== RESPONSE_ACTIONS.poll) {\n      this.#resetPollingTimeout();\n    }\n\n    if (status === 'completed') {\n      if (this.storeLastAuthenticatedUser) {\n        setLastAuth(lastAuth);\n      }\n      this.#dispatch('success', authInfo);\n      return;\n    } else {\n      if (this.storeLastAuthenticatedUser) {\n        setLastAuth(lastAuth, true);\n      }\n    }\n\n    if (openInNewTabUrl) {\n      window.open(openInNewTabUrl, '_blank');\n      // we should not return here so the screen will be rendered\n    }\n\n    const {\n      executionId,\n      stepId,\n      stepName,\n      screen,\n      redirect,\n      webauthn,\n      error,\n      samlIdpResponse,\n      nativeResponse,\n    } = sdkResp.data;\n\n    // this is used as a cache buster\n    // we want to make sure the onScreenUpdate will be called after every next call even if the state was not changed\n    const reqTimestamp = Date.now();\n\n    if (action === RESPONSE_ACTIONS.poll) {\n      // We only update action because the polling response action does not return extra information\n      this.flowState.update({\n        action,\n        reqTimestamp,\n      });\n      return;\n    }\n\n    this.loggerWrapper.info(\n      `Step \"${stepName || `#${stepId}`}\" is ${status}`,\n      '',\n      {\n        screen,\n        status,\n        stepId,\n        stepName,\n        action,\n        error,\n      },\n    );\n\n    if (screen.state?.clientScripts) {\n      this.#sdkScriptsLoading = this.loadSdkScripts(screen.state.clientScripts);\n    }\n\n    this.flowState.update({\n      stepId,\n      stepName,\n      executionId,\n      action,\n      redirectTo: redirect?.url,\n      redirectIsPopup: redirect?.isPopup,\n      screenId: screen?.id,\n      screenState: screen?.state,\n      webauthnTransactionId: webauthn?.transactionId,\n      webauthnOptions: webauthn?.options,\n      samlIdpResponseUrl: samlIdpResponse?.url,\n      samlIdpResponseSamlResponse: samlIdpResponse?.samlResponse,\n      samlIdpResponseRelayState: samlIdpResponse?.relayState,\n      nativeResponseType: nativeResponse?.type,\n      nativePayload: nativeResponse?.payload,\n      reqTimestamp,\n    });\n  };\n\n  // we want to get the start params only if we don't have it already\n  #getWebauthnConditionalUiStartParams = withMemCache(async () => {\n    try {\n      const startResp = await this.sdk.webauthn.signIn.start(\n        '',\n        window.location.origin,\n      ); // when using conditional UI we need to call start without identifier\n      if (!startResp.ok) {\n        this.loggerWrapper.warn(\n          'Webauthn start failed',\n          startResp?.error?.errorMessage,\n        );\n      }\n      return startResp.data;\n    } catch (err) {\n      this.loggerWrapper.warn('Webauthn start failed', err.message);\n    }\n\n    return undefined;\n  });\n\n  /**\n   * this is needed because Conditional UI does not work on all input names\n   * we need to add a prefix to the input name so it will trigger the autocomplete dialog\n   * but we want to remove it once the user starts typing because we want this field to be sent to the server with the correct name\n   */\n\n  // eslint-disable-next-line class-methods-use-this\n  #handleConditionalUiInput(inputEle: HTMLInputElement) {\n    const ignoreList = ['email'];\n    const origName = inputEle.getAttribute('name');\n\n    if (!ignoreList.includes(origName)) {\n      const conditionalUiSupportName = `user-${origName}`;\n\n      // eslint-disable-next-line no-param-reassign\n      inputEle.setAttribute('name', conditionalUiSupportName);\n\n      inputEle.addEventListener('input', () => {\n        // eslint-disable-next-line no-param-reassign\n        inputEle.setAttribute(\n          'name',\n          inputEle.value ? origName : conditionalUiSupportName,\n        );\n      });\n    }\n  }\n\n  async #handleWebauthnConditionalUi(fragment: DocumentFragment, next: NextFn) {\n    this.#conditionalUiAbortController?.abort();\n\n    const conditionalUiInput = fragment.querySelector(\n      '*[autocomplete=\"webauthn\"]',\n    ) as HTMLInputElement;\n\n    if (conditionalUiInput && (await isConditionalLoginSupported())) {\n      const { options, transactionId } =\n        (await this.#getWebauthnConditionalUiStartParams()) || {};\n\n      if (options && transactionId) {\n        this.#handleConditionalUiInput(conditionalUiInput);\n\n        // we need the abort controller so we can cancel the current webauthn session in case the user clicked on a webauthn button, and we need to start a new session\n        this.#conditionalUiAbortController = new AbortController();\n\n        // we should not wait for this fn, it will call next when the user uses his passkey on the input\n        this.sdk.webauthn.helpers\n          .conditional(options, this.#conditionalUiAbortController)\n          .then(async (response) => {\n            next(conditionalUiInput.id, {\n              transactionId,\n              response,\n            });\n          })\n          .catch((err) => {\n            if (err.name !== 'AbortError') {\n              this.loggerWrapper.error('Conditional login failed', err.message);\n            }\n          });\n      }\n    }\n  }\n\n  #dispatchPageEvents({\n    isFirstScreen,\n    isCustomScreen,\n    stepName,\n  }: {\n    isFirstScreen: boolean;\n    isCustomScreen: boolean;\n    stepName: string;\n  }) {\n    if (isFirstScreen) {\n      // Dispatch when the first page is ready\n      // So user can show a loader until his event is triggered\n      this.#dispatch('ready', {});\n    }\n\n    if (!isCustomScreen) {\n      this.#nativeAfterScreen(stepName);\n    }\n\n    this.#dispatch('page-updated', { screenName: stepName });\n    this.#dispatch('screen-updated', { screenName: stepName });\n  }\n\n  async onStepChange(currentState: StepState, prevState: StepState) {\n    const { htmlFilename, htmlLocaleFilename, direction, next, screenState } =\n      currentState;\n\n    this.loggerWrapper.debug('Rendering a flow screen');\n\n    const stepTemplate = document.createElement('template');\n    stepTemplate.innerHTML = await this.getPageContent(\n      htmlFilename,\n      htmlLocaleFilename,\n    );\n\n    const clone = stepTemplate.content.cloneNode(true) as DocumentFragment;\n\n    const loadDescopeUiComponents = this.loadDescopeUiComponents(stepTemplate);\n\n    // we want to disable the webauthn buttons if it's not supported on the browser\n    if (!this.sdk.webauthn.helpers.isSupported()) {\n      disableWebauthnButtons(clone);\n    } else {\n      await this.#handleWebauthnConditionalUi(clone, next);\n    }\n\n    if (\n      currentState.samlIdpUsername &&\n      !screenState.form?.loginId &&\n      !screenState.form?.email\n    ) {\n      if (!screenState.form) {\n        screenState.form = {};\n      }\n      screenState.form.loginId = currentState.samlIdpUsername;\n      screenState.form.email = currentState.samlIdpUsername;\n    }\n\n    updateTemplateFromScreenState(\n      clone,\n      screenState,\n      screenState.componentsConfig,\n      this.formConfig,\n      this.loggerWrapper,\n    );\n\n    // set the default country code based on the locale value we got\n    const { geo } = await this.getExecutionContext();\n    setPhoneAutoDetectDefaultCode(clone, geo);\n\n    const injectNextPage = async () => {\n      await loadDescopeUiComponents;\n\n      // put the totp and notp variable on the root element, which is the top level 'div' inside the shadowRoot\n      const rootElement = this.contentRootElement;\n      setTOTPVariable(rootElement, screenState?.totp?.image);\n\n      setNOTPVariable(rootElement, screenState?.notp?.image);\n\n      // set dynamic css variables that should be set at runtime\n      setCssVars(rootElement, clone, screenState.cssVars, this.loggerWrapper);\n\n      rootElement.replaceChildren(clone);\n\n      // If before html url was empty, we deduce its the first time a screen is shown\n      const isFirstScreen = !prevState.htmlFilename;\n\n      // we need to wait for all components to render before we can set its value\n      setTimeout(() => {\n        this.#updateExternalInputs();\n\n        if (this.validateOnBlur) {\n          handleReportValidityOnBlur(rootElement);\n        }\n\n        // we need to wait for all components to render before we can set its value\n        updateScreenFromScreenState(rootElement, screenState);\n\n        this.#dispatchPageEvents({\n          isFirstScreen,\n          isCustomScreen: false,\n          stepName: currentState.stepName,\n        });\n\n        handleAutoFocus(rootElement, this.autoFocus, isFirstScreen);\n      });\n\n      this.#hydrate(next);\n\n      const loader = rootElement.querySelector(\n        `[${ELEMENT_TYPE_ATTRIBUTE}=\"polling\"]`,\n      );\n      if (loader) {\n        // Loader component in the screen triggers polling interaction\n        next(CUSTOM_INTERACTIONS.polling, {});\n      }\n    };\n\n    // no animation\n    if (!direction) {\n      injectNextPage();\n      return;\n    }\n\n    this.#handlePageSwitchTransition(injectNextPage);\n  }\n\n  #validateInputs() {\n    let isValid = true;\n    Array.from(this.shadowRoot.querySelectorAll('*[name]'))\n      .reverse()\n      .forEach((input: HTMLInputElement) => {\n        if (input.localName === 'slot') {\n          return;\n        }\n        input.reportValidity?.();\n        if (isValid) {\n          isValid = input.checkValidity?.();\n        }\n      });\n\n    return isValid;\n  }\n\n  getInputs() {\n    return Array.from(\n      this.shadowRoot.querySelectorAll(\n        `*:not(slot)[name]:not([${DESCOPE_ATTRIBUTE_EXCLUDE_FIELD}])`,\n      ),\n    ) as HTMLInputElement[];\n  }\n\n  async #getFormData() {\n    const inputs = this.getInputs();\n\n    // wait for all inputs\n    const values = await Promise.all(\n      inputs.map(async (input) => ({\n        name: input.getAttribute('name'),\n        value: input.value,\n      })),\n    );\n\n    // reduce to object\n    return values.reduce(\n      (acc, val) => ({\n        ...acc,\n        [val.name]: val.value,\n      }),\n      {},\n    );\n  }\n\n  #prevPageShowListener: ((e: PageTransitionEvent) => void) | null = null;\n\n  #handleComponentsLoadingState(submitter: HTMLElement) {\n    const enabledElements = Array.from(\n      this.contentRootElement.querySelectorAll(\n        ':not([disabled]), [disabled=\"false\"]',\n      ),\n    ).filter((ele) => ele !== submitter);\n\n    const restoreComponentsState = async () => {\n      this.loggerWrapper.debug('Restoring components state');\n      this.removeEventListener('popupclosed', restoreComponentsState);\n      submitter.removeAttribute('loading');\n      enabledElements.forEach((ele) => {\n        ele.removeAttribute('disabled');\n      });\n      // if there are client scripts, we want to reload them\n      const flowConfig = await this.getFlowConfig();\n      const clientScripts = [\n        ...(flowConfig.clientScripts || []),\n        ...(flowConfig.sdkScripts || []),\n      ];\n      this.loadSdkScripts(clientScripts);\n    };\n\n    const handleScreenIdUpdates = () => {\n      // we want to remove the previous pageshow listener to avoid multiple listeners\n      window.removeEventListener('pageshow', this.#prevPageShowListener);\n\n      this.#prevPageShowListener = (e) => {\n        if (e.persisted) {\n          this.logger.debug(\n            'Page was loaded from cache, restoring components state',\n          );\n          restoreComponentsState();\n        }\n      };\n      // we want to restore the components state when the page is shown from cache\n      window.addEventListener('pageshow', this.#prevPageShowListener, {\n        once: true,\n      });\n\n      // we want to restore the components state when the screenId is updated\n      const unsubscribeScreenIdUpdates = this.stepState?.subscribe(\n        (screenId, prevScreenId) => {\n          // we want to restore components state only if we stay on the same screen\n          // if we are rendering a new screen, the components state (disabled/loading) will remain until the new screen is rendered\n          if (screenId === prevScreenId) {\n            restoreComponentsState();\n          }\n          this.removeEventListener('popupclosed', restoreComponentsState);\n          this.stepState.unsubscribe(unsubscribeScreenIdUpdates);\n        },\n        (state) => state.screenId,\n        { forceUpdate: true },\n      );\n    };\n\n    // we are listening to the next request status\n    const unsubscribeNextRequestStatus = this.nextRequestStatus.subscribe(\n      ({ isLoading }) => {\n        if (isLoading) {\n          this.addEventListener('popupclosed', restoreComponentsState, {\n            once: true,\n          });\n          // if the next request is loading, we want to set loading state on the submitter, and disable all other enabled elements\n          submitter.setAttribute('loading', 'true');\n          enabledElements.forEach((ele) =>\n            ele.setAttribute('disabled', 'true'),\n          );\n        } else {\n          this.nextRequestStatus.unsubscribe(unsubscribeNextRequestStatus);\n          // when next request is done, we want to listen to screenId updates\n          handleScreenIdUpdates();\n        }\n      },\n    );\n  }\n\n  // handle storing passwords in password managers\n  #handleStoreCredentials(formData = {}) {\n    const idFields = ['externalId', 'email', 'phone'];\n    const passwordFields = ['newPassword', 'password'];\n\n    const id = getFirstNonEmptyValue(formData, idFields);\n    const password = getFirstNonEmptyValue(formData, passwordFields);\n\n    // PasswordCredential not supported in Firefox\n    if (id && password) {\n      try {\n        if (!globalThis.PasswordCredential) {\n          return;\n        }\n        const cred = new globalThis.PasswordCredential({ id, password });\n\n        navigator?.credentials?.store?.(cred);\n      } catch (e) {\n        this.loggerWrapper.error('Could not store credentials', e.message);\n      }\n    }\n  }\n\n  #updateExternalInputs() {\n    // we need to clear external inputs that were created previously, so each screen has only\n    // the slotted inputs it needs\n    clearPreviousExternalInputs();\n\n    const eles = this.contentRootElement.querySelectorAll(\n      '[external-input=\"true\"]',\n    );\n    eles.forEach((ele) => this.#handleExternalInputs(ele));\n  }\n\n  #handleExternalInputs(ele: Element) {\n    if (!ele) {\n      return;\n    }\n\n    const origInputs = ele.querySelectorAll('input');\n\n    origInputs.forEach((inp) => {\n      const targetSlot = inp.getAttribute('slot');\n      const id = `input-${ele.id}-${targetSlot}`;\n\n      const slot = document.createElement('slot');\n      slot.setAttribute('name', id);\n      slot.setAttribute('slot', targetSlot);\n\n      ele.appendChild(slot);\n\n      inp.setAttribute('slot', id);\n      this.appendChild(inp);\n    });\n  }\n\n  // we are wrapping this function with a leading debounce,\n  // to prevent a scenario where we are calling it multiple times\n  // this can caused by focusing on a button and pressing enter\n  // in this case, the button will be clicked, but because we have the auto-submit mechanism\n  // it will submit the form once again and we will end up with 2 identical calls for next\n  #handleSubmit = leadingDebounce(\n    async (submitter: HTMLElement, next: NextFn) => {\n      if (\n        submitter.getAttribute('formnovalidate') === 'true' ||\n        this.#validateInputs()\n      ) {\n        const submitterId = submitter?.getAttribute('id');\n        this.#handleComponentsLoadingState(submitter);\n\n        const formData = await this.#getFormData();\n        const eleDescopeAttrs = getElementDescopeAttributes(submitter);\n\n        this.nextRequestStatus.update({ isLoading: true });\n\n        if (this.#sdkScriptsLoading) {\n          this.loggerWrapper.debug('Waiting for sdk scripts to load');\n          const now = Date.now();\n          await this.#sdkScriptsLoading;\n          this.loggerWrapper.debug(\n            'Sdk scripts loaded for',\n            (Date.now() - now).toString(),\n          );\n        }\n\n        // Get all script modules and refresh them before form submission\n        const sdkScriptsModules = this.loadSdkScriptsModules();\n\n        if (sdkScriptsModules.length > 0) {\n          // Only attempt to refresh modules that actually have a refresh function\n          const refreshPromises = sdkScriptsModules\n            .filter((module) => typeof module.refresh === 'function')\n            .map((module) => module.refresh!());\n\n          if (refreshPromises.length > 0) {\n            // Use timeout to prevent hanging if refresh takes too long\n            await timeoutPromise(\n              SDK_SCRIPTS_LOAD_TIMEOUT,\n              Promise.all(refreshPromises),\n              null,\n            );\n          }\n        }\n\n        const contextArgs = this.getComponentsContext();\n\n        const actionArgs = {\n          ...contextArgs,\n          ...eleDescopeAttrs,\n          ...formData,\n          // 'origin' is required to start webauthn. For now we'll add it to every request.\n          // When running in a native flow in a Android app the webauthn authentication\n          // is performed in the native app, so a custom origin needs to be injected\n          // into the webauthn request data.\n          origin: this.nativeOptions?.origin || window.location.origin,\n        };\n\n        await next(submitterId, actionArgs);\n\n        this.nextRequestStatus.update({ isLoading: false });\n\n        this.#handleStoreCredentials(formData);\n      }\n    },\n  );\n\n  #addPasscodeAutoSubmitListeners(next: NextFn) {\n    this.contentRootElement\n      .querySelectorAll(`descope-passcode[data-auto-submit=\"true\"]`)\n      .forEach((passcode: HTMLInputElement) => {\n        passcode.addEventListener('input', () => {\n          const isValid = passcode.checkValidity?.();\n          if (isValid) {\n            this.#handleSubmit(passcode, next);\n          }\n        });\n      });\n  }\n\n  #hydrate(next: NextFn) {\n    // hydrating the page\n    // Adding event listeners to all buttons without the exclude attribute\n    this.contentRootElement\n      .querySelectorAll(\n        `descope-button:not([${DESCOPE_ATTRIBUTE_EXCLUDE_NEXT_BUTTON}]), [data-type=\"button\"]:not([${DESCOPE_ATTRIBUTE_EXCLUDE_NEXT_BUTTON}]`,\n      )\n      .forEach((button: HTMLButtonElement) => {\n        // eslint-disable-next-line no-param-reassign\n        button.onclick = () => {\n          this.#handleSubmit(button, next);\n        };\n      });\n\n    this.#addPasscodeAutoSubmitListeners(next);\n\n    if (this.isDismissScreenErrorOnInput) {\n      // listen to all input events in order to clear the global error state\n      this.contentRootElement\n        .querySelectorAll(`*[name]:not([${DESCOPE_ATTRIBUTE_EXCLUDE_FIELD}])`)\n        .forEach((ele) => {\n          ele.addEventListener('input', () => {\n            this.stepState.update((state) => ({\n              ...state,\n              screenState: {\n                ...state.screenState,\n                errorText: '',\n                errorType: '',\n              },\n            }));\n          });\n        });\n    }\n  }\n\n  #dispatch(eventName: string, detail: any) {\n    this.dispatchEvent(new CustomEvent(eventName, { detail }));\n  }\n}\n\nexport default DescopeWc;\n", "import DescopeWc from './DescopeWc';\n\nif (!customElements.get('descope-wc')) {\n  customElements.define('descope-wc', DescopeWc);\n} else {\n  // eslint-disable-next-line no-console\n  console.log('descope-wc is already defined');\n}\nexport default DescopeWc;\n\nexport type ILogger = Partial<DescopeWc['logger']>;\n\nexport type { AutoFocusOptions, ThemeOptions } from '../types';\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,IAAMA,KAA6B,CAAC,UAAA;AAApC,IAEaC,KAAwB,CACnCC,IACAC,IACAC,KAAU,OAAA;AAEMF,EAAAA,GAAQG,iBACtB,IAAIC,CAAAA,KAA2BH,EAAAA,IAAAA,EAEzBI,QAASC,CAAAA,OAAAA;AAEfA,IAAAA,GAAIC,cAAcL,IAClBI,GAAIE,UAAUN,KAAU,WAAW,KAAA,EAAO,MAAA;EAAO,CAAA;AACjD;AAdJ,IAsBMO,IAAuB,CAC3BT,IACAU,OAAAA;AAEAC,SAAOC,QAAQF,MAAgB,CAAE,CAAA,EAAEL,QAAQ,CAAA,CAAEQ,IAAMC,EAAAA,MAAAA;AAChCC,UAAMC,KACrBhB,GAAQG,iBACN,WAAWU,EAAAA,WAAeI,CAAAA,IAAAA,CAAAA,EAGrBZ,QAASa,CAAAA,OAAAA;AAEhBA,MAAAA,GAASJ,QAAQA;IAAK,CAAA;EACtB,CAAA;AACF;AApCJ,IA6CMK,KAAY,CAACC,IAA0BC,OAC3CA,GAAKC,MAAM,GAAA,EAAKC,OAAO,CAACC,IAAMC,QAASD,QAAAA,KAAAA,SAAAA,GAAOC,EAAAA,MAAS,IAAIL,EAAAA;AA9C7D,IAsDMM,IAAiB,CACrBC,IACAC,IACAC,OAEAF,GAAKG,QAAQ,cAAc,CAACC,IAAGC,OAC7BH,KACII,GAAed,GAAUS,IAAaI,EAAAA,CAAAA,IACtCb,GAAUS,IAAaI,EAAAA,CAAAA;AA9D/B,IAuGME,IAAwB,CAC5BlC,IACAmC,IACAC,OAAAA;AAEgBpC,EAAAA,GAAQG,iBACtB,IAAIC,CAAAA,KAA2B+B,EAAAA,IAAAA,EAEzB9B,QAASC,CAAAA,OAAAA;AAEfA,IAAAA,GAAI+B,aAAa,QAAQD,EAAAA;EAAa,CAAA;AACtC;AAlHJ,IAsIaE,KAAa,CACxBC,IACAC,IACAC,IACAC,OAAAA;AAMKD,EAAAA,MAIL9B,OAAOgC,KAAKF,EAAAA,EAASpC,QAASuC,CAAAA,OAAAA;AACvBJ,IAAAA,GAAiBK,cAAcD,EAAAA,KAClCF,GAAOI,MACL,oCAAoCF,EAAAA,MACpC,8BAA8BA,EAAAA,qCAAAA;AAGlC,UAAMG,KAEUC,eAAeC,IAAIL,EAAAA;AAE9BG,IAAAA,KAQLpC,OAAOgC,KAAKF,GAAQG,EAAAA,CAAAA,EAAgBvC,QAAS6C,CAAAA,OAAAA;AAAAA,UAAAA;AAC3C,YAAMC,KAAmBV,GAAQG,EAAAA,GAC3BQ,KAAuC,UAA7BC,KAAAN,QAAAA,KAAAA,SAAAA,GAAgBO,eAAAA,WAAaD,KAAAA,SAAAA,GAAAH,EAAAA;AAE7C,UAAA,CAAKE,GAKH,QAAA,KAJAV,GAAOa,KACL,wCAAwCL,EAAAA,OAAgBN,EAAAA,IACxD,uDAAA;AAKJ,YAAM9B,KAAQqC,GAAiBD,EAAAA;AAE/BX,MAAAA,GAAQiB,MAAMC,YAAYL,IAAStC,EAAAA;IAAM,CAAA,IArBzC4B,GAAOa,KACL,sCAAsCX,EAAAA,IACtC,sCAAA;EAoBF,CAAA;AACF;AAvLJ,IA+OMc,IAAmB,CACvBnB,IACA1B,IACA8C,OAAAA;AAAAA,MAAAA,IAAAA;AAEA,QAAMC,KAIL,UAHCP,KAAAL,eAAeC,IAAIpC,EAAAA,MAAAA,WAGpBwC,KAAAA,SAAAA,GAAEC,WAAWO;AAEVF,EAAAA,MAASC,OACG,UAAdE,KAAAvB,QAAAA,KAAAA,SAAAA,GAASiB,UAAAA,WAAKM,MAAAA,GAAEL,YACdG,IACA,6BAA6BD,EAAAA,GAAAA;AAEhC;AA/PH,IAuQaI,IAAgC,CAC3C/D,IACA4B,IACAoC,IACAC,IACAvB,OAAAA;AAAAA,MAAAA,IAAAA;AAEAR,IAAsBlC,IAAS,aAAgC,UAAAkE,KAAnBtC,QAAAA,KAAAA,SAAAA,GAAauC,SAAAA,WAAMd,KAAAA,SAAAA,GAAAjB,YAAAA,GAC/DF,EAAsBlC,IAAS,aAAgC,UAAAoE,KAAnBxC,QAAAA,KAAAA,SAAAA,GAAayC,SAAAA,WAAMP,KAAAA,SAAAA,GAAAQ,WAAAA,IA3MjC,CAC9BtE,IACA4B,OAAAA;AAEgB5B,IAAAA,GAAQG,iBACtB,sEAAA,EAEME,QAASkE,CAAAA,OAAAA;AACf,YAAM1C,KAAiB2C,GAAqBD,GAAME,SAAAA;AAElDF,MAAAA,GAAMhE,cAAcmB,EAClB6C,GAAMhE,aACNqB,IACAC,EAAAA;AAEF,YAAM6C,KAAOH,GAAMI,aAAa,MAAA;AAC5BD,MAAAA,MACFH,GAAMlC,aAAa,QAAQX,EAAegD,IAAM9C,EAAAA,CAAAA;IACjD,CAAA;EACD,GAyLsB5B,IAAS4B,EAAAA,IAtFV,CACvB5B,IACAgE,IACAtB,OAAAA;AAEA,QAAA,CAAKsB,GACH;AAEF,UAAA,EAAMY,wBAAEA,GAAAA,IAAoCZ,IAATa,KAAIC,OAAKd,IAAtC,CAAmC,wBAAA,CAAA,GAEnCe,KAAYpE,OAAOgC,KAAKkC,EAAAA,EAAMtD,OAAO,CAACyD,IAAKpC,QAC/CoC,GAAI,SAASpC,EAAAA,GAAAA,IAAoBiC,GAAKjC,EAAAA,GAC/BoC,KACN,CAAE,CAAA;AAEDJ,IAAAA,MACFjE,OAAOgC,KAAKiC,EAAAA,EAAwBvE,QAAS4E,CAAAA,OAAAA;AAC3C,YAAMC,KAAwBN,GAAuBK,EAAAA;AACrD,UAAIC,IAAuB;AACzB,cAAA,EAAMC,YAAEA,GAAAA,IAAeD;AACnBC,QAAAA,MAAcxE,OAAOgC,KAAKwC,EAAAA,EAAYC,WACxCL,GAAUE,EAAAA,IAAqBE;MAElC;IAAA,CAAA,GAKLxE,OAAOgC,KAAKoC,EAAAA,EAAW1E,QAASgF,CAAAA,OAAAA;AAC9BrF,MAAAA,GAAQG,iBAAiBkF,EAAAA,EAAoBhF,QAASiF,CAAAA,OAAAA;AACpD,cAAMC,KAASR,GAAUM,EAAAA;AAEzB1E,eAAOgC,KAAK4C,EAAAA,EAAQlF,QAASmF,CAAAA,OAAAA;AAC3B,cAAI1E,KAAQyE,GAAOC,EAAAA;AAEnB,cAAqB,YAAA,OAAV1E,GACT,KAAA;AACEA,YAAAA,KAAQ2E,KAAKC,UAAU5E,EAAAA;UACxB,SAAQ6E,IAAAA;AACPjD,YAAAA,GAAOkD,MACL,8BAA8B9E,EAAAA,UAAe0E,EAAAA,KAC7CG,GAAEzF,OAAAA,GAEJY,KAAQ;UACT;AAGHwE,UAAAA,GAAKjD,aAAamD,IAAM1E,EAAAA;QAAM,CAAA;MAC9B,CAAA;IACF,CAAA;EACF,GAqCed,IAASgE,IAAkBtB,EAAAA,IAvLL,CACvC1C,IACA4B,OAAAA;AAEgB5B,IAAAA,GAAQG,iBAAiB,IAAI0F,CAAAA,GAAAA,EACrCxF,QAASC,CAAAA,OAAAA;AACfS,YAAMC,KAAKV,GAAI6E,UAAAA,EAAY9E,QAASmF,CAAAA,OAAAA;AAElCA,QAAAA,GAAK1E,QAAQY,EAAe8D,GAAK1E,OAAOc,EAAAA;MAAY,CAAA;IACpD,CAAA;EACF,GA8K+B5B,IAAS4B,EAAAA,IA7JhB,CAC1B5B,IACA8F,OAAAA;AAEAnF,WAAOC,QAAQkF,EAAAA,EAAUzF,QAAQ,CAAA,CAAEQ,IAAM0E,EAAAA,MAAAA;AAC1BvF,MAAAA,GAAQG,iBAAiB,UAAUU,EAAAA,IAAAA,EAE3CR,QAASC,CAAAA,OAAAA;AACZK,eAAOC,QAAQ2E,EAAAA,EAAQlF,QAAQ,CAAA,CAAE0F,IAAUC,EAAAA,MAAAA;AACrClG,UAAAA,GAA2BmG,SAASF,EAAAA,KACtCzF,GAAI+B,aAAa0D,IAAUC,EAAAA;QAC5B,CAAA;MACD,CAAA;IACF,CAAA;EACF,GAgJkBhG,IAASiE,EAAAA;AAAW;AAnR1C,IA0RaiC,KAA8B,CACzClG,IACA4B,OAAAA;AAEAnB,IAAqBT,IAAS4B,QAAAA,KAAAA,SAAAA,GAAauE,MAAAA,GAC3C1F,EAAqBT,IAAS4B,QAAAA,KAAAA,SAAAA,GAAawE,IAAAA;AAAK;AA/RlD,IAkSaC,IAAkB,CAAC9D,IAAsBoB,OAAAA;AACpDD,IAAiBnB,IAAS,sBAAsBoB,EAAAA;AAAM;AAnSxD,IAsSa2C,KAAkB,CAAC/D,IAAsBoB,OAAAA;AACpDD,IAAiBnB,IAAS,sBAAsBoB,EAAAA;AAAM;AAvSxD,IA0Sa4C,IAAgC,CAC3CC,IACAC,OAAAA;AAEA1F,QAAMC,KAAKwF,GAASrG,iBAAiB,6BAAA,CAAA,EAAgCE,QAClEqG,CAAAA,OAAAA;AACCA,IAAAA,GAASrE,aAAa,gBAAgBoE,EAAAA;EAAe,CAAA;AAExD;AAlTH,IAqTaE,IAA0BH,CAAAA,OAAAA;AACbA,EAAAA,GAASrG,iBAC/B,kBAAkBC,CAAAA,gBAAAA,EAEJC,QAASuG,CAAAA,OAAWA,GAAOvE,aAAa,YAAY,MAAA,CAAA;AAAQ;;;AClU9E,IAAMwE,KAA+B;AAArC,IAGaC,KAAkB,MAAA;AAC7B,QAAMC,KAAeC,aAAaC,QAAQJ,EAAAA;AAC1C,MAAA,CAAKE,IAAc;AACjB,UAAMG,KAAeC,KAAKC,MAAsB,MAAhBD,KAAKE,OAAAA,IAAiB,CAAA;AAEtD,WADAL,aAAaM,QAAQT,IAA8BK,GAAaK,SAAAA,CAAAA,GACzDL;EACR;AACD,SAAOM,OAAOT,EAAAA;AAAa;;;ACR7B,IAEMU,KAA+B,EACnC,oBAAoB,EAClB,aAAcC,CAAAA,OAAAA;AAAAA,MAAAA;AAAQ,SAAA,CAAA,CAAEA,GAAIC,WAAAA,CAAAA,EAA2B,UAAdC,KAAAF,GAAIG,aAAAA,WAAUD,KAAAA,SAAAA,GAAAD;AAAO,GAC9DG,OAAQJ,CAAAA,OAAAA;AAAQ,MAAAE;AAAA,SAAA,CAACF,GAAIC,WAAAA,EAA0B,UAAAI,KAAdL,GAAIG,aAAAA,WAAUD,KAAAA,SAAAA,GAAAD;AAAO,EAAA,GAExDK,cAAc,EACZ,WAAYN,CAAAA,OAAAA,CAAAA,CAAUA,GAAIO,MAC1B,YAAaP,CAAAA,OAAAA,CAASA,GAAIO,KAAAA,GAE5BC,eAAe,EACb,WAAYR,CAAAA,OAAAA,CAAAA,CAAUA,GAAIS,OAC1B,YAAaT,CAAAA,OAAAA,CAASA,GAAIS,MAAAA,GAE5BC,cAAc,EACZ,gBAAgB,CAACV,IAAKW,QACnBX,GAAIU,gBAAgB,KAAKC,IAC5B,aAAa,CAACX,IAAKW,QAChBX,GAAIU,gBAAgB,KAAKC,IAC5B,yBAAyB,CAACX,IAAKW,QAC5BX,GAAIU,gBAAgB,MAAMC,IAC7B,sBAAsB,CAACX,IAAKW,QACzBX,GAAIU,gBAAgB,MAAMC,IAC7B,YAAY,CAACX,IAAKW,OAAAA;AAChB,QAAA,CAAOC,IAAKC,EAAAA,IAAOF,KACfA,GAAUG,MAAM,GAAA,EAAKC,IAAIC,MAAAA,IACzB,CAAA,QAACC,MAAWA;AAChB,UACGjB,GAAIU,gBAAgB,OAAOE,QAAAA,KAAAA,KAAO,OAClCZ,GAAIU,gBAAgB,OAAOG,QAAAA,KAAAA,KAAO;AACnC,GAEJ,gBAAgB,CAACb,IAAKW,OAAAA;AACpB,QAAA,CAAOC,IAAKC,EAAAA,IAAOF,KACfA,GAAUG,MAAM,GAAA,EAAKC,IAAIC,MAAAA,IACzB,CAAA,QAACC,MAAWA;AAChB,SAAA,EAAA,WACEL,MAAAA,WACAC,MAAAA,CACAG,OAAOE,MAAMN,EAAAA,KAAAA,CACbI,OAAOE,MAAML,EAAAA,QAKPb,GAAIU,gBAAgB,KAAKE,OAAQZ,GAAIU,gBAAgB,KAAKG;AAAG,GAEvE,cAAc,CAACb,IAAKW,OAAAA;AAClB,QAAMQ,KAAeH,OAAOL,EAAAA;AAC5B,SAAA,CAAIK,OAAOE,MAAMC,EAAAA,MAGTnB,GAAIU,gBAAgB,KAAKS,MAAiB;AAAC,EAAA,EAAA;AArDzD,IA0DaC,KAAqB,CAChCC,IACArB,OAAAA;AAAAA,MAAAA;AAEA,QAAMsB,KAAyC,UAA7BpB,KAAAH,GAAcsB,QAAAA,KAAAA,SAAAA,GAAWE,GAAAA,MAAAA,WAAIrB,KAAAA,SAAAA,GAAGmB,GAAUG,QAAAA;AAC5D,MAAA,CAAKF,GACH,QAAO,CAAA;AAET,QAAMG,KAAkBH,GAAUtB,IAAKqB,GAAUV,SAAAA,IAC7CU,GAAUK,MACVL,GAAUM;AACd,SAAO,EACLC,eAAeH,QAAAA,KAAAA,SAAAA,GAAiBI,UAChCC,iBAAiBL,QAAAA,KAAAA,SAAAA,GAAiBM,YAClCC,wBAAwBP,QAAAA,KAAAA,SAAAA,GAAiBQ,cAAAA;AAC1C;AAzEH,IA6EaC,KAAsB,CACjClC,IACAmC,OAAAA;AAEA,QAAMV,KAAkBU,QAAAA,KAAAA,SAAAA,GAAYC,KAAK,CAAA,EAAGb,KAAAA,IAAKC,UAAAA,IAAUb,WAAAA,GAAAA,MAAAA;AAAAA,QAAAA;AACzD,QAlFsB,WAkFlBY,GACF,QAAA;AAEF,UAAMD,KAA8B,UAAlBpB,KAAAH,GAAcwB,EAAAA,MAAAA,WAAIrB,KAAAA,SAAAA,GAAGsB,EAAAA;AACvC,WAAA,CAAA,EAASF,QAAAA,KAAAA,SAAAA,GAAYtB,IAAKW,EAAAA;EAAU,CAAA;AAEtC,SAAQc,KAEJ,EACEG,eAAeH,GAAgBC,IAAIG,UACnCC,iBAAiBL,GAAgBC,IAAIK,YACrCC,wBAAwBP,GAAgBC,IAAIO,eAC5CI,eAAeZ,GAAgBC,IAAIW,eACnCC,kBAAkBb,GAAgBC,IAAIY,iBAAAA,IANxC,CAAE;AAOD;;;AC5FD,SAAUC,GAAYC,IAAAA;AAC1B,QAAMC,KAAW,CAAA;AACjB,MAAA;AACEC,WAAOC,OACLF,IACAG,KAAKC,MAAMC,aAAaC,QAAQC,EAAAA,CAAAA,CAAAA;EAEnC,SAAQC,IAAAA;EAER;AAED,UAAMR,QAAAA,KAAAA,SAAAA,GAAkBD,YAAYA,KAG7BC,KAFE,CAAA;AAGX;AAGgB,SAAAS,GACdT,IACAU,IAAAA;AAAAA,GAEKV,QAAAA,KAAAA,SAAAA,GAAUW,gBAGXD,MAAAA,EAAkBV,QAAAA,KAAAA,SAAAA,GAAkBD,YAGpCa,KACFP,aAAaQ,QACXN,IACAJ,KAAKW,UAAUd,EAAAA,CAAAA;AAGrB;;;ACxCA,IAAMe,KAAoB,CAACC,IAAUC,KAAS,OAC5CC,OAAOC,KAAKH,EAAAA,EAAKI,OAAO,CAACC,IAAKC,OAAAA;AAAAA,MAAAA;AAC5B,MAAIC,MAAMC,QAAQR,GAAIM,EAAAA,CAAAA,EACpB,QAAAJ,OAAAO,OAAAP,OAAAO,OAAA,CAAA,GACKJ,EAAAA,GAAG,EACNC,CAACA,EAAAA,GAAK,EACJI,OAAOV,GAAIM,EAAAA,EAAIK,IAAKC,CAAAA,OACF,YAAA,OAATA,MAA8B,SAATA,KACxBb,GAAkBa,EAAAA,IAClBA,EAAAA,EAAAA,EAAAA,CAAAA;AAKZ,MAAuB,YAAA,OAAZZ,GAAIM,EAAAA,KAAgC,SAAZN,GAAIM,EAAAA,KAAAA,EAA0B,UAATO,KAAAb,GAAIM,EAAAA,MAAAA,WAAKO,KAAAA,SAAAA,GAAAH,OAC/D,QAAAR,OAAAO,OAAAP,OAAAO,OAAA,CAAA,GAAYJ,EAAAA,GAAQN,GAAkBC,GAAIM,EAAAA,GAAK,GAAGL,KAASK,EAAAA,GAAAA,CAAAA;AAE7D,QAAMQ,KAAuB,YAAA,OAAZd,GAAIM,EAAAA,IAAmBN,GAAIM,EAAAA,IAAM,EAAEI,OAAOV,GAAIM,EAAAA,EAAAA,GACzDS,KAAAA,OAAAA,OAAAA,OAAAA,OAAAA,CAAAA,GAAUV,EAAAA,GAAG,EAAE,CAACJ,KAASK,EAAAA,GAAKQ,IAAG,CAAC,QAAQb,EAAAA,GAASK,EAAAA,EAAAA,GAAOQ,GAAAA,CAAAA;AAChE,SAAW,kBAAPR,KACFJ,OAAAO,OAAAP,OAAAO,OAAA,CAAA,GAAYM,EAAAA,GAAI,EAAA,CAAC,GAAGd,EAAAA,UAAAA,GAAmBa,IAAG,CAAC,QAAQb,EAAAA,UAAAA,GAAmBa,GAAAA,CAAAA,IAEjEC;AAAE,GACR,CAAA,CAAA;AAvBL,IAyBaC,KAA8BC,CAAAA,OAAAA;AACzC,MAAA;AACE,WAAOlB,GAAkBmB,KAAKC,MAAMF,EAAAA,CAAAA;EACrC,SAAQG,IAAAA;AACP,WAAO,CAAA;EACR;AAAA;AA9BH,IAiCaC,KAAyB,CACpCJ,IACAK,OAEApB,OAAOqB,YACLrB,OAAOsB,QAAQP,EAAAA,EAAUN,IAAI,CAAA,CAAEc,IAAMC,EAAAA,MAAY,CAACD,IAAMC,GAAOJ,EAAAA,CAAAA,CAAAA,CAAAA;;;AClC5D,IAAMK,KAAiBC,EACSC,CAAAA,OAAAA;AAAiB,MAAAC,IAAAC,IAAAC,IAAAC;AAAA,SAAAA,KACpD,cAA6BJ,GAAAA;IAA7B,cAAAK;AAAAA,YAAAA,GAAAA,SAAAA,GAAAA,GAAAA,IAAAA,IAAAA;IAwBC;IANC,oBAAAC;AAAAA,UAAAA;AACMC,6BAAAC,MAAIP,IAAA,KAAAC,EAAAA,EAAAA,KAAJM,IAAAA,KACFD,uBAAAC,MAAIP,IAAA,KAAAE,EAAAA,EAAJM,KAAAD,IAAAA,GAEqB,UAAvBE,KAAAC,MAAML,sBAAAA,WAAiBI,MAAAA,GAAAD,KAAAD,IAAAA;IACxB;EAAA,GAAAI,KAAA,oBAAA,WAAAC,KAAA,WAAA;AApBC,WAAA,CADWL,KAAKM,WAAWC,KAChBC,QAAQ,MAAA,KAAWC,EAAAA;EAC/B,GAAAC,KAAA,WAAA;AAMC,UAAMC,KAAKX,KAAKM,WAAWC,MACrBK,KAAOC,SAASC,cAAc,MAAA;AACpCF,IAAAA,GAAKG,MAAMC,QAAQ,QACnBJ,GAAKG,MAAME,SAAS,QACpBN,GAAGO,cAAcC,YAAYP,EAAAA,GAC7BA,GAAKO,YAAYR,EAAAA;EAClB,GAQFf;AAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACeL,IAAMwB,IAAYC,EAChBC,YACAC,sBACAC,IACAC,gBAAAA,EACAC,WAAAA;AAGF,IAAMC,IAAN,cAA4BP,EAAAA;EAC1B,WAAA,qBAAWQ;AACT,WAAO,CACL,cACA,WACA,YACA,UACA,UACA,SACA,kBACA,WACA,gBACA,cACA,iCACA,uBACA,6CACA,oBACA,UAAA;EAEH;EA6DD,YAAYC,IAAAA;AACVC,UAAAA,GAAAA,GAAAA,IAAAA,IAAAA,GApDFC,GAAAC,IAAAC,MAAAA,KAAQ,GAERA,KAAUC,aAAe,WAEzBD,KAAAE,gBAAgB,EACdC,OAAO,CAACC,IAAiBC,KAAc,OAAA;AACrCL,WAAKM,OAAOH,MAAMC,IAASC,IAAa,IAAIE,OAAAA,GAC5CC,uBAAAR,MAAAA,IAAAA,KAAAA,CAAAA,EAAAS,KAAAT,MAA6BI,IAASC,EAAAA;IAAY,GAEpDK,MAAM,CAACN,IAAiBC,KAAc,OAAA;AACpCL,WAAKM,OAAOI,KAAKN,IAASC,EAAAA;IAAY,GAExCM,MAAM,CAACP,IAAiBC,KAAc,IAAIO,KAAa,CAAA,MAAA;AACrDZ,WAAKM,OAAOK,KAAKP,IAASC,IAAaO,EAAAA;IAAM,GAE/CC,OAAO,CAACT,IAAiBC,KAAc,OAAA;AACrCL,WAAKM,OAAOO,MAAMT,IAASC,EAAAA;IAAY,EAAA,GAI3CS,GAAaf,IAAAC,MAAA,IAAIe,IAAAA,GAEjBC,EAAcjB,IAAAC,MAAA,IAAIe,IAAAA,GAElBE,GAAAlB,IAAAC,MAAqB,CAAA,CAAA,GAErBA,KAAAkB,uBAAuB,MAAMV,uBAAAR,MAAAA,IAAAA,GAAAA,GAE7BA,KAAiBmB,oBAAG,IAAIJ,GAA8B,EAAEK,WAAAA,MAAW,CAAA,GAQnEC,GAEEtB,IAAAC,MAAAA,MAAA,GAEFsB,EAAgBvB,IAAAC,MAAA,EACduB,UAAUf,uBAAAR,MAAIwB,IAAA,KAAAC,CAAAA,EAAqBC,KAAK1B,IAAAA,GACxC2B,mBAAmBnB,uBAAAR,MAAIwB,IAAA,KAAAI,EAAAA,EAA0BF,KAAK1B,IAAAA,EAAAA,CAAAA,GAKxD6B,EAAoC9B,IAAAC,MAAAA,MAAA,GAgQpCA,KAAA8B,YAAY,MAAA,UAAA,MAAA,QAAA,QAAA,aAAA;AAAY,cAAA,MAAO9B,KAAK+B,WAAW,EAAEC,iBAAAA,KAAiB;IAAM,CAAA,GA1PtEC,uBAAAjC,MAAI6B,GAAoBjC,IAAe,GAAA,GAEvCY,uBAAAR,MAAIwB,IAAA,KAAAU,EAAAA,EAAJzB,KAAAT,IAAAA;EACD;EAyCD,IAAA,SAAImC;AACF,WAAOnC,KAAKoC,aAAa,SAAA;EAC1B;EAED,IAAA,SAAIC;AACF,QAAA;AACE,aAAQC,KAAKC,MAAMvC,KAAKoC,aAAa,QAAA,CAAA,KAAc,CAAA;IAIpD,SAAQI,IAAAA;AACP,aAAO,CAAA;IACR;EACF;EAED,IAAA,WAAIC;AACF,WAAOzC,KAAKoC,aAAa,QAAA,KAAA;EAC1B;EAED,IAAA,cAAIM;AACF,WAAO1C,KAAKoC,aAAa,cAAA,KAAA;EAC1B;EAED,IAAA,QAAIvB;AACF,WAAsC,WAA/Bb,KAAKoC,aAAa,OAAA;EAC1B;EAED,IAAA,SAAIO;AACF,WAAO3C,KAAKoC,aAAa,QAAA,KAAA;EAC1B;EAED,IAAA,YAAIQ;AAAAA,QAAAA;AACF,UAAMC,KAAyC,UAAnCC,KAAA9C,KAAKoC,aAAa,YAAA,MAAA,WAAiBU,KAAAA,KAAA;AAC/C,WAAY,sBAARD,KACKA,KAEM,WAARA;EACR;EAED,IAAA,iBAAIE;AACF,WAAiD,WAA1C/C,KAAKoC,aAAa,kBAAA;EAC1B;EAED,IAAA,6BAAIY;AAAAA,QAAAA;AAEF,WAAe,YADmD,UAAtDF,KAAA9C,KAAKoC,aAAa,+BAAA,MAAA,WAAoCU,KAAAA,KAAA;EAEnE;EAED,IAAA,oBAAIG;AACF,WAAOjD,KAAKoC,aAAa,qBAAA,KAA0B;EACpD;EAED,IAAA,uCAAIc;AAEF,WAAe,WADHlD,KAAKoC,aAAa,2CAAA;EAE/B;EAED,IAAA,gBAAIe;AACF,WAAOnD,KAAKoC,aAAa,gBAAA,KAAqB;EAC/C;EAED,IAAA,UAAIgB;AACF,WAAA,CAAA,CAASpD,KAAKoC,aAAa,SAAA;EAC5B;EAED,IAAA,aAAIiB;AACF,WAAOC,GAA2BtD,KAAKuD,IAAAA;EACxC;EAED,IAAA,OAAIA;AACF,WAAOvD,KAAKoC,aAAa,MAAA;EAC1B;EAED,IAAA,mBAAIoB;AACF,WAAOC,GAAuBzD,KAAKqD,YAAY,OAAA;EAChD;EAED,IAAA,gBAAIK;AACF,WAAO1D,KAAKoC,aAAa,iBAAA;EAC1B;EAED,IAAA,oBAAIuB;AACF,QAAA;AACE,YAAMC,KAAStB,KAAKC,MAAMvC,KAAKoC,aAAa,qBAAA,CAAA;AAC5C,aAAKwB,MAAe;IAErB,SAAQC,IAAAA;AACP,aAAO;IACR;EACF;EA2HD,IAAA,mBAAIC;AACF,WAAiD,WAA1C9D,KAAKoC,aAAa,kBAAA;EAC1B;EAEK,sBAAA2B;AAAAA,WAAAA,UAAAA,MAAAA,QAAAA,QAAAA,aAAAA;AACJ,YAAMhC,KAAAA,MAAe/B,KAAK8B,UAAAA;AAC1B,aAAO,sBAAsBC,KAASA,GAAOiC,mBAAAA;IAAmBC,CAAAA;EACjE;EAuCK,mBAAAC;AAAAA,WAAAA,UAAAA,MAAAA,QAAAA,QAAAA,aAAAA;AACJ,YAAMnC,KAAAA,MAAe/B,KAAK8B,UAAAA;AAC1B,aAAO,mBAAmBC,KAASA,GAAOoC,gBAAAA;IAAgBF,CAAAA;EAC3D;EAEK,gBAAAG;AAAAA,WAAAA,UAAAA,MAAAA,QAAAA,QAAAA,aAAAA;AAAAA,UAAAA,IAAAA;AACJ,YAAMD,KAAAA,MAAsBnE,KAAKkE,iBAAAA,GAE3BG,MAAAA,UAAAA,KACJF,QAAAA,KAAAA,SAAAA,GAAeG,UAAAA,WAAAA,KAAAA,SAAAA,GAAQtE,KAAKmC,MAAAA,MAAY,CAAA;AAE1C,aADkB,UAAlBoC,KAAAF,GAAWG,YAAAA,WAAOD,OAAlBF,GAAWG,UAAY,IAChBH;IAAAA,CAAAA;EACR;EAEK,mBAAAI;AAAAA,WAAAA,UAAAA,MAAAA,QAAAA,QAAAA,aAAAA;AACJ,YAAMJ,KAAAA,MAAmBrE,KAAKoE,cAAAA;AAC9B,eAAQC,QAAAA,KAAAA,SAAAA,GAAYK,kBAAiB,CAAA,GAAIC,IAAKhC,CAAAA,OAC5CA,GAAOiC,YAAAA,CAAAA;IAAAA,CAAAA;EAEV;EA4DK,uBAAAC;AAAAA,WAAAA,UAAAA,MAAAA,QAAAA,QAAAA,aAAAA;AAAAA,UAAAA;AACJ,YAAM9C,KAAAA,MAAe/B,KAAK8B,UAAAA,GACpB0C,KACJ,mBAAmBzC,KAA+B,UAAtBe,KAAAf,GAAOoC,kBAAAA,WAAerB,KAAAA,SAAAA,GAAAgC,oBAAoB,CAAA;AAExE,aAAIN,OAEJxE,KAAKM,OAAOH,MAAM,sDAAA,GAEX;IAAA,CAAA;EACR;EAIK,OAAA4E;AAAAA,UAAAA,KAAAA,OAAAA,OAAAA,MAAAA,EAAAA,MAAAA,EAAAA,KAAAA,MAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,WAAAA,UAAAA,MAAAA,QAAAA,QAAAA,aAAAA;AAAAA,UAAAA;AAcJ,UAbA/E,KAAKC,aAAa,WAClB,CAAC,SAAS,SAAS,SAAA,EAAW+E,QAASC,CAAAA,OACrCjF,KAAKkF,iBAAiBD,IAAQ,MAAA;AAC5BjF,aAAKC,aAAagF;MAAM,CAAA,CAAA,GAAA,MAIZ,UAAVnC,KAAAqC,GAAMJ,SAAAA,WAAIjC,KAAAA,SAAAA,GAAArC,KAAAT,IAAAA,GAChBQ,uBAAAR,MAAIgB,GAAA,GAAA,EAAaoE,UAAU5E,uBAAAR,MAAqBwB,IAAA,KAAA6D,CAAAA,EAAC3D,KAAK1B,IAAAA,CAAAA,GACtDQ,uBAAAR,MAAIgB,GAAA,GAAA,EAAasE,OAAO,EAAEC,SAASvF,KAAKa,MAAAA,CAAAA,GAExCL,uBAAAR,MAAIwB,IAAA,KAAAgE,CAAAA,EAAJ/E,KAAAT,IAAAA,GAAAA,MAEUQ,uBAAAR,MAAIwB,IAAA,KAAAiE,EAAAA,EAAAA,KAAJzF,IAAAA,EAMR,QAAA,KALAA,KAAKE,cAAcC,MACjB,wDACA,mFAAA;AAMJ,YAAM4B,KAAAA,MAAe/B,KAAK8B,UAAAA;AAC1B,UAAI,qBAAqBC,MAAUA,GAAOC,gBAMxC,QAAA,KALAhC,KAAKE,cAAcC,MACjB,0BACA,oDAAA;AAMJK,6BAAAR,MAAIwB,IAAA,KAAAkE,CAAAA,EAAJjF,KAAAT,IAAAA;AAEA,YAAA,EAAM2F,aACJA,IAAWC,QACXA,IAAMC,OACNA,IAAKC,MACLA,IAAIC,SACJA,IAAOC,eACPA,IAAaC,yBACbA,IAAuBC,+BACvBA,IAA6BC,2BAC7BA,GAAyBC,uBACzBA,IAAqBC,gBACrBA,GAAAA,IACEC,GAAgBtG,KAAKmC,QAAQnC,KAAKE,aAAAA;AAGtCqG,aAAOrB,iBAAiB,YAAY1E,uBAAAR,MAAkBsB,GAAA,GAAA,EAACC,QAAAA,GAIvDgF,OAAOrB,iBACL,sBACA1E,uBAAAR,MAAkBsB,GAAA,GAAA,EAACK,iBAAAA,GAGrBnB,uBAAAR,MAAIc,IAAA,GAAA,EAAYsE,UAAU5E,uBAAAR,MAAkBwB,IAAA,KAAAgF,EAAAA,EAAC9E,KAAK1B,IAAAA,CAAAA,GAElDQ,uBAAAR,MAAec,IAAA,GAAA,EAACwE,OACdmB,OAAAC,OAAA,EAAAC,WAAW3G,KAAK2G,WAChBxE,QAAQnC,KAAKmC,QACbyE,SAAS5G,KAAK4G,SACdC,QAAQ7G,KAAKyC,UACbC,aAAa1C,KAAK0C,aAClBC,QAAQ3C,KAAK2C,QACbiD,QAAAA,IACAD,aAAAA,IACAE,OAAAA,IACAC,MAAAA,IACAC,SAAAA,IACAC,eAAAA,IACAC,yBAAAA,IACAC,+BAAAA,IACAC,2BAAAA,GACAC,uBAAAA,GAAAA,GACGC,EAAAA,CAAAA,GAGLpE,uBAAAjC,MAAIF,IAAAA,MAAa,GAAA;IAAA,CAAA;EAClB;EAED,uBAAAgH;AACEtG,2BAAAR,MAAIc,IAAA,GAAA,EAAYiG,eAAAA,GAChBvG,uBAAAR,MAAIgB,GAAA,GAAA,EAAa+F,eAAAA,GACjBvG,uBAAAR,MAAIwB,IAAA,KAAAwF,CAAAA,EAAJvG,KAAAT,IAAAA,GACAuG,OAAOU,oBAAoB,YAAYzG,uBAAAR,MAAkBsB,GAAA,GAAA,EAACC,QAAAA,GAC1DgF,OAAOU,oBACL,sBACAzG,uBAAAR,MAAkBsB,GAAA,GAAA,EAACK,iBAAAA;EAEtB;EAED,yBACEuF,IACAC,IACAC,IAAAA;AAEA,QAAKpH,KAAKqH,WAAWC,eAAgB9G,uBAAAR,MAAUF,IAAA,GAAA,KAG7CqH,OAAaC,MACbG,EAAc5H,mBAAmB6H,SAASN,EAAAA,GAC1C;AACA1G,6BAAAR,MAAIwB,IAAA,KAAAgE,CAAAA,EAAJ/E,KAAAT,IAAAA;AAEA,YAAMyH,KAA4B,SAAbN;AAErB3G,6BAAAR,MAAIc,IAAA,GAAA,EAAYwE,OAAO,CAAA,EAAGM,QAAAA,IAAQD,aAAAA,GAAAA,MAAAA;AAChC,YAAI+B,KAAY9B,IACZ+B,KAAiBhC;AASrB,eANK8B,OACHE,KAAiB,MACjBD,KAAY,MACZE,GAAAA,IAGK,EACL,CAACC,GAAUX,EAAAA,CAAAA,GAAYE,IACvBxB,QAAQ8B,IACR/B,aAAagC,GAAAA;MACd,CAAA,GAGHnH,uBAAAR,MAAIgB,GAAA,GAAA,EAAasE,OAAO,EAAEC,SAASvF,KAAKa,MAAAA,CAAAA;IACzC;EACF;AAAA;AAAA,IAAA,GAAAiH,KAAA,oBAAA,WAAAC,KAAA,oBAAA,WAAA,IAAA,oBAAA,WAAAC,KAAA,oBAAA,WAAAC,KAAA,oBAAA,WAAA,IAAA,oBAAA,WAAA,IAAA,oBAAA,WAAAC,KAAA,oBAAA,WAAA,IAAA,WAAA;AAvgBClI,OAAKmI,YAAY,6ZAAA;AA6BnB,GAACjG,KAAA,WAAA;AAGC1B,yBAAAR,MAAIwB,IAAA,KAAA4G,CAAAA,EAAJ3H,KAAAT,IAAAA,GACAA,KAAKqI,cAAcC,SAASC,cAAc,MAAA,GAC1CvI,KAAKqI,YAAYG,UAAUC,IAAI,QAAA,GAC/BzI,KAAK0I,YAAYC,YAAY3I,KAAKqI,WAAAA;AACpC,GAAC7C,IAAA,WAAA;AA8FC,QAAMoD,KAAqB,CACzB,YACA,UACA,UACA,SACA,gBACA,cACA,iCACA,uBACA,6CACA,WACA,kBACA,QACA,UACA,oBACA,YACA,mBACA,qBAAA;AAGFrB,IAAc5H,mBAAmBqF,QAAS6D,CAAAA,OAAAA;AACxC,QAAA,CAAKD,GAAmBpB,SAASqB,EAAAA,KAAAA,CAAU7I,KAAK6H,GAAUgB,EAAAA,CAAAA,EACxD,OAAMtI,MAAM,GAAGsI,EAAAA,kBAAAA;EAAuB,CAAA;AAE5C,GAACpH,IAAA,WAAA;AAGC,QAAA,EAAMmE,QAAEA,IAAMD,aAAEA,GAAAA,IAAgBmD,EAAiB9I,KAAKmC,MAAAA;AACtD3B,yBAAAR,MAAec,IAAA,GAAA,EAACwE,OAAO,EAAEM,QAAAA,IAAQD,aAAAA,GAAAA,CAAAA;AACnC,GAACoD,KAAA,SAEUpC,IAAmBC,IAAAA;AAC5B5G,OAAKgJ,MAAMC,GAASxC,OAAAC,OAAAD,OAAAC,OAAA,EAElBwC,eAAAA,MACA9F,SAASpD,KAAKoD,SACdD,eAAenD,KAAKmD,eACpBH,4BAA4BhD,KAAKgD,4BACjCE,sCACElD,KAAKkD,sCACPD,mBAAmBjD,KAAKiD,kBAAAA,GACrBsE,EAAc4B,kBAAAA,GAAAA,EACjBxC,WAAAA,IACAC,SAAAA,GAAAA,CAAAA,CAAAA,GAIF,CAAC,SAAS,MAAA,EAAQ5B,QAASoE,CAAAA,OAAAA;AACzB,UAAMC,KAASrJ,KAAKgJ,IAAIM,KAAKF,EAAAA;AAE7BpJ,SAAKgJ,IAAIM,KAAKF,EAAAA,IAAO,IAAUG,OAAmCC,UAAAxJ,MAAAA,QAAA,QAAA,aAAA;AAChE,UAAA;AAEE,eAAA,MADmBqJ,GAAAA,GAAUE,EAAAA;MAE9B,SAAQ/G,IAAAA;AAEP,eAAO,EACLrC,OAAO,EACLsJ,WAAWC,GACXC,kBAAkBnH,GAAEoH,SAAAA,EAAAA,EAAAA;MAGzB;IACH,CAAA;EAAC,CAAA;AAEL,GAGEpD,KAAA,SAAAqD,IACAC,IACAC,IAAAA;AAAAA,SAAAA,UAAAA,MAAAA,QAAAA,QAAAA,aAAAA;AAEA,UAAA,EAAMpD,WAAEA,IAASC,SAAEA,GAAAA,IAAYiD;AAK/B,QAFEE,GAAU,WAAA,KAAgBA,GAAU,SAAA,GAET;AAC3B,UAAA,CAAKpD,GAAW;AAEhBnG,6BAAAR,MAAAA,IAAAA,KAAAA,EAAAA,EAAAS,KAAAT,MAAgB2G,IAAWC,EAAAA;IAC5B;AAGDpG,2BAAAR,MAAqB6B,GAAA,GAAA,EAAApB,KAArBT,MAAsB6J,EAAAA;EAAAA,CAAAA;AAAAA,GAAAA,KAAAA,WAAAA;AAAAA,SAAAA,UAAAA,MAAAA,QAAAA,QAAAA,aAAAA;AAItB,UAAM9H,KAAAA,MAAe/B,KAAK8B,UAAAA;AAE1B,WACE,qBAAqBC,MACrBA,GAAOC,oBAAAA,MACAxB,uBAAAR,MAAIwB,IAAA,KAAAwI,EAAAA,EAAAA,KAAJhK,IAAAA;EAAAA,CAAAA;AAAAA,GAAAA,KAAAA,WAAAA;AAAAA,SAAAA,UAAAA,MAAAA,QAAAA,QAAAA,aAAAA;AAOT,UAAMiK,KAAmBC,EAAc,EACrCvD,WAAW3G,KAAK2G,WAChBwD,UAAUC,GACVC,cAAcC,GACd1D,SAAS5G,KAAKuK,cAAAA,CAAAA;AAEhB,QAAA;AAEE,aAAA,MADMC,EAAaP,IAAkB,MAAA,GAAA;IAEtC,SAAQzH,IAAAA;AACP,aAAA;IACD;EAAA,CAAA;AAAA,GAAAiI,KAAA,SAKsBjI,IAAAA;AACvBP,yBAAAjC,MAA+BiB,IAAAwF,OAAAC,OAAAD,OAAAC,OAAA,CAAA,GAAAlG,uBAAAR,MAAIiB,IAAA,GAAA,CAAA,GAAwBuB,GAAEkI,MAAAA,GAAM,GAAA;AACrE,GAAC1D,IAAA,WAAA;AAAA,MAAAxE;AAYoB,YAAnBM,KAAAtC,uBAAAR,MAAIqB,IAAA,GAAA,MAAA,WAAeyB,MAAAA,GAAA6H,OAAAA,GACnB1I,uBAAAjC,MAAIqB,IAAgB,MAAI,GAAA;AAC1B,GAACgE,IAAA,SAAAvC,IAAAA;AAEsB,SAAA0G,UAAAxJ,MAAA4K,WAAAA,QAAA,WAAA,EAAArF,SAAEA,GAAAA,GAAAA;AACnBA,IAAAA,MACFtD,uBAAAjC,MAAAA,IAAoBsI,SAASC,cAC3B,kBAAA,GAGD,GAAA,GAED9B,OAAOC,OAAOlG,uBAAAR,MAAiBqB,IAAA,GAAA,EAACwJ,OAAO,EACrCC,UAAU,SACVC,KAAK,KACLC,OAAO,KACPC,QAAQ,SACRC,OAAO,SACPC,eAAe,QACfC,QAAQ,MAAA,CAAA,GAAA,MAIJC,OAAO,2BAAA,GAEb/C,SAASgD,KAAK3C,YAAYnI,uBAAAR,MAAiBqB,IAAA,GAAA,CAAA,KAE3Cb,uBAAAR,MAAIwB,IAAA,KAAAwF,CAAAA,EAAJvG,KAAAT,IAAAA;EAAAA,CAAAA;AAIoB,GAAAuL,IAAA,SAAAC,IAAenL,IAAAA;AAAAA,MAAAA;AACjCmL,EAAAA,MAASxL,KAAKa,UACC,UAAjBiC,KAAAtC,uBAAAR,MAAiBqB,IAAA,GAAA,MAAA,WAAAyB,MAAAA,GAAE2I,WAAW,EAAED,OAAAA,IAAOnL,aAAAA,GAAAA,CAAAA;AAC3C,GAACqF,IAAA,WAAA;AAyBC1F,OAAK0I,YAAYgD,YAAalJ,CAAAA,OAAAA;AAAAA,QAAAA,IAAAA,IAAAA;AAE5B,UAAMmJ,KAAAA,CAAAA,EAC6B,UAAAnJ,KAA/BxC,KAAKqH,WAAWuE,kBAAAA,WAAe9I,KAAAA,SAAAA,GAAAV,aAAa,MAAA,IAC1CyJ,KAA0BC,EAAgCtE,SAClB,UAAAuE,KAAf,UAA7BxH,KAAAvE,KAAKqH,WAAWuE,kBAAAA,WAAarH,KAAAA,SAAAA,GAAEyH,cAAAA,WAAaC,KAAAA,KAAA,EAAA;AAG9C,QAAc,YAAVzJ,GAAE4G,OAAmBuC,MAAoBE,GAC3C;AAEFrJ,IAAAA,GAAE0J,eAAAA;AACF,UAAMC,KACJnM,KAAK0I,YAAY0D,iBAAiB,gBAAA;AAGpC,QACqB,MAAnBD,GAAQE,UACmC,YAA3CF,GAAQ,CAAA,EAAG/J,aAAa,aAAA,EAGxB,QAAA,KADA+J,GAAQ,CAAA,EAAGG,MAAAA;AAIb,UAAMC,KAAoBC,MAAMC,KAAKN,EAAAA,EAASO,OAC3CC,CAAAA,OAAkD,WAAvCA,GAAOvK,aAAa,aAAA,CAAA;AAElC,QAAiC,MAA7BmK,GAAkBF,OAEpB,QAAA,KADAE,GAAkB,CAAA,EAAGD,MAAAA;AAIvB,UAAMM,KAAiBJ,MAAMC,KAAKN,EAAAA,EAASO,OACxCC,CAAAA,OAAgD,aAArCA,GAAOvK,aAAa,WAAA,CAAA;AAIlC,QAA8B,MAA1BwK,GAAeP,OACqC,aAAlDO,GAAe,CAAA,EAAGxK,aAAa,aAAA,KACjCwK,GAAe,CAAA,EAAGN,MAAAA;aAEe,MAA1BM,GAAeP,QAAc;AACtC,YAAMQ,KAAaL,MAAMC,KAAKN,EAAAA,EAASO,OACpCC,CAAAA,OAAgD,UAArCA,GAAOvK,aAAa,WAAA,CAAA;AAIR,YAAtByK,GAAWR,UACqC,YAA9CQ,GAAW,CAAA,EAAGzK,aAAa,aAAA,KAC7ByK,GAAW,CAAA,EAAGP,MAAAA;IAGnB;EAAA;AAEL,GAvbO5M,EAAAyJ,qBAAyC,EAC9C2D,aAAa,EACX,sBAAsB,iBACtB,yBAAyB,SAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACR/B,IAAMC,MAAN,cAAwBC,EAAAA;EAKtB,WAAA,mBAA8BC,IAAAA;AAC5BD,MAAcE,qBAAqBD;EACpC;EAED,WAAA,qBAAWC;AACT,WAAOF,EAAcE;EACtB;EAmBD,cAAAC;AACE,UAAMC,KAAY,IAAIC,GAAiB,EACrCC,kBAAAA,MAAkB,CAAA;AAGpBC,UAAMH,GAAUI,OAAOC,KAAKL,EAAAA,CAAAA,GAAAA,EAAAA,IAAAA,IAAAA,GApB9BM,KAAAC,YAAY,IAAIN,GAAiB,CAAe,CAAA,GAEhDO,GAAgCC,IAAAH,MAAAA,MAAA,GAEhCI,GAAAD,IAAAH,MAAgC,IAAA,GAShCK,GAAAF,IAAAH,MAAqB,IAAA,GAYrBM,GAAgBH,IAAAH,MAAA,EACdO,kBAAkBC,uBAAAR,MAAIS,GAAA,KAAAC,EAAAA,EAA0BX,KAAKC,IAAAA,EAAAA,CAAAA,GAevDA,KAAaW,gBAAG,GAIhBX,KAAeY,kBAcX,CAAA,GA2XJC,GAAAV,IAAAH,MAAAA,KAAsB,GAmlBtBA,KAAAc,iBAAkBC,CAAAA,OAAAA;AAChBC,aAAOC,SAASC,OAAOH,EAAAA;IAAW,GAGpCI,GAA0BhB,IAAAH,MAACoB,CAAAA,OAAAA;AACzB,YAAMC,KAAmB,MAAA;AACvBrB,aAAKsB,mBAAmBC,UAAUC,OAAO,UAAUJ,EAAAA,GACnDpB,KAAKyB,YAAYF,UAAUC,OAAO,UAAA,CAAWJ,EAAAA,GACzCA,OACFpB,KAAKsB,mBAAmBI,YAAY;MACrC;AAGCN,MAAAA,MAAkBpB,KAAKsB,mBAAmBK,cAAAA,IAC5CnB,uBAAAR,MAAgCS,GAAA,KAAAmB,EAAAA,EAAAC,KAAhC7B,MAAiCqB,EAAAA,IAEjCA,GAAAA;IACD,CAAA,GAkBHS,GAAA3B,IAAAH,MAAyB,CACvB+B,IACAC,IACAC,IACAC,IACAC,KAAAA,UAAuB;AAEvB,YAKMC,KAAe,CACnBC,GACAC,CAAAA;AAGF,UAAItC,KAAKN,UAAU6C,QAAQC,WAAWC,EAAiBC,MAAM;AAE3D1C,aAAK2C,OAAOC,MAAM,sCAAA;AAClB,cAAMC,KAAcC,KAAKC,IAAAA,GACnBC,KAAQb,KAZa,MAFD;AAe1Bc,+BAAAjD,MAAIE,IAAmBgD,WAAW,MAAWC,UAAAnD,MAAAA,QAAA,QAAA,aAAA;AAAA,cAAAoD,IAAAC;AAC3CrD,eAAK2C,OAAOC,MAAM,wBAAA;AAElB,gBAAMU,KAAWtD,KAAKuD,IAAIC,KAAKC,KAC7B1B,IACAC,IACA0B,EAAoBC,SACpB1B,IACAC,IACA,CAAE,CAAA,GAOE0B,KACJC,SAASC,UAAAA,CACR3B,MACDW,KAAKC,IAAAA,IAAQF,KAAcG,KA/BA;AAoC7B,cAAIe;AAJAH,UAAAA,MACF5D,KAAK2C,OAAOC,MAAM,6CAAA;AAIpB,cAAA;AACE,kBAAMoB,KAAUJ,KArCS,MAHD;AA2CxBG,gBAAAA,MAAgBE,GAAeD,IAASV,EAAAA;UACzC,SAAQY,IAAAA;AAaP,mBAZAlE,KAAK2C,OAAOwB,KACV,iBACEP,KAAY,oBAAoB,OAAA,gCAAA,GAAA,KAGpCpD,uBAAAR,MAAI8B,IAAA,GAAA,EAAJD,KAAA7B,MACE+B,IACAC,IACAC,IACAC,IACA0B,EAAAA;UAGH;AAED,eAAoB,UAAhBQ,KAAAL,QAAAA,IAAAA,SAAAA,EAASM,UAAAA,WAAOD,KAAAA,SAAAA,GAAAE,eAAcC,EAUhC,QATAvE,KAAK2C,OAAOC,MACV,8DAAA,GAAA,KAEFpC,uBAAAR,MAAI8B,IAAA,GAAA,EAAJD,KAAA7B,MACE+B,IACAC,IACAC,IACAC,EAAAA;AAKJlC,eAAK2C,OAAOC,MAAM,0BAAA,IACdmB,QAAAA,IAAAA,SAAAA,EAASM,UACXrE,KAAK2C,OAAOC,MACV,mCACA4B,KAAKC,UAAUV,EAAQM,OAAO,MAAM,CAAA,CAAA,IAMrB,UAAhBK,KAAAX,QAAAA,IAAAA,SAAAA,EAASM,UAAAA,WAAOK,KAAAA,SAAAA,GAAAJ,cAChBlC,GAAauC,SAASZ,EAAQM,MAAMC,SAAAA,IAWrCtE,KAAK2C,OAAOC,MAAM,yCAAA,IAPlBpC,uBAAAR,MAAI8B,IAAA,GAAA,EAAJD,KAAA7B,MACE+B,IACAC,IACAC,IACAC,EAAAA,GAMJ1B,uBAAAR,MAAuB4E,KAAA,GAAA,EAAA/C,KAAvB7B,MAAwB+D,CAAAA;QAC1B,CAAA,GAAGf,EAAAA,GAAAA,GAAAA;MACJ;IAAA,CAAA,GAGH6B,GAAA1E,IAAAH,MAAuB,MAAA;AACrB8E,mBAAatE,uBAAAR,MAAIE,IAAA,GAAA,CAAA,GACjB+C,uBAAAjD,MAAIE,IAAmB,MAAI,GAAA;IAAA,CAAA,GAG7B0E,IAAqBzE,IAAAH,MAAC+D,CAAAA,OAAAA;AAAAA,UAAAA,IAAAA,IAAAA,IAAAA,IAAAA,IAAAA,IAAAA,IAAAA,IAAAA,IAAAA,IAAAA,GAAAA,IAAAA;AACpB,UAAA,EAAKA,QAAAA,KAAAA,SAAAA,GAASgB,KAAI;AAChB,cAAMC,KAAoC,UAAnBZ,KAAAL,QAAAA,KAAAA,SAAAA,GAASkB,aAAAA,WAAUb,KAAAA,SAAAA,GAAAc,KACpCC,KAAqB,GAAoB,UAAjBT,KAAAX,QAAAA,KAAAA,SAAAA,GAASkB,aAAAA,WAAQP,KAAAA,SAAAA,GAAEU,MAAAA,MAA6B,UAAjBC,KAAAtB,QAAAA,KAAAA,SAAAA,GAASkB,aAAAA,WAAQI,KAAAA,SAAAA,GAAEC,UAAAA;AAEhF9E,+BAAAR,MAAIS,GAAA,KAAA8E,EAAAA,EAAJ1D,KAAA7B,MACE,UACA+D,QAAAA,KAAAA,SAAAA,GAASM,UAAS,EAChBC,WAAWkB,GACXC,kBAAkBN,IAClBO,cAAcV,GAAAA,CAAAA,GAIlBhF,KAAK2F,cAActB,OACD,UAAhBuB,KAAA7B,QAAAA,KAAAA,SAAAA,GAASM,UAAAA,WAAOuB,KAAAA,SAAAA,GAAAH,qBAAoBT,KACpB,UAAhBa,KAAA9B,QAAAA,KAAAA,SAAAA,GAASM,UAAAA,WAAOwB,KAAAA,SAAAA,GAAAH,iBAAgBP,EAAAA;AAGlC,cAAMb,KAA4B,UAAhBwB,KAAA/B,QAAAA,KAAAA,SAAAA,GAASM,UAAAA,WAAOyB,KAAAA,SAAAA,GAAAxB;AAQlC,eAAA,MANGA,OAAcyB,KACbzB,OAAcjC,KAAAA,CAChBrC,KAAKgG,oBAELxF,uBAAAR,MAAIS,GAAA,KAAAwF,EAAAA,EAAJpE,KAAA7B,IAAAA;MAGH;AAEyB,gBAA1BkG,KAAc,UAAdC,KAAApC,GAAQqC,SAAAA,WAAMD,KAAAA,SAAAA,GAAAE,eAAAA,WAAYH,MAAAA,GAAAI,QAASC,CAAAA,OAAAA;AACjC,cAAA,EAAMC,OAAEA,IAAKC,OAAEA,IAAKC,KAAEA,GAAAA,IAAQH;AAC1BC,QAAAA,MAASxG,KAAK2F,cAAca,EAAAA,IAC9BxG,KAAK2F,cAAca,EAAAA,EAAOC,IAAOC,EAAAA,IAEjC1G,KAAK2F,cAAcgB,KAAKF,IAAOC,EAAAA;MAChC,CAAA;AAEH,YAAME,KAAuC,UAA3BC,IAAoB,UAApBC,KAAY,UAAAC,KAAZhD,GAAQqC,SAAAA,WAAIY,KAAAA,SAAAA,GAAEC,WAAAA,WAAMH,KAAAA,SAAAA,GAAEI,UAAAA,WAAKL,IAAAA,SAAAA,EAAED;AAAAA,OAC7B,UAAAO,KAAdpD,GAAQqC,SAAAA,WAAMgB,KAAAA,SAAAA,GAAA/C,SAChBrE,KAAK2F,cAActB,MACjB,IAAIN,GAAQqC,KAAK/B,MAAMgD,IAAAA,MAAUtD,GAAQqC,KAAK/B,MAAMiD,WAAAA,IACpD,GAAGV,KAAY,GAAGA,EAAAA,QAAiB,EAAA,GAAK7C,GAAQqC,KAAK/B,MAAMkD,OAAAA,EAAAA,IAEpDX,MACT5G,KAAK2F,cAActB,MAAMuC,EAAAA;AAG3B,YAAA,EAAMxB,QAAEA,IAAMoC,UAAEA,IAAQC,UAAEA,IAAQjF,QAAEA,IAAMkF,iBAAEA,GAAAA,IAC1C3D,GAAQqC;AAMV,UAJI5D,OAAWC,EAAiBC,QAC9BlC,uBAAAR,MAAI6E,IAAA,GAAA,EAAJhD,KAAA7B,IAAAA,GAGa,gBAAXoF,GAKF,QAJIpF,KAAK2H,8BACPC,GAAYH,EAAAA,GAAAA,KAEdjH,uBAAAR,MAAAA,GAAAA,KAAAA,EAAAA,EAAA6B,KAAA7B,MAAe,WAAWwH,EAAAA;AAGtBxH,WAAK2H,8BACPC,GAAYH,IAAAA,IAAU,GAItBC,MACF1G,OAAO6G,KAAKH,IAAiB,QAAA;AAI/B,YAAA,EAAM3F,aACJA,GAAWC,QACXA,IAAM8F,UACNA,IAAQb,QACRA,IAAMc,UACNA,IAAQC,UACRA,IAAQ3D,OACRA,IAAK4D,iBACLA,IAAeC,gBACfA,GAAAA,IACEnE,GAAQqC,MAIN+B,KAAerF,KAAKC,IAAAA;AAEtBP,MAAAA,OAAWC,EAAiBC,QAShC1C,KAAK2F,cAAcgB,KACjB,SAASmB,MAAY,IAAI9F,EAAAA,EAAAA,QAAgBoD,EAAAA,IACzC,IACA,EACE6B,QAAAA,IACA7B,QAAAA,IACApD,QAAAA,IACA8F,UAAAA,IACAtF,QAAAA,IACA6B,OAAAA,GAAAA,CAAAA,IAIc,UAAA+D,KAAdnB,GAAOC,UAAAA,WAAOmB,KAAAA,SAAAA,GAAAC,kBAChBrF,uBAAAjD,MAAIK,IAAsBL,KAAKuI,eAAetB,GAAOC,MAAMoB,aAAAA,GAAAA,GAAAA,GAG7DtI,KAAKN,UAAUI,OAAO,EACpBkC,QAAAA,IACA8F,UAAAA,IACA/F,aAAAA,GACAS,QAAAA,IACAzB,YAAYgH,QAAAA,KAAAA,SAAAA,GAAU7C,KACtBsD,iBAAiBT,QAAAA,KAAAA,SAAAA,GAAUU,SAC3BC,UAAUzB,QAAAA,KAAAA,SAAAA,GAAQ0B,IAClBC,aAAa3B,QAAAA,KAAAA,SAAAA,GAAQC,OACrB2B,uBAAuBb,QAAAA,KAAAA,SAAAA,GAAUc,eACjCC,iBAAiBf,QAAAA,KAAAA,SAAAA,GAAUgB,SAC3BC,oBAAoBhB,QAAAA,KAAAA,SAAAA,GAAiB/C,KACrCgE,6BAA6BjB,QAAAA,KAAAA,SAAAA,GAAiBkB,cAC9CC,2BAA2BnB,QAAAA,KAAAA,SAAAA,GAAiBoB,YAC5CC,oBAAoBpB,QAAAA,KAAAA,SAAAA,GAAgBqB,MACpCC,eAAetB,QAAAA,KAAAA,SAAAA,GAAgBuB,SAC/BtB,cAAAA,GAAAA,CAAAA,KAxCAnI,KAAKN,UAAUI,OAAO,EACpB0C,QAAAA,IACA2F,cAAAA,GAAAA,CAAAA;IAuCF,CAAA,GAIJuB,IAAuCvJ,IAAAH,MAAA2J,GAAa,MAAWxG,UAAAnD,MAAAA,QAAA,QAAA,aAAA;AAAA,UAAA4J;AAC7D,UAAA;AACE,cAAMC,KAAAA,MAAkB7J,KAAKuD,IAAIyE,SAAS8B,OAAOC,MAC/C,IACA/I,OAAOC,SAAS+I,MAAAA;AAQlB,eANKH,GAAU9E,MACb/E,KAAK2F,cAAcxB,KACjB,yBACkB,UAAlBC,KAAAyF,QAAAA,KAAAA,SAAAA,GAAWxF,UAAAA,WAAOD,KAAAA,SAAAA,GAAAsB,YAAAA,GAGfmE,GAAUzD;MAClB,SAAQlC,IAAAA;AACPlE,aAAK2F,cAAcxB,KAAK,yBAAyBD,GAAIqD,OAAAA;MACtD;IAGF,CAAA,CAAA,CAAA,GA6OD0C,IAAA9J,IAAAH,MAAmE,IAAA,GA4InEkK,IAAA/J,IAAAH,MAAgBmK,GACd,CAAOC,IAAwB3G,OAAgBN,UAAAnD,MAAAA,QAAA,QAAA,aAAA;AAAA,UAAAqD;AAC7C,UAC+C,WAA7C+G,GAAUC,aAAa,gBAAA,KACvB7J,uBAAAR,MAAoBS,GAAA,KAAA6J,GAAAA,EAAAzI,KAApB7B,IAAAA,GACA;AACA,cAAMuK,KAAcH,QAAAA,KAAAA,SAAAA,GAAWC,aAAa,IAAA;AAC5C7J,+BAAAR,MAAkCS,GAAA,KAAA+J,EAAAA,EAAA3I,KAAlC7B,MAAmCoK,EAAAA;AAEnC,cAAMK,KAAAA,MAAiBjK,uBAAAR,MAAiBS,GAAA,KAAAiK,GAAAA,EAAA7I,KAAjB7B,IAAAA,GACjB2K,KAAkBC,GAA4BR,EAAAA;AAIpD,YAFApK,KAAK6K,kBAAkB/K,OAAO,EAAEgL,WAAAA,KAAW,CAAA,GAEvCtK,uBAAAR,MAAuBK,IAAA,GAAA,GAAE;AAC3BL,eAAK2F,cAAc/C,MAAM,iCAAA;AACzB,gBAAMG,KAAMD,KAAKC,IAAAA;AAAAA,gBACXvC,uBAAAR,MAAIK,IAAA,GAAA,GACVL,KAAK2F,cAAc/C,MACjB,2BACCE,KAAKC,IAAAA,IAAQA,IAAKgI,SAAAA,CAAAA;QAEtB;AAGD,cAAMC,KAAoBhL,KAAKiL,sBAAAA;AAE/B,YAAID,GAAkBE,SAAS,GAAG;AAEhC,gBAAMC,KAAkBH,GACrBI,OAAQC,CAAAA,OAAqC,cAAA,OAAnBA,GAAOC,OAAAA,EACjCC,IAAKF,CAAAA,OAAWA,GAAOC,QAAAA,CAAAA;AAEtBH,UAAAA,GAAgBD,SAAS,MAAA,MAErBjH,GACJuH,GACAC,QAAQC,IAAIP,EAAAA,GACZ,IAAA;QAGL;AAED,cAAMQ,KAAc3L,KAAK4L,qBAAAA,GAEnBC,KACDC,OAAA5K,OAAA4K,OAAA5K,OAAA4K,OAAA5K,OAAA4K,OAAA5K,OAAA,CAAA,GAAAyK,EAAAA,GACAhB,EAAAA,GACAF,EAAAA,GAAQ,EAKXT,SAA0B,UAAlBtF,KAAA1E,KAAK+L,kBAAAA,WAAarH,KAAAA,SAAAA,GAAEsF,WAAUhJ,OAAOC,SAAS+I,OAAAA,CAAAA;AAAAA,cAGlDvG,GAAK8G,IAAasB,EAAAA,GAExB7L,KAAK6K,kBAAkB/K,OAAO,EAAEgL,WAAAA,MAAW,CAAA,GAE3CtK,uBAAAR,MAA4BS,GAAA,KAAAuL,GAAAA,EAAAnK,KAA5B7B,MAA6ByK,EAAAA;MAC9B;IACF,CAAA,CAAA,CAAA,GA1tDDzK,KAAKN,YAAYA;EAClB;EAiED,aAAa6J,IAAcE,IAAAA;AAAAA,QAAAA,IAAAA,IAAAA,IAAAA,IAAAA;AACzB,UAAMxE,KAAWT,KAAKyH,MAAMxC,EAAAA;AAC5B,QAAa,eAATF,MAAgC,UAATA,IAAgB;AACzC,UAAA,EAAI2C,cAAEA,GAAAA,IAAiBjH;AACvB,UAAA,CAAKiH,IAAc;AAEjBA,QAAAA,KAAAA,UAAe9H,KADH,IAAI+H,IAAIlH,GAASC,GAAAA,EACVkH,iBAAAA,WAAAA,KAAAA,SAAAA,GAAcC,IAAIC,EAAAA;MACtC;AAC+B,gBAAhCjH,MAAAA,KAAArF,KAAKY,iBAAgB2L,aAAAA,WAAWlH,MAAAA,GAAAxD,KAAA6C,IAAA,EAC9BwH,cAAAA,IACAM,cAAAA,KAAc,CAAA;IAEjB,WAAmB,gBAATjD,IAAsB;AAC/B,YAAMrE,KAAM,IAAIiH,IAAIlH,GAASC,GAAAA,GACvBuH,KAAQvH,GAAIkH,aAAaC,IAAIK,EAAAA,GAC7B1K,KAASkD,GAAIkH,aAChBC,IAAIM,EAAAA,EACJC,MAAM,GAAA,EACNC,IAAAA;AACHrM,6BAAAR,MAAI6E,IAAA,GAAA,EAAJhD,KAAA7B,IAAAA,GAEAA,KAAKN,UAAUI,OAAO,EAAE2M,OAAAA,IAAOzK,QAAAA,IAAQQ,QAAAA,OAAQsK,CAAAA;IAChD,WAAmB,mBAATvD,IAAyB;AAClC,YAAA,EAAMwD,eAAEA,GAAAA,IAAkB/M,KAAKY;AAC/BZ,WAAKY,gBAAgBmM,gBAAgB;AACrC,YAAA,EAAMC,UAAEA,GAAAA,IAAa/H;AAChB+H,MAAAA,OACHhN,KAAKY,gBAAgBqM,aAAa,OAEpCF,QAAAA,MAAAA,GAAgBC,EAAAA;IACjB,WAAmB,mBAATzD,IAAyB;AAClC,YAAA,EAAM2D,eAAEA,IAAaC,MAAEA,GAAAA,IAASlI,IAAAA,EAC1BgI,YAAEA,GAAAA,IAAejN,KAAKY;AAC5BZ,WAAKY,gBAAgBqM,aAAa,MAClCA,QAAAA,MAAAA,GAAaC,IAAeC,EAAAA;IAC7B,MAE8B,WAA7BtH,MAAAD,KAAA5F,KAAKY,iBAAgB2L,aAAAA,WAAQ1G,MAAAA,GAAAhE,KAAA+D,IAAGX,EAAAA;EAEnC;EA0BD,wBAAAgG;AAEE,UAAMmC,KAAiBpN,KAAKqN,WAAWC,iBACrC,qBAAA;AAIF,WAAOC,MAAMC,KAAKJ,EAAAA,EACf7B,IAAKkC,CAAAA,OAAQA,GAAqBC,SAAAA,EAClCtC,OAAQC,CAAAA,OAAAA,CAAAA,CAAqCA,EAAAA;EACjD;EAED,eAAesC,IAAAA;AACb,QAAA,EAAKA,QAAAA,KAAAA,SAAAA,GAASzC,QACZ,QAAO;AAGT,UAAM0C,KACJ,CACEC,IAIAC,OAEDC,CAAAA,OAAAA;AACC/N,WAAKgO,cAEH,IAAIC,YAAY,sBAAsB,EACpCC,QAAQ,EAGN,CAACC,GAAoBN,GAAOlF,IAAIkF,GAAOO,SAAAA,CAAAA,GAAaL,GAAAA,GAEtDM,SAAAA,MACAC,UAAAA,KAAU,CAAA,CAAA,GAGdR,GAAQD,GAAOlF,EAAAA;IAAG;AAGtB3I,SAAK2F,cAAc/C,MACjB,8BAA8B+K,GAAQpC,IAAKgD,CAAAA,OAAMA,GAAE5F,EAAAA,EAAI6F,KAAK,IAAA,CAAA,EAAA;AAE9D,UAAMC,KAAWhD,QAAQC,IACvBiC,QAAAA,KAAAA,SAAAA,GAASpC,IAAWsC,CAAAA,OAAU1K,UAAAnD,MAAAA,QAAA,QAAA,aAAA;AAAA,UAAAqD,IAAAkL;AAC5B,YAAMG,KAAgB1O,KAAKqN,WAAWsB,cACpC,oBAAoBd,GAAOlF,EAAAA,IAAAA;AAE7B,UAAI+F,IAAe;AACjB1O,aAAK2F,cAAc/C,MAAM,yBAAyBiL,GAAOlF,EAAAA;AACzD,cAAA,EAAM+E,WAAEA,GAAAA,IAAcgB;AAEtB,eAAA,UADAtK,KAAAsJ,QAAAA,KAAAA,SAAAA,GAAW3D,UAAAA,WAAAA,MAAAA,GAAAA,KAAAA,EAAAA,GACJ2D;MACR;AAAA,YACK1N,KAAK4O,aACT,yBACA,UACA,QAAQf,GAAOlF,EAAAA,KAAAA;AAEjB,YAAM0C,KAA2B,UAAlB3G,KAAAmK,WAAWC,YAAAA,WAAOpK,KAAAA,SAAAA,GAAGmJ,GAAOlF,EAAAA;AAC3C,aAAO,IAAI8C,QAAQ,CAACqC,IAASiB,OAAAA;AAC3B,YAAA;AACE,gBAAMrB,KAAYrC,GAChBwC,GAAOmB,UACP,EAAEC,SAASjP,KAAKiP,SAASC,KAAKlP,KAAAA,GAC9B4N,GAAqBC,IAAQC,EAAAA,CAAAA;AAE/B,cAAIJ,IAAW;AACb,kBAAMyB,KAAmBtL,SAASuL,cAChC,KAAA;AAEFD,YAAAA,GAAiBE,aAAa,kBAAkBxB,GAAOlF,EAAAA,GACvDwG,GAAiBzB,YAAYA,IAC7B1N,KAAKqN,WAAWiC,YAAYH,EAAAA,GAC5BnP,KAAK6K,kBAAkB0E,UAAU,MAAA;AAAA,kBAAAnM;AAC/BpD,mBAAK2F,cAAc/C,MAAM,oBAAoBiL,GAAOlF,EAAAA,GACtC,UAAdvE,KAAAsJ,GAAU8B,SAAAA,WAAIpL,MAAAA,GAAAvC,KAAA6L,EAAAA;YAAI,CAAA;UAErB;QACF,SAAQ9D,IAAAA;AACPmF,UAAAA,GAAOnF,EAAAA;QACR;MAAA,CAAA;IAEJ,CAAA,CAAA,CAAA,GAGG6F,KAAY,IAAIhE,QAASqC,CAAAA,OAAAA;AAC7B5K,iBAAW,MAAA;AACTlD,aAAK2F,cAAcxB,KAAK,6BAAA,GACxB2J,GAAAA,IAAQ;MAAK,GACZtC,CAAAA;IAAyB,CAAA;AAG9B,WAAOC,QAAQiE,KAAK,CAACjB,IAAUgB,EAAAA,CAAAA;EAChC;EAED,IAAA,8BAAIE;AACF,WAA8D,WAAvD3P,KAAKqK,aAAa,+BAAA;EAC1B;EAiCD,OAAAuF;AAIE,QAAA,CAAM5O,OAAe6O,cAEnB,QAAO7P,KAAK8P,MAAAA;AAGb9P,SAAa+P,WAAW/P,KAAK8P;EAE/B;EAsDK,QAAAA;AAAAA,UAAAA,KAAAA,OAAAA,OAAAA,MAAAA,EAAAA,MAAAA,EAAAA,KAAAA,MAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,WAAAA,UAAAA,MAAAA,QAAAA,QAAAA,aAAAA;AAAAA,UAAAA,IAAAA;AACA9P,WAAKqN,WAAW2C,gBACJ,UAAd5L,KAAApE,KAAKN,cAAAA,WAAS0E,MAAAA,GAAEmL,UAAUvP,KAAKiQ,aAAalQ,KAAKC,IAAAA,CAAAA,GACjDQ,uBAAAR,MAAIS,GAAA,KAAAyP,EAAAA,EAAJrO,KAAA7B,IAAAA,GAEAgB,OAAOmP,iBACL,oBACA3P,uBAAAR,MAAkBM,IAAA,GAAA,EAACC,gBAAAA,IAAAA,MAGP,UAAVmE,KAAA0L,GAAMR,SAAAA,WAAIlL,KAAAA,SAAAA,GAAA7C,KAAA7B,IAAAA;IAAAA,CAAAA;EACjB;EAED,uBAAAqQ;AAAAA,QAAAA;AACExQ,UAAMwQ,qBAAAA,GAENrQ,KAAKN,UAAU4Q,eAAAA,GACftQ,KAAKC,UAAUqQ,eAAAA,GAEqB,UAApClM,KAAA5D,uBAAAR,MAAII,IAAA,GAAA,MAAA,WAAgCgE,MAAAA,GAAAmM,MAAAA,GACpCtN,uBAAAjD,MAAII,IAAiC,MAAI,GAAA,GAEzCY,OAAOwP,oBACL,oBACAhQ,uBAAAR,MAAkBM,IAAA,GAAA,EAACC,gBAAAA;EAEtB;EAEK,0BAA0BkQ,IAAgB/H,IAAAA;AAAAA,WAAAA,UAAAA,MAAAA,QAAAA,QAAAA,aAAAA;AAC9C,UAAIgI;AACJ,YAAMC,KAAaC,GAAcH,EAAAA,GAC3BI,KAAAA,MAAsB7Q,KAAK8Q,iBAAAA;AAOjC,aALID,GAAclM,SAASgM,GAAWF,MAAAA,IACpCC,KAAqB,GAAGhI,EAAAA,IAAYiI,GAAWF,MAAAA,UACtCI,GAAclM,SAASgM,GAAWI,QAAAA,MAC3CL,KAAqB,GAAGhI,EAAAA,IAAYiI,GAAWI,QAAAA,UAE1CL;IAAAA,CAAAA;EACR;EAEK,eAAeM,IAAsBC,IAAAA;AAAAA,WAAAA,UAAAA,MAAAA,QAAAA,QAAAA,aAAAA;AACzC,UAAIA,GAEF,KAAA;AACE,cAAA,EAAMC,MAAEA,GAAAA,IAAAA,MAAelR,KAAKmR,oBAC1BF,IACA,MAAA;AAEF,eAAOC;MACR,SAAQE,IAAAA;AACPpR,aAAK2F,cAActB,MACjB,kCAAkC4M,EAAAA,qBAAuCD,EAAAA,IACzEI,EAAAA;MAEH;AAGH,UAAA;AACE,cAAA,EAAMF,MAAEA,GAAAA,IAAAA,MAAelR,KAAKmR,oBAAoBH,IAAc,MAAA;AAC9D,eAAOE;MACR,SAAQE,IAAAA;AACPpR,aAAK2F,cAActB,MAAM,6BAA6B+M,GAAG7J,OAAAA;MAC1D;AACD,aAAO;IAAA,CAAA;EACR;EAkFK,aACJ8J,IACAC,IACAC,IAAAA;AAAAA,WAAAA,UAAAA,MAAAA,QAAAA,QAAAA,aAAAA;AAAAA,UAAAA,IAAAA;AAEA,YAAA,EAAMC,WACJA,IAASC,QACTA,GAAMC,QACNA,IAAM1P,QACNA,IAAMD,aACNA,IAAWS,QACXA,GAAMkG,UACNA,IAAQE,aACRA,IAAW7H,YACXA,IAAUyH,iBACVA,IAAemJ,aACfA,IAAWlF,OACXA,IAAKpF,MACLA,IAAIoB,SACJA,IAAOmJ,eACPA,IAAa/I,uBACbA,IAAqBE,iBACrBA,IAAe8I,2BACfA,IAAyBC,yBACzBA,IAAuBC,+BACvBA,IAA6BC,uBAC7BA,IAAqBvB,QACrBA,IAAMxH,oBACNA,IAAkBC,6BAClBA,GAA2BE,2BAC3BA,GAAyBE,oBACzBA,GAAkBE,eAClBA,GAAarB,cACbA,EAAAA,IAEEkJ,IADCY,IACDC,OAAAb,IA9BE,CAAA,aAAA,UAAA,UAAA,UAAA,eAAA,UAAA,YAAA,eAAA,cAAA,mBAAA,eAAA,SAAA,QAAA,WAAA,iBAAA,yBAAA,mBAAA,6BAAA,2BAAA,iCAAA,yBAAA,UAAA,sBAAA,+BAAA,6BAAA,sBAAA,iBAAA,cAAA,CAAA;AAgCN,UAAIc,KACAC,KACAC;AACJ,YAAMC,MAAeC,GAAAA,GAAAA,EACfC,eAAEA,IAAAA,IAAkBxS,MAAAA,EACpByS,mBAAEA,IAAAA,IAAsBzS,MACxB0S,MAAU1S,KAAKuD,IAAIoP,mBAAAA,GACnBC,MAAAA,MAAmB5S,KAAK6S,cAAAA,GACxBC,MAAAA,MAAsB9S,KAAK+S,iBAAAA,GAC3BC,MAAelH,OAAOmH,QAAQH,IAAcI,SAAS,CAAE,CAAA,EAAEC,OAE7D,CAACC,IAAAA,CAAMC,IAAKC,EAAAA,OACVF,GAAIC,EAAAA,IAAOC,GAAMC,SACVH,KAET,CAA4B,CAAA,GAExBI,MACJ1B,MAA2BD,KACvB,EACE4B,aAAa3B,IACb4B,eAAe7B,IACf8B,mBAAmB5B,GAAAA,IAAAA,QAGrBhG,MAAgB/L,KAAK+L,gBACvB,EACE6H,UAAU5T,KAAK+L,cAAc6H,UAC7BjT,eAAeX,KAAK+L,cAAcpL,eAClCkT,eAAe7T,KAAK+L,cAAc8H,eAClCC,eAAe9T,KAAK+L,cAAc+H,eAClCC,mBAAmB/T,KAAK+L,cAAcgI,mBACtCC,aAAahU,KAAK+L,cAAciI,YAAAA,IAAAA;AAGtC,UAAIC,MAA8C,CAAA;AAGlD,UAAA,CAAKlS,IAAa;AAChB,cAAMuG,KAAgB,CAAA,GAChBsK,IAAWtK,iBAAiB,CAAA,GAAA,GAC5BsK,IAAWsB,cAAc,CAAA,CAAA;AAG/B,YAAItB,IAAWuB,YAAY;AACzB,cAAIC,KAAmB,CAAA;AAAA,WAAA,EAErBjC,eAAAA,KACAE,wBAAAA,KACAD,iBAAAA,KACA9J,eAAe8L,IACfC,kBAAkBJ,IAAAA,IAChBK,GACF,EACE5B,SAAAA,KACArL,MAAAA,IACAoF,OAAAA,IACA6F,cAAAA,KACA7K,UAAU8M,GAAY7B,GAAAA,EAAAA,GAExBE,IAAWuB,UAAAA,IAEb7L,GAAckM,KAAAA,GAASJ,MAAoB,CAAA,CAAA;QAC5C,MAAUxB,CAAAA,IAAW6B,YAAAA,EACjBtC,eAAAA,KAAeE,wBAAAA,IAAAA,IAA2BqC,GAC3C9B,IAAW6B,WACX,EACE/B,SAAAA,KACArL,MAAAA,IACAoF,OAAAA,IACA6F,cAAAA,KACA7K,UAAU8M,GAAY7B,GAAAA,EAAAA,CAAAA,KAI1BN,MAAkBQ,IAAWR,iBAC7BD,MAAgBS,IAAWT;AAW7B,YARAlP,uBAAAjD,MAAAA,IAA0BA,KAAKuI,eAAeD,EAAAA,GAAc,GAAA,GACxDsK,IAAW+B,sBAAsB/B,IAAWgC,iBAAAA,MACxCC,EAAqBjC,IAAWgC,gBAAgB5U,KAAKiP,OAAAA,IAE3D6F,EAAAA,GAAAA,CAIGC,GAA+B5C,KAAeF,CAAAA,GAAiB;AAClE,gBAAMlO,KAAAA,MAAgB/D,KAAKuD,IAAIC,KAAKuG,MAClC0H,GAAAA,OAAAA,OAAAA,OAAAA,OAAAA,OAAAA,OAAAA,OAAAA,OAAAA,EAEEC,QAAAA,IACA8B,cAAAA,IAAAA,GACGvB,CAAAA,GACH,EAAA+C,QAAQhV,KAAKgV,OAAAA,CAAAA,GACTrD,MAAe,EAAEA,aAAAA,GAAAA,CAAAA,GAAc,EACnClK,UAAU8M,GAAY7B,GAAAA,GACtBJ,cAAAA,KACA7B,QAAQG,GAAcH,EAAAA,EAAQA,QAC9B1E,eAAAA,KACAyG,eAAAA,KACAC,mBAAAA,IAAAA,CAAAA,GAEFJ,KACA,IACAS,IAAc5Q,mBACd8Q,KAEKlH,OAAA5K,OAAA4K,OAAA5K,OAAA4K,OAAA5K,OAAA4K,OAAA5K,OAAA4K,OAAA5K,OAAA,CAAA,GAAAlB,KAAKiV,gBAAAA,GACJ5N,KAAO,EAAE6E,cAAc7E,IAAMmF,cAAAA,KAAc,IAAS,CAAA,CAAA,GACpDyF,EAAeiD,uBAAuB,EAAE1I,cAAAA,KAAc,CAAA,GACtDC,KAAQ,EAAEA,OAAAA,GAAAA,IAAU,CAAA,CAAA,GACpBwF,EAAekD,gBACf,EAAEC,YAAYnD,EAAekD,cAAAA,IAC7B,CAAA,CAAA,CAAA;AAQR,iBAJA3U,uBAAAR,MAAuB4E,KAAA,GAAA,EAAA/C,KAAvB7B,MAAwB+D,EAAAA,GAAAA,MACM,iBAAX,UAAfK,KAAAL,QAAAA,KAAAA,SAAAA,GAASqC,SAAAA,WAAMhC,KAAAA,SAAAA,GAAAgB,WACjBpF,KAAKN,UAAUI,OAAO,EAAEuH,MAAAA,QAAiBoF,OAAAA,OAAOK,CAAAA;QAGnD;MACF;AAYD,UAVA9M,KAAK2F,cAAc/C,MACjB,iCACA4B,KAAKC,UAAU,EACbgE,SAAAA,IACApB,MAAAA,IACAuK,eAAAA,IACAyD,eAAe9D,GAAU,MAAA,GACzB+D,wBAAwB/D,GAAU,eAAA,EAAA,CAAA,CAAA,GAIpC9I,OACE8I,GAAU,MAAA,KAAWlK,MACpBkK,GAAU,eAAA,KAAoBK,KACjC;AACA5R,aAAK2F,cAAc/C,MAAM,0BAA0Bb,EAAAA;AACnD,cAAMwT,KAAU,IAAIC,iBAAiBzT,EAAAA;AAarC,eAZA/B,KAAK2F,cAAc/C,MACjB,oCACA4B,KAAKC,UAAU,EAAE4C,MAAAA,IAAMuK,eAAAA,GAAAA,CAAAA,CAAAA,GAEzB2D,GAAQE,YAAY,EAClBrP,MAAM,EAAEiB,MAAAA,IAAMuK,eAAAA,GAAAA,GACdpP,QAAQ,OAAA,CAAA,GAEVxC,KAAK2F,cAAc/C,MAAM,+CAAA,GACzB2S,GAAQG,MAAAA,GACR1V,KAAK2F,cAAc/C,MAAM,sCAAA,GAAA,KACzB5B,OAAO0U,MAAAA;MAER;AAID,UACE3T,OACEwP,GAAU,OAAA,KAAY9E,MACrB8E,GAAU,MAAA,KAAWlK,MACrBkK,GAAU,eAAA,KAAoBK,KACjC;AACA,cAAM7N,KAAAA,MAAgB/D,KAAKuD,IAAIC,KAAKC,KAClC1B,IACAC,IACA0B,EAAoBiS,QACpB/C,IAAWW,SACXT,IAAc5Q,mBACd,EACEuK,OAAAA,IACAP,cAAc7E,IACduK,eAAAA,GAAAA,CAAAA;AASJ,eANApR,uBAAAR,MAAuB4E,KAAA,GAAA,EAAA/C,KAAvB7B,MAAwB+D,EAAAA,GAAAA,KACxB/D,KAAKN,UAAUI,OAAO,EACpB2M,OAAAA,QACApF,MAAAA,QACAuK,eAAAA,OAAe9E,CAAAA;MAGlB;AAOD,UACEtK,MAAWC,EAAiBmT,YANZ,CAChB,sBACA,+BACA,2BAAA,EAIUC,KAAMC,CAAAA,OAAavE,GAAUuE,EAAAA,CAAAA,GACvC;AACA,YAAA,CAAK7M,MAAAA,CAAuBC,EAE1B,QAAA,KADAlJ,KAAK2F,cAActB,MAAM,0CAAA;AAK3B0R,WACE9M,IACAC,GACAE,KAA6B,IAC7B4M,EAAAA;MAEH;AAED,UACExT,MAAWC,EAAiBsF,aAC3BwJ,GAAU,YAAA,KAAiBA,GAAU,kBAAA,IACtC;AACA,YAAA,CAAKxQ,GAEH,QAAA,KADAf,KAAK2F,cAActB,MAAM,0BAAA;AAG3B,YAA8B,cAA1B2N,MAAuCnO,SAASC,OAKlD,QAAA,KAHA9D,KAAKN,UAAUI,OAAO,EACpBF,kBAAAA,KAAkB,CAAA;AAMtB,YADAI,KAAK2F,cAAc/C,MAAM,qBAAqB4F,EAAAA,EAAAA,GAC1CA,IAAiB;AAEnBxI,eAAK2F,cAAc/C,MAAM,2BAAA;AACzB,gBAAMqT,KAAQC,GAAkBnV,IAAY,KAAK,KAAK,GAAA;AAEtDf,eAAK2F,cAAc/C,MAAM,4BAAA;AACzB,gBAAM2S,KAAU,IAAIC,iBAAiBzT,EAAAA;AAErC/B,eAAK2F,cAAc/C,MAAM,iCAAA;AAEzB,gBAAMuT,KAAaC,YAAY,MAAA;AACzBH,YAAAA,GAAMI,WACRrW,KAAK2F,cAAc/C,MACjB,mEAAA,GAEF0T,cAAcH,EAAAA,GAGd3V,uBAAAR,MAAAA,GAAAA,KAAAA,EAAAA,EAAA6B,KAAA7B,MAAe,eAAe,CAAA,CAAA,GAE9BA,KAAK2F,cAAc/C,MAAM,iBAAA,GACzB2S,GAAQG,MAAAA;UACT,GACA,GAAA;AAEH1V,eAAK2F,cAAc/C,MAAM,sCAAA;AACzB,gBAAM2T,KAAiBC,CAAAA,OAAAA;AAYrB,gBAXAxW,KAAK2F,cAAc/C,MACjB,mCACA4B,KAAKC,UAAU+R,EAAAA,CAAAA,GAEjBxW,KAAK2F,cAAc/C,MACjB,qBACA4B,KAAKC,UAAU,EACbgS,aAAaD,GAAMxM,QACnB0M,sBAAsB1V,OAAOC,SAAS+I,OAAAA,CAAAA,CAAAA,GAGtCwM,GAAMxM,WAAWhJ,OAAOC,SAAS+I,OAAQ;AAE7ChK,iBAAK2F,cAAc/C,MACjB,gDAAA;AAGF,kBAAA,EAAMJ,QAAEA,IAAM4D,MAAEA,GAAAA,IAASoQ,GAAMpQ;AAC/BpG,iBAAK2F,cAAc/C,MACjB,uBAAuBJ,EAAAA,WAAiBgC,KAAKC,UAAU2B,EAAAA,CAAAA,EAAAA,GAE1C,WAAX5D,OACFxC,KAAK2F,cAAc/C,MACjB,iDAAA,GAEF5C,KAAKN,UAAUI,OAAO,EACpBuH,MAAMjB,GAAKiB,MACXuK,eAAexL,GAAKwL,cAAAA,CAAAA;UAEvB;AAGH2D,UAAAA,GAAQoB,YAAYJ;QACrB,MACCvW,MAAKc,eAAeC,EAAAA;AAEtB;MACD;AAED,UACEyB,MAAWC,EAAiBmU,kBAC5BpU,MAAWC,EAAiBoU,aAC5B;AACA,YAAA,CAAKhO,MAAAA,CAA0BE,GAI7B,QAAA,KAHA/I,KAAK2F,cAActB,MACjB,gDAAA;AAQJ,YAAIY,IACA6R;AAJgC,kBAApCpS,KAAAlE,uBAAAR,MAAII,IAAA,GAAA,MAAA,WAAgCsE,MAAAA,GAAA6L,MAAAA,GACpCtN,uBAAAjD,MAAII,IAAiC,MAAI,GAAA;AAKzC,YAAA;AACE6E,UAAAA,KACEzC,MAAWC,EAAiBmU,iBAAAA,MAClB5W,KAAKuD,IAAIyE,SAAS+O,QAAQC,OAAOjO,EAAAA,IAAAA,MACjC/I,KAAKuD,IAAIyE,SAAS+O,QAAQ1K,IAAItD,EAAAA;QAC3C,SAAQa,IAAAA;AACQ,kCAAXA,GAAEqN,OAGJjX,KAAK2F,cAAcxB,KAAK,6BAA6ByF,GAAErC,OAAAA,IACnC,sBAAXqC,GAAEqN,QAEXjX,KAAK2F,cAActB,MAAMuF,GAAErC,OAAAA,GAE7BuP,KAAUlN,GAAEqN;QACb;AAED,cAAMlT,KAAAA,MAAgB/D,KAAKuD,IAAIC,KAAKC,KAClC1B,IACAC,IACA0B,EAAoBiS,QACpB/C,IAAWW,SACXT,IAAc5Q,mBACd,EACE4G,eAAeD,IACf5D,UAAAA,IACA6R,SAAAA,GAAAA,CAAAA;AAGJtW,+BAAAR,MAAuB4E,KAAA,GAAA,EAAA/C,KAAvB7B,MAAwB+D,EAAAA;MACzB;AAED,UAAIvB,MAAWC,EAAiByU,aAmB9B,QAfAlX,KAAKY,gBAAgB2L,WAAkB4K,CAAAA,OAA8BhU,UAAAnD,MAAAA,QAAA,QAAA,aAAA;AACnE,cAAM+D,KAAAA,MAAgB/D,KAAKuD,IAAIC,KAAKC,KAClC1B,IACAC,IACA0B,EAAoBiS,QACpB/C,IAAWW,SACXT,IAAc5Q,mBACdiV,EAAAA;AAEF3W,+BAAAR,MAAuB4E,KAAA,GAAA,EAAA/C,KAAvB7B,MAAwB+D,EAAAA;MAC1B,CAAA,GAAA,KAIAvD,uBAAAR,MAAAA,GAAAA,KAAAA,EAAAA,EAAA6B,KAAA7B,MAAyBsJ,GAAoBE,CAAAA;AAc/C,UAVI+H,GAAU,QAAA,KACZ/Q,uBAAAR,MAA2B8B,IAAA,GAAA,EAAAD,KAA3B7B,MACE+B,IACAC,IACA4Q,IAAWW,SACXT,IAAc5Q,iBAAAA,GAAAA,CAKbwG,MAAAA,CAAayJ,IAEhB,QAAA,KADAnS,KAAK2F,cAAcxB,KAAK,6BAAA;AAI1B,YAAMiT,MAAgBjF,OAAiBzJ,IAGjCgI,MAAAA,MAAmC1Q,KAAKqX,0BAC5C5G,IACA2G,GAAAA,GAAAA,EAGIjC,eACJA,KAAamC,YACbA,KAAUC,sBACVA,KAAoBC,cACpBA,KAAYC,iBACZA,IAAAA,IACExF,GAGEyF,MAAsC,EAC1CC,WAAWC,EAAsB5V,IAAQsP,GAAUtP,MAAAA,GACnD4G,aAAAA,OAAAA,OAAAA,OAAAA,OAAAA,CAAAA,GACKA,EAAAA,GAAW,EACduE,MACKrB,OAAA5K,OAAA4K,OAAA5K,OAAA,CAAA,GAAAlB,KAAKiV,gBAAAA,GACLrM,QAAAA,KAAAA,SAAAA,GAAauE,IAAAA,GAElB1F,UAAU,EACRiL,SAAAA,KACAuE,MAAMjX,KAAKuD,IAAIsU,uBAAAA,KAA4BnF,IAAAA,GAE7C2B,kBAAgBvI,OAAA5K,OAAA4K,OAAA5K,OAAA4K,OAAA5K,OAAA,CAAA,GACX0R,IAAWyB,gBAAAA,GACXJ,GAAAA,GACArL,QAAAA,KAAAA,SAAAA,GAAayL,gBAAAA,EAAAA,CAAAA,GAGpBrD,cAAc,GAAGoG,GAAAA,SACjBnG,oBAAoBP,KACpBhI,UAAU0O,KACVtP,UAAUuJ,GAAavJ,YAAYsK,KACnCqF,iBAAAA,KACAtC,eAAAA,KACAmC,YAAAA,KACAC,sBAAAA,KACAC,cAAAA,KACAhV,QAAAA,EAAAA,GAGIiF,MAAW8M,GAAY7B,GAAAA;AAKzBqC,SAA+B5C,KAAeF,CAAAA,IAChDyF,IAAgBjU,OAAO,CAAOyJ,IAAe4K,OAAU3U,UAAAnD,MAAAA,QAAA,QAAA,aAAA;AACrD,cAAM+X,KAAAA,MAAY/X,KAAKuD,IAAIC,KAAKuG,MAC9B0H,GAAAA,OAAAA,OAAAA,OAAAA,OAAAA,OAAAA,OAAAA,OAAAA,OAAAA,EAEEC,QAAAA,IACA8B,cAAAA,IAAAA,GACGvB,CAAAA,GAAc,EACjBxK,UAAAA,KACAuQ,SAAShY,KAAKgY,SACd1F,cAAAA,KACA0C,QAAQhV,KAAKgV,OAAAA,CAAAA,GACTrD,MAAe,EAAEA,aAAAA,GAAAA,CAAAA,GACrB,EAAAlB,QAAQG,GAAcH,EAAAA,EAAQA,QAC9B1E,eAAAA,KACAyG,eAAAA,KACAC,mBAAAA,IAAAA,CAAAA,GAEFJ,KACAnF,IACA4F,IAAc5Q,mBACd8Q,KAEKlH,OAAA5K,OAAA4K,OAAA5K,OAAA4K,OAAA5K,OAAA4K,OAAA5K,OAAA4K,OAAA5K,OAAA,CAAA,GAAAlB,KAAKiV,gBAAAA,GACLgD,GAAsBH,EAAAA,CAAAA,GACrBzQ,MAAQ,EAAE6E,cAAc7E,IAAMmF,cAAAA,KAAc,CAAA,GAC5CyF,EAAeiD,uBAAuB,EAAE1I,cAAAA,KAAc,CAAA,GACtDC,MAAS,EAAEA,OAAAA,GAAAA,CAAAA,CAAAA;AAMnB,eAFAjM,uBAAAR,MAAuB4E,KAAA,GAAA,EAAA/C,KAAvB7B,MAAwB+X,EAAAA,GAEjBA;MACT,CAAA,KAEAxG,GAAU,WAAA,KACVA,GAAU,SAAA,KACVA,GAAU,aAAA,KACVA,GAAU,QAAA,OAEVmG,IAAgBjU,OAAO,CAAOyJ,IAAeiK,OAAShU,UAAAnD,MAAAA,QAAA,QAAA,aAAA;AACpD,cAAM+X,KAAAA,MAAY/X,KAAKuD,IAAIC,KAAKC,KAC9B1B,IACAC,IACAkL,IACA0F,IAAWW,SACXT,IAAc5Q,mBACd+V,GAAsBd,EAAAA,CAAAA;AAKxB,eAFA3W,uBAAAR,MAAuB4E,KAAA,GAAA,EAAA/C,KAAvB7B,MAAwB+X,EAAAA,GAEjBA;MACT,CAAA,IAGF/X,KAAK2F,cAAc/C,MAAM,wBAAwB8U,IAAgBhP,QAAAA,GAAAA,MAE3DlI,uBAAAR,MAAwBS,GAAA,KAAAyX,EAAAA,EAAArW,KAAxB7B,MAAyB0X,GAAAA,GAG/B1X,KAAKC,UAAUH,OAAO4X,GAAAA;IAAAA,CAAAA;EACvB;EA4YK,aAAarG,IAAyBC,IAAAA;AAAAA,WAAAA,UAAAA,MAAAA,QAAAA,QAAAA,aAAAA;AAAAA,UAAAA,IAAAA;AAC1C,YAAA,EAAMN,cAAEA,IAAYC,oBAAEA,IAAkB0G,WAAEA,IAASlU,MAAEA,IAAImF,aAAEA,GAAAA,IACzDyI;AAEFrR,WAAK2F,cAAc/C,MAAM,yBAAA;AAEzB,YAAMuV,KAAetU,SAASuL,cAAc,UAAA;AAC5C+I,MAAAA,GAAazW,YAAAA,MAAkB1B,KAAKoY,eAClCpH,IACAC,EAAAA;AAGF,YAAMoH,IAAQF,GAAaG,QAAQC,UAAAA,IAAU,GAEvCC,KAA0BxY,KAAKwY,wBAAwBL,EAAAA;AAGxDnY,WAAKuD,IAAIyE,SAAS+O,QAAQ0B,YAAAA,IAAAA,MAGvBjY,uBAAAR,MAAIS,GAAA,KAAAiY,GAAAA,EAAJ7W,KAAA7B,MAAkCqY,GAAO5U,EAAAA,IAF/CkV,EAAuBN,CAAAA,GAAAA,CAMvBhH,GAAaoG,oBACI,UAAhBrT,KAAAwE,GAAYuE,SAAAA,WAAI/I,KAAAA,SAAAA,GAAEsO,aACA,UAAAkG,KAAlBhQ,GAAYuE,SAAAA,WAAMzI,KAAAA,SAAAA,GAAAmU,WAEdjQ,GAAYuE,SACfvE,GAAYuE,OAAO,CAAA,IAErBvE,GAAYuE,KAAKuF,UAAUrB,GAAaoG,iBACxC7O,GAAYuE,KAAK0L,QAAQxH,GAAaoG,kBAGxCqB,EACET,GACAzP,IACAA,GAAYyL,kBACZrU,KAAK+Y,YACL/Y,KAAK2F,aAAAA;AAIP,YAAA,EAAMqT,KAAEA,GAAAA,IAAAA,MAAchZ,KAAKiZ,oBAAAA;AAC3BC,QAA8Bb,GAAOW,EAAAA;AAErC,YAAMG,KAAiB,MAAWhW,UAAAnD,MAAAA,QAAA,QAAA,aAAA;AAAA,YAAAqD,IAAA+V;AAAA,cAC1BZ;AAGN,cAAMa,KAAcrZ,KAAKsB;AACzBgY,UAAgBD,IAAgC,UAAnBhU,KAAAuD,QAAAA,KAAAA,SAAAA,GAAa2Q,SAAAA,WAAMlU,KAAAA,SAAAA,GAAAmU,KAAAA,GAEhDC,GAAgBJ,IAAgC,UAAnBzT,KAAAgD,QAAAA,KAAAA,SAAAA,GAAa8Q,SAAAA,WAAM9T,KAAAA,SAAAA,GAAA4T,KAAAA,GAGhDG,GAAWN,IAAahB,GAAOzP,GAAYgR,SAAS5Z,KAAK2F,aAAAA,GAEzD0T,GAAYQ,gBAAgBxB,CAAAA;AAG5B,cAAMyB,KAAAA,CAAiBxI,GAAUN;AAGjC9N,mBAAW,MAAA;AACT1C,iCAAAR,MAAIS,GAAA,KAAAsZ,GAAAA,EAAJlY,KAAA7B,IAAAA,GAEIA,KAAKga,kBACPC,IAA2BZ,EAAAA,GAI7Ba,GAA4Bb,IAAazQ,EAAAA,GAEzCpI,uBAAAR,MAAIS,GAAA,KAAA0Z,GAAAA,EAAJtY,KAAA7B,MAAyB,EACvB8Z,eAAAA,IACA1Y,gBAAAA,OACA0G,UAAUuJ,GAAavJ,SAAAA,CAAAA,GAGzBsS,GAAgBf,IAAarZ,KAAKqa,WAAWP,EAAAA;QAAc,CAAA,GAG7DtZ,uBAAAR,MAAaS,GAAA,KAAA6Z,GAAAA,EAAAzY,KAAb7B,MAAcyD,EAAAA;AAEC4V,QAAAA,GAAY1K,cACzB,IAAI4L,CAAAA,aAAAA,KAIJ9W,GAAKC,EAAoBC,SAAS,CAAA,CAAA;MAEtC,CAAA;AAGKgU,MAAAA,KAKLnX,uBAAAR,MAAgCS,GAAA,KAAAmB,EAAAA,EAAAC,KAAhC7B,MAAiCmZ,EAAAA,IAJ/BA,GAAAA;IAAAA,CAAAA;EAKH;EAmBD,YAAAqB;AACE,WAAOjN,MAAMC,KACXxN,KAAKqN,WAAWC,iBACd,0BAA0BmN,CAAAA,IAAAA,CAAAA;EAG/B;AAAA;AAAA,KAAA,oBAAA,WAAA,KAAA,oBAAA,WAAA,KAAA,oBAAA,WAAA,KAAA,oBAAA,WAAA,KAAA,oBAAA,WAAA,KAAA,oBAAA,WAAA,KAAA,oBAAA,WAAA,KAAA,oBAAA,WAAAC,MAAA,oBAAA,WAAAC,MAAA,oBAAA,WAAAC,MAAA,oBAAA,WAAAC,MAAA,oBAAA,WAAA,IAAA,oBAAA,WAAA,KAAA,WAAA;AAj/CMhX,WAASC,UAEZZ,WAAW,MAAA;AAETlD,SAAKN,UAAUI,OAAO,EAAEF,kBAAAA,MAAkB,CAAA;EAAQ,GACjD,GAAA;AAEP,GA2BEkb,KAAA,SAAA7T,IACA8T,IACAtX,IAAAA;AAAAA,SAAAA,UAAAA,MAAAA,QAAAA,QAAAA,aAAAA;AAAAA,QAAAA;AAEA,YAAA,UAAIW,KAAApE,KAAK+L,kBAAAA,WAAAA,KAAAA,SAAAA,GAAepL,kBAAiB,KAChC,IAAI8K,QAAkBqC,CAAAA,OAAAA;AAC3B9N,WAAKY,gBAAgBqM,aAAaxJ,IAClCzD,KAAKY,gBAAgBmM,gBAAgBe,IACrCtN,uBAAAR,MAAIS,GAAA,KAAAua,EAAAA,EAAJnZ,KAAA7B,MAAyB,gBAAgB,EAAEiH,QAAAA,IAAQ8T,SAAAA,GAAAA,CAAAA;IAAU,CAAA;EAAA,CAAA;AAAA,GAAA,KAAA,SAOhD9T,IAAAA;AAAAA,MAAAA;AAAAA,GAAAA,UACb7C,KAAApE,KAAK+L,kBAAAA,WAAAA,KAAAA,SAAAA,GAAepL,kBAAiB,KACvCH,uBAAAR,MAAwBS,GAAA,KAAAua,EAAAA,EAAAnZ,KAAxB7B,MAAyB,eAAe,EAAEiH,QAAAA,GAAAA,CAAAA;AAE9C,GAAC+T,KAAA,SA+CmBzR,IAAcE,IAAAA;AAChCjJ,yBAAAR,MAAcS,GAAA,KAAA8E,EAAAA,EAAA1D,KAAd7B,MAAe,UAAU,EACvBuJ,MAAAA,IACAE,SAAAA,GAAAA,CAAAA;AAEJ,GAuHoBwR,KAAA,SAAA,EAAArU,WAClBA,IAASsU,WACTA,GAAAA,GAAAA;AAKA,QAAMC,KAAoB,MAAA;AAAA,QAAA9X;AACxB,QAAI+X,KAAuBxU;AAC3B,QAAA;AACEwU,MAAAA,MAC0B,UAAxBhX,KAAApE,KAAKqb,qBAAAA,WAAmBjX,KAAAA,SAAAA,GAAAvC,KAAA7B,MAAA,EACtBsb,MAAM1U,IACN2C,MAAM2R,GAAAA,CAAAA,MACFtU;IACT,SAAQgD,IAAAA;AACP5J,WAAK2F,cAActB,MAAM,oCAAoCuF,GAAErC,OAAAA;IAChE;AACDgU,IAAAA,GACEvb,KAAKsB,oBACL,iBACA8Z,EAAAA;EACD;AAKHpb,OAAKmQ,iBAAiB,kBAAkBgL,IAAmB,EAAEK,MAAAA,KAAM,CAAA,GACnEL,GAAAA;AACF,GAACjL,KAAA,WAAA;AAAA,MAAA9M,IAAAC,IAAA+V;AAAA,YAgBChV,KAAApE,KAAKC,cAAAA,WAAAA,MAAAA,GAAWsP,UACdvP,KAAKyb,aAAa1b,KAAKC,IAAAA,GACtBoE,CAAAA,OAAAA;AACC,QAAAM,KAAAN,GAAAwE,aAAwCA,KAAAA,OAAAA,WAAgBlE,KAAA,CAAA,IAAAtB,IAA3C,CAAwC,aAAA,WAAA,CAAA,GAClD8D,KAAKgL,OAAA9N,IAFT,CAAA,aAAA,CAAA;AAGK,WAAM0H,OAAA5K,OAAA4K,OAAA5K,OAAA,CAAA,GAAAgG,EAAAA,GAAO,EAAA0B,aAAAA,GAAAA,CAAAA;EAAc,CAAA,GAAA,UAGnClE,KAAA1E,KAAKC,cAAAA,WAAAA,MAAAA,GAAWsP,UACd/O,uBAAAR,MAAIS,GAAA,KAAAwa,EAAAA,EAAqBlb,KAAKC,IAAAA,GAC7BkH,CAAAA,OAAAA;AAAAA,QAAAA,IAAAA;AAAU,WAAC,EACVN,WAA6B,UAAlBxC,KAAA8C,QAAAA,KAAAA,SAAAA,GAAO0B,gBAAAA,WAAWxE,KAAAA,SAAAA,GAAEwC,WAC/BsU,WAA6B,UAAlBxW,KAAAwC,QAAAA,KAAAA,SAAAA,GAAO0B,gBAAAA,WAAWlE,KAAAA,SAAAA,GAAEwW,UAAAA;EAC/B,GACF,EAAEQ,aAAAA,KAAa,CAAA,GAAA,UAGjBrW,KAAArF,KAAKC,cAAAA,WAAAA,MAAAA,GAAWsP,UACd/O,uBAAAR,MAAIS,GAAA,KAAAkb,EAAAA,EAAwB5b,KAAKC,IAAAA,GAChCkH,CAAAA,OAAAA;AAAAA,QAAAA,IAAAA;AAAU,WAAC,EACVN,WAA6B,UAAlBxC,KAAA8C,QAAAA,KAAAA,SAAAA,GAAO0B,gBAAAA,WAAWxE,KAAAA,SAAAA,GAAEwC,WAC/BsU,WAA6B,UAAlBxW,KAAAwC,QAAAA,KAAAA,SAAAA,GAAO0B,gBAAAA,WAAWlE,KAAAA,SAAAA,GAAEwW,UAAAA;EAC/B,GACF,EAAEQ,aAAAA,KAAa,CAAA;AAEnB,GAIuBC,KAAA,SAAA,EAAA/U,WAAEA,IAASsU,WAAEA,GAAAA,GAAAA;AAAAA,GAC9BA,MAAatU,QACf5G,KAAKsB,mBACFgM,iBAAiB,2CAAA,EACjBhH,QAASsV,CAAAA,OAAAA;AAGRA,IAAAA,GAAYvO,WACTC,iBAAiB,6BAAA,EACjBhH,QAAS6Q,CAAAA,OAAAA;AAERA,MAAAA,GAAM7D,QAAQ;IAAE,CAAA;EAChB,CAAA,GAKR8G,GAAgBpa,KAAKsB,oBAAoBtB,KAAKqa,WAAAA,KAAW;AAE7D,GAACpU,KAAA,WAAA;AAAA,SAAA,UAAA,MAAA,QAAA,QAAA,aAAA;AAuECjG,SAAK2F,cAAc/C,MAAM,4BAAA;AACzB,UAAMiZ,KAAAA,MAAwB7b,KAAK8b,qBAAAA;AACnC9b,SAAK+b,MAAAA;AAGDF,IAAAA,QAAAA,MAFsB7b,KAAK8b,qBAAAA,MAG7B9b,KAAK2F,cAAc/C,MACjB,qDAAA,GAEF5C,KAAKN,UAAUI,OAAO,EACpBkC,QAAQ,MACRD,aAAa,KAAA,CAAA,KAGf/B,KAAK2F,cAActB,MACjB,qDAAA;EAAA,CAAA;AAAA,GAAA,KAAA,SAOoBqT,IAAAA;AAAAA,SAAAA,UAAAA,MAAAA,QAAAA,QAAAA,aAAAA;AAAAA,QAAAA;AACxB,UAAMhT,KAAAoH,OAAA5K,OAAA4K,OAAA5K,OAAA,CAAA,GACDlB,KAAKC,UAAUsC,OAAAA,GACfmV,EAAAA,GAAAA,EAFCjU,MAAEA,IAAIqE,UAAEA,GAAAA,IAGbpD,IAH0BwC,KAArBgL,OAAAxN,IAAA,CAAA,QAAA,UAAA,CAAA,GAKAqW,KAAUiB,GAAkC9U,EAAAA;AAGlD,QAAI9F,KAAAA,MAAuBZ,uBAAAR,MAAwBS,GAAA,KAAAqa,EAAAA,EAAAjZ,KAAxB7B,MACzB8H,IACAiT,IACAtX,EAAAA;AAEGrC,IAAAA,OAEHA,KAAiB6a,QAAAA,MACU,UAAnB7X,KAAApE,KAAKkc,mBAAAA,WAAc9X,KAAAA,SAAAA,GAAAvC,KAAA7B,MAAG8H,IAAUiT,IAAStX,IAAMzD,IAAAA,CAAAA;AAIzD,UAAM8Z,KAAAA,CAAiB9Z,KAAKC,UAAUsC,QAAQyO;AAI9C,QAHAxQ,uBAAAR,MAA4BmB,IAAA,GAAA,EAAAU,KAA5B7B,MAA6BoB,EAAAA,GAGzBZ,uBAAAR,MAAIa,IAAA,GAAA,MAAyBO,IAAgB;AAC/C,YAAA,CAAO+a,IAAaC,EAAAA,IAAY,CAAC,QAAQ,QAAA,EAAUC,KAAK,MACtDjb,KAAAA,KAAsB,CAAA;AAExBpB,WAAK2F,cAAc/C,MACjB,kBAAkBwZ,EAAAA,cAAsBD,EAAAA,SAAAA,GAG1ClZ,uBAAAjD,MAAIa,IAAuBO,IAAc,GAAA,GAErCA,KAGFpB,KAAKC,UAAUqQ,eAAAA,IAGf9P,uBAAAR,MAAIS,GAAA,KAAAyP,EAAAA,EAAJrO,KAAA7B,IAAAA;IAEH;AAEGoB,IAAAA,OACFpB,KAAK2F,cAAc/C,MAAM,yBAAA,GACzBpC,uBAAAR,MAAIS,GAAA,KAAA0Z,GAAAA,EAAJtY,KAAA7B,MAAyB,EACvB8Z,eAAAA,IACA1Y,gBAAAA,IACA0G,UAAU4P,GAAgB5P,SAAAA,CAAAA,IAI9B9H,KAAKC,UAAUyb,cAActa;EAAAA,CAAAA;AAAAA,GAAAA,KAAAA,SA+iBHkb,IAAAA;AAM1Btc,OAAKsB,mBAAmB6O,iBACtB,iBAN2B,MAAA;AAC3BnQ,SAAK2F,cAAc/C,MAAM,4BAAA,GACzB5C,KAAKsB,mBAAmBC,UAAUgb,OAAO,UAAA,GACzCD,GAAAA;EAAiB,GAKjB,EAAEd,MAAAA,KAAM,CAAA,GAEVxb,KAAK2F,cAAc/C,MAAM,8BAAA,GACzB5C,KAAKsB,mBAAmBC,UAAUib,IAAI,UAAA;AACxC,GAAAC,MAAA,SAwR0BC,IAAAA;AACxB,QACMC,KAAWD,GAASrS,aAAa,MAAA;AAEvC,MAAA,CAHmB,CAAC,OAAA,EAGJ1F,SAASgY,EAAAA,GAAW;AAClC,UAAMC,KAA2B,QAAQD,EAAAA;AAGzCD,IAAAA,GAASrN,aAAa,QAAQuN,EAAAA,GAE9BF,GAASvM,iBAAiB,SAAS,MAAA;AAEjCuM,MAAAA,GAASrN,aACP,QACAqN,GAASpJ,QAAQqJ,KAAWC,EAAAA;IAC7B,CAAA;EAEJ;AACH,GAAClE,MAAA,SAEkCmE,IAA4BpZ,IAAAA;AAAAA,SAAAA,UAAAA,MAAAA,QAAAA,QAAAA,aAAAA;AAAAA,QAAAA;AACzB,cAApCW,KAAA5D,uBAAAR,MAAII,IAAA,GAAA,MAAA,WAAgCgE,MAAAA,GAAAmM,MAAAA;AAEpC,UAAMuM,KAAqBD,GAASlO,cAClC,4BAAA;AAGF,QAAImO,OAAAA,MAA6BC,GAAAA,IAAgC;AAC/D,YAAA,EAAM/T,SAAEA,IAAOF,eAAEA,GAAAA,KAAAA,MACRtI,uBAAAR,MAAAA,KAAAA,GAAAA,EAAA6B,KAAA7B,IAAAA,MAAgD,CAAA;AAErDgJ,MAAAA,MAAWF,OACbtI,uBAAAR,MAA8BS,GAAA,KAAAuc,GAAAA,EAAAnb,KAA9B7B,MAA+B8c,EAAAA,GAG/B7Z,uBAAAjD,MAAqCI,IAAA,IAAI6c,mBAAAA,GAAAA,GAGzCjd,KAAKuD,IAAIyE,SAAS+O,QACfmG,YAAYlU,IAASxI,uBAAAR,MAAAA,IAAAA,GAAAA,CAAAA,EACrBmd,KAAYlY,CAAAA,OAAY9B,UAAAnD,MAAAA,QAAA,QAAA,aAAA;AACvByD,QAAAA,GAAKqZ,GAAmBnU,IAAI,EAC1BG,eAAAA,IACA7D,UAAAA,GAAAA,CAAAA;MAEJ,CAAA,CAAA,EACCmY,MAAOlZ,CAAAA,OAAAA;AACW,yBAAbA,GAAI+S,QACNjX,KAAK2F,cAActB,MAAM,4BAA4BH,GAAIqD,OAAAA;MAC1D,CAAA;IAGR;EAAA,CAAA;AAGiB,GAAA4S,MAAA,SAAA,EAAAL,eAClBA,IAAa1Y,gBACbA,IAAc0G,UACdA,GAAAA,GAAAA;AAMIgS,EAAAA,MAGFtZ,uBAAAR,MAAAA,GAAAA,KAAAA,EAAAA,EAAA6B,KAAA7B,MAAe,SAAS,CAAA,CAAA,GAGrBoB,MACHZ,uBAAAR,MAAuBS,GAAA,KAAA4c,EAAAA,EAAAxb,KAAvB7B,MAAwB8H,EAAAA,GAG1BtH,uBAAAR,MAAIS,GAAA,KAAA8E,EAAAA,EAAJ1D,KAAA7B,MAAe,gBAAgB,EAAEsd,YAAYxV,GAAAA,CAAAA,GAC7CtH,uBAAAR,MAAIS,GAAA,KAAA8E,EAAAA,EAAJ1D,KAAA7B,MAAe,kBAAkB,EAAEsd,YAAYxV,GAAAA,CAAAA;AACjD,GAACwC,MAAA,WAAA;AA2GC,MAAIiT,KAAAA;AAaJ,SAZAhQ,MAAMC,KAAKxN,KAAKqN,WAAWC,iBAAiB,SAAA,CAAA,EACzCkQ,QAAAA,EACAlX,QAAS6Q,CAAAA,OAAAA;AAAAA,QAAAA,IAAAA;AACgB,eAApBA,GAAMsG,cAGU,UAApBrZ,KAAA+S,GAAMuG,mBAAAA,WAActZ,MAAAA,GAAAvC,KAAAsV,EAAAA,GAChBoG,OACFA,KAAAA,UAAU7Y,KAAAyS,GAAMwG,kBAAAA,WAAAA,KAAAA,SAAAA,GAAAA,KAAAA,EAAAA;EACjB,CAAA,GAGEJ;AACT,GAAC7S,MAAA,WAAA;AAAA,SAAA,UAAA,MAAA,QAAA,QAAA,aAAA;AAWC,UAAMoN,KAAS9X,KAAKwa,UAAAA;AAWpB,YAAA,MARqB/O,QAAQC,IAC3BoM,GAAOvM,IAAW4L,CAAAA,OAAShU,UAAAnD,MAAAA,QAAA,QAAA,aAAA;AAAC,aAAC,EAC3BiX,MAAME,GAAM9M,aAAa,MAAA,GACzBiJ,OAAO6D,GAAM7D,MAAAA;IACb,CAAA,CAAA,CAAA,GAIUH,OACZ,CAACC,IAAKwK,OACD9R,OAAA5K,OAAA4K,OAAA5K,OAAA,CAAA,GAAAkS,EAAAA,GACH,EAAA,CAACwK,GAAI3G,IAAAA,GAAO2G,GAAItK,MAAAA,CAAAA,GAElB,CAAA,CAAA;EAAA,CAAA;AAAA,GAAA,KAAA,SAM0BlJ,IAAAA;AAC5B,QAAMyT,KAAkBtQ,MAAMC,KAC5BxN,KAAKsB,mBAAmBgM,iBACtB,sCAAA,CAAA,EAEFlC,OAAQ0S,CAAAA,OAAQA,OAAQ1T,EAAAA,GAEpB2T,KAAyB,MAAW5a,UAAAnD,MAAAA,QAAA,QAAA,aAAA;AACxCA,SAAK2F,cAAc/C,MAAM,4BAAA,GACzB5C,KAAKwQ,oBAAoB,eAAeuN,EAAAA,GACxC3T,GAAU4T,gBAAgB,SAAA,GAC1BH,GAAgBvX,QAASwX,CAAAA,OAAAA;AACvBA,MAAAA,GAAIE,gBAAgB,UAAA;IAAW,CAAA;AAGjC,UAAMpL,KAAAA,MAAmB5S,KAAK6S,cAAAA,GACxBvK,KAAgB,CAAA,GAChBsK,GAAWtK,iBAAiB,CAAA,GAAA,GAC5BsK,GAAWsB,cAAc,CAAA,CAAA;AAE/BlU,SAAKuI,eAAeD,EAAAA;EACtB,CAAA,GAEM2V,KAAwB,MAAA;AAAA,QAAA5a;AAE5BrC,WAAOwP,oBAAoB,YAAYhQ,uBAAAR,MAA0BiK,KAAA,GAAA,CAAA,GAEjEhH,uBAAAjD,MAAIiK,KAA0BL,CAAAA,OAAAA;AACxBA,MAAAA,GAAEsU,cACJle,KAAK2C,OAAOC,MACV,wDAAA,GAEFmb,GAAAA;IACD,GAAA,GAAA,GAGH/c,OAAOmP,iBAAiB,YAAY3P,uBAAAR,MAAAA,KAAAA,GAAAA,GAA4B,EAC9Dwb,MAAAA,KAAM,CAAA;AAIR,UAAM2C,KAA2C,UAAd/Z,KAAApE,KAAKC,cAAAA,WAASmE,KAAAA,SAAAA,GAAEmL,UACjD,CAAC7G,IAAU0V,OAAAA;AAGL1V,MAAAA,OAAa0V,MACfL,GAAAA,GAEF/d,KAAKwQ,oBAAoB,eAAeuN,EAAAA,GACxC/d,KAAKC,UAAUoe,YAAYF,EAAAA;IAA2B,GAEvDjX,CAAAA,OAAUA,GAAMwB,UACjB,EAAEgT,aAAAA,KAAa,CAAA;EAChB,GAIG4C,KAA+Bte,KAAK6K,kBAAkB0E,UAC1D,CAAA,EAAGzE,WAAAA,GAAAA,MAAAA;AACGA,IAAAA,MACF9K,KAAKmQ,iBAAiB,eAAe4N,IAAwB,EAC3DvC,MAAAA,KAAM,CAAA,GAGRpR,GAAUiF,aAAa,WAAW,MAAA,GAClCwO,GAAgBvX,QAASwX,CAAAA,OACvBA,GAAIzO,aAAa,YAAY,MAAA,CAAA,MAG/BrP,KAAK6K,kBAAkBwT,YAAYC,EAAAA,GAEnCL,GAAAA;EACD,CAAA;AAGP,GAACjS,MAAA,SAGuBvB,KAAW,CAAA,GAAA;AAAA,MAAArH,IAAAC;AACjC,QAGMsF,KAAK4V,GAAsB9T,IAHhB,CAAC,cAAc,SAAS,OAAA,CAAA,GAInC+T,KAAWD,GAAsB9T,IAHhB,CAAC,eAAe,UAAA,CAAA;AAMvC,MAAI9B,MAAM6V,GACR,KAAA;AACE,QAAA,CAAK3P,WAAW4P,mBACd;AAEF,UAAMC,KAAO,IAAI7P,WAAW4P,mBAAmB,EAAE9V,IAAAA,IAAI6V,UAAAA,GAAAA,CAAAA;AAErB,cAAhC9Z,KAAwB,UAAxBN,KAAA,SAAAua,aAAAA,WAAAA,YAAAA,SAAAA,UAAWC,gBAAAA,WAAaxa,KAAAA,SAAAA,GAAAya,UAAAA,WAAQna,MAAAA,GAAA7C,KAAAuC,IAAAsa,EAAAA;EACjC,SAAQ9U,IAAAA;AACP5J,SAAK2F,cAActB,MAAM,+BAA+BuF,GAAErC,OAAAA;EAC3D;AAEL,GAACwS,MAAA,WAAA;AAKC+E,KAAAA;AAEa9e,OAAKsB,mBAAmBgM,iBACnC,yBAAA,EAEGhH,QAASwX,CAAAA,OAAQtd,uBAAAR,MAAAA,GAAAA,KAAAA,GAAAA,EAAA6B,KAAA7B,MAA2B8d,EAAAA,CAAAA;AACnD,GAAAiB,MAAA,SAEsBjB,IAAAA;AACpB,MAAA,CAAKA,GACH;AAGiBA,EAAAA,GAAIxQ,iBAAiB,OAAA,EAE7BhH,QAAS0Y,CAAAA,OAAAA;AAClB,UAAMC,KAAaD,GAAI3U,aAAa,MAAA,GAC9B1B,KAAK,SAASmV,GAAInV,EAAAA,IAAMsW,EAAAA,IAExBC,KAAOrb,SAASuL,cAAc,MAAA;AACpC8P,IAAAA,GAAK7P,aAAa,QAAQ1G,EAAAA,GAC1BuW,GAAK7P,aAAa,QAAQ4P,EAAAA,GAE1BnB,GAAIxO,YAAY4P,EAAAA,GAEhBF,GAAI3P,aAAa,QAAQ1G,EAAAA,GACzB3I,KAAKsP,YAAY0P,EAAAA;EAAI,CAAA;AAEzB,GAAAG,MAAA,SAwEgC1b,IAAAA;AAC9BzD,OAAKsB,mBACFgM,iBAAiB,2CAAA,EACjBhH,QAAS8Y,CAAAA,OAAAA;AACRA,IAAAA,GAASjP,iBAAiB,SAAS,MAAA;AAAA,UAAA5B;AAAA,OAAA,UACjBnK,KAAAgb,GAASzB,kBAAAA,WAAAA,KAAAA,SAAAA,GAAAA,KAAAA,EAAAA,MAEvBnd,uBAAAR,MAAAA,KAAAA,GAAAA,EAAA6B,KAAA7B,MAAmBof,IAAU3b,EAAAA;IAC9B,CAAA;EACD,CAAA;AAER,GAAA4b,MAAA,SAES5b,IAAAA;AAGPzD,OAAKsB,mBACFgM,iBACC,uBAAuBgS,EAAAA,iCAAsEA,EAAAA,GAAAA,EAE9FhZ,QAASiZ,CAAAA,OAAAA;AAERA,IAAAA,GAAOC,UAAU,MAAA;AACfhf,6BAAAR,MAAAA,KAAAA,GAAAA,EAAA6B,KAAA7B,MAAmBuf,IAAQ9b,EAAAA;IAAK;EACjC,CAAA,GAGLjD,uBAAAR,MAAoCS,GAAA,KAAAgf,GAAAA,EAAA5d,KAApC7B,MAAqCyD,EAAAA,GAEjCzD,KAAK2P,+BAEP3P,KAAKsB,mBACFgM,iBAAiB,gBAAgBmN,CAAAA,IAAAA,EACjCnU,QAASwX,CAAAA,OAAAA;AACRA,IAAAA,GAAI3N,iBAAiB,SAAS,MAAA;AAC5BnQ,WAAKC,UAAUH,OAAQoH,CAAAA,OAClB4E,OAAA5K,OAAA4K,OAAA5K,OAAA,CAAA,GAAAgG,EAAAA,GACH,EAAA0B,aACKkD,OAAA5K,OAAA4K,OAAA5K,OAAA,CAAA,GAAAgG,GAAM0B,WAAAA,GACT,EAAAhC,WAAW,IACXsU,WAAW,GAAA,CAAA,EAAA,CAAA,CAAA;IAEZ,CAAA;EACH,CAAA;AAGV,GAAC3V,KAAA,SAESma,IAAmBxR,IAAAA;AAC3BlO,OAAKgO,cAAc,IAAIC,YAAYyR,IAAW,EAAExR,QAAAA,GAAAA,CAAAA,CAAAA;AAClD;;;ACx3DGyR,eAAeC,IAAI,YAAA,IAItBC,QAAQC,IAAI,+BAAA,IAHZH,eAAeI,OAAO,cAAcC,GAAAA;",
  "names": ["ALLOWED_INPUT_CONFIG_ATTRS", "replaceElementMessage", "baseEle", "eleType", "message", "querySelectorAll", "ELEMENT_TYPE_ATTRIBUTE", "forEach", "ele", "textContent", "classList", "replaceElementInputs", "screenInputs", "Object", "entries", "name", "value", "Array", "from", "DESCOPE_ATTRIBUTE_EXCLUDE_FIELD", "inputEle", "getByPath", "obj", "path", "split", "reduce", "prev", "next", "applyTemplates", "text", "screenState", "handleMarkdown", "replace", "_", "match", "escapeMarkdown", "replaceHrefByDataType", "dataType", "provisionUrl", "setAttribute", "setCssVars", "rootEle", "nextPageTemplate", "cssVars", "logger", "keys", "componentName", "querySelector", "debug", "componentClass", "customElements", "get", "cssVarKey", "componentCssVars", "varName", "_a", "cssVarList", "info", "style", "setProperty", "setImageVariable", "image", "imageVarName", "url", "_b", "updateTemplateFromScreenState", "componentsConfig", "flowInputs", "a", "totp", "f", "notp", "redirectUrl", "inEle", "shouldHandleMarkdown", "localName", "href", "getAttribute", "componentsDynamicAttrs", "rest", "__rest", "configMap", "acc", "componentSelector", "componentDynamicAttrs", "attributes", "length", "componentsSelector", "comp", "config", "attr", "JSON", "stringify", "e", "error", "HAS_DYNAMIC_VALUES_ATTR_NAME", "formData", "attrName", "attrValue", "includes", "updateScreenFromScreenState", "inputs", "form", "setTOTPVariable", "setNOTPVariable", "setPhoneAutoDetectDefaultCode", "fragment", "autoDetectCode", "phoneEle", "disableWebauthnButtons", "button", "LOCAL_STORAGE_AB_TESTING_KEY", "getABTestingKey", "abTestingKey", "localStorage", "getItem", "generatedKey", "Math", "floor", "random", "setItem", "toString", "Number", "conditionsMap", "ctx", "loginId", "_a", "lastAuth", "empty", "n", "idpInitiated", "code", "externalToken", "token", "abTestingKey", "predicate", "min", "max", "split", "map", "Number", "undefined", "isNaN", "predicateNum", "calculateCondition", "condition", "checkFunc", "key", "operator", "conditionResult", "met", "unmet", "startScreenId", "screenId", "startScreenName", "screenName", "conditionInteractionId", "interactionId", "calculateConditions", "conditions", "find", "clientScripts", "componentsConfig", "getLastAuth", "loginId", "lastAuth", "Object", "assign", "JSON", "parse", "localStorage", "getItem", "DESCOPE_LAST_AUTH_LOCAL_STORAGE_KEY", "e", "setLastAuth", "forceLoginId", "authMethod", "IS_LOCAL_STORAGE", "setItem", "stringify", "flattenFormObject", "obj", "prefix", "Object", "keys", "reduce", "res", "el", "Array", "isArray", "assign", "value", "map", "item", "_a", "v", "fl", "transformFlowInputFormData", "formData", "JSON", "parse", "e", "extractNestedAttribute", "attr", "fromEntries", "entries", "name", "values", "formMountMixin", "createSingletonMixin", "superclass", "_FormMountMixin_instances", "_FormMountMixin_shouldMountInFormEle", "_FormMountMixin_handleOuterForm", "_a", "constructor", "connectedCallback", "__classPrivateFieldGet", "this", "call", "_b", "super", "o", "n", "shadowRoot", "host", "closest", "isChromium", "r", "wc", "form", "document", "createElement", "style", "width", "height", "parentElement", "appendChild", "BaseClass", "compose", "themeMixin", "staticResourcesMixin", "formMountMixin", "injectStyleMixin", "HTMLElement", "BaseDescopeWc", "observedAttributes", "updateExecState", "super", "_BaseDescopeWc_init", "set", "this", "flowStatus", "loggerWrapper", "error", "message", "description", "logger", "Error", "__classPrivateFieldGet", "call", "warn", "info", "state", "debug", "_BaseDescopeWc_flowState", "State", "_BaseDescopeWc_debugState", "_BaseDescopeWc_componentsContext", "getComponentsContext", "nextRequestStatus", "isLoading", "_BaseDescopeWc_debuggerEle", "_BaseDescopeWc_eventsCbRefs", "popstate", "_BaseDescopeWc_instances", "_BaseDescopeWc_syncStateIdFromUrl", "bind", "componentsContext", "_BaseDescopeWc_handleComponentsContext", "_BaseDescopeWc_updateExecState", "getConfig", "config", "isMissingConfig", "__classPrivateFieldSet", "_BaseDescopeWc_initShadowDom", "flowId", "getAttribute", "client", "JSON", "parse", "e", "tenantId", "redirectUrl", "locale", "autoFocus", "res", "_b", "validateOnBlur", "storeLastAuthenticatedUser", "refreshCookieName", "keepLastAuthenticatedUserAfterLogout", "storagePrefix", "preview", "formConfig", "transformFlowInputFormData", "form", "formConfigValues", "extractNestedAttribute", "outboundAppId", "outboundAppScopes", "scopes", "err", "isRestartOnError", "getExecutionContext", "executionContext", "undefined", "getProjectConfig", "projectConfig", "getFlowConfig", "flowConfig", "flows", "_c", "version", "getTargetLocales", "targetLocales", "map", "toLowerCase", "getComponentsVersion", "componentsVersion", "init", "forEach", "status", "addEventListener", "_super", "subscribe", "_BaseDescopeWc_handleDebugMode", "update", "isDebug", "_BaseDescopeWc_validateAttrs", "_BaseDescopeWc_getIsFlowsVersionMismatch", "_BaseDescopeWc_handleKeyPress", "executionId", "stepId", "token", "code", "isPopup", "exchangeError", "redirectAuthCallbackUrl", "redirectAuthBackupCallbackUri", "redirectAuthCodeChallenge", "redirectAuthInitiator", "ssoQueryParams", "handleUrlParams", "window", "_BaseDescopeWc_onFlowChange", "Object", "assign", "projectId", "baseUrl", "tenant", "disconnectedCallback", "unsubscribeAll", "_BaseDescopeWc_disableDebugger", "removeEventListener", "attrName", "oldValue", "newValue", "shadowRoot", "isConnected", "_a", "includes", "isInitialRun", "newStepId", "newExecutionId", "clearRunIdsFromUrl", "camelCase", "y", "j", "E", "L", "A", "injectStyle", "_BaseDescopeWc_loadInitStyle", "slotElement", "document", "createElement", "classList", "add", "rootElement", "appendChild", "optionalAttributes", "attr", "getRunIdsFromUrl", "_BaseDescopeWc_createSdk", "sdk", "createSdk", "persistTokens", "sdkConfigOverrides", "key", "origFn", "flow", "args", "__awaiter", "errorCode", "FETCH_EXCEPTION_ERROR_CODE", "errorDescription", "toString", "currentState", "_prevState", "isChanged", "_BaseDescopeWc_isPrevVerConfig", "prevVerConfigUrl", "getContentUrl", "filename", "CONFIG_FILENAME", "assetsFolder", "PREV_VER_ASSETS_FOLDER", "baseStaticUrl", "fetchContent", "T", "detail", "remove", "arguments", "style", "position", "top", "right", "height", "width", "pointerEvents", "zIndex", "import", "body", "_BaseDescopeWc_updateDebuggerMessages", "title", "updateData", "onkeydown", "isLinkEleFocused", "activeElement", "isIgnoredElementFocused", "ELEMENTS_TO_IGNORE_ENTER_KEY_ON", "r", "localName", "_d", "preventDefault", "buttons", "querySelectorAll", "length", "click", "autoSubmitButtons", "Array", "from", "filter", "button", "genericButtons", "ssoButtons", "baseHeaders", "DescopeWc", "BaseDescopeWc", "config", "sdkConfigOverrides", "constructor", "flowState", "State", "deferredRedirect", "super", "update", "bind", "this", "stepState", "_DescopeWc_pollingTimeout", "set", "_DescopeWc_conditionalUiAbortController", "_DescopeWc_sdkScriptsLoading", "_DescopeWc_eventsCbRefs", "visibilitychange", "__classPrivateFieldGet", "_DescopeWc_instances", "_DescopeWc_syncStateWithVisibility", "bridgeVersion", "nativeCallbacks", "_DescopeWc_isPrevCustomScreen", "handleRedirect", "redirectTo", "window", "location", "assign", "_DescopeWc_toggleScreenVisibility", "isCustomScreen", "toggleVisibility", "contentRootElement", "classList", "toggle", "slotElement", "innerHTML", "hasChildNodes", "_DescopeWc_handlePageSwitchTransition", "call", "_DescopeWc_handlePollingResponse", "executionId", "stepId", "flowVersion", "componentsVersion", "rescheduled", "stopOnErrors", "FLOW_TIMED_OUT_ERROR_CODE", "POLLING_STATUS_NOT_FOUND_ERROR_CODE", "current", "action", "RESPONSE_ACTIONS", "poll", "logger", "debug", "scheduledAt", "Date", "now", "delay", "__classPrivateFieldSet", "setTimeout", "__awaiter", "t", "i", "nextCall", "sdk", "flow", "next", "CUSTOM_INTERACTIONS", "polling", "throttled", "document", "hidden", "sdkResp", "timeout", "timeoutPromise", "err", "warn", "_a", "error", "errorCode", "FETCH_EXCEPTION_ERROR_CODE", "JSON", "stringify", "_b", "includes", "_DescopeWc_handleSdkResponse", "_DescopeWc_resetPollingTimeout", "clearTimeout", "ok", "defaultMessage", "response", "url", "defaultDescription", "status", "_c", "statusText", "_DescopeWc_dispatch", "FETCH_ERROR_RESPONSE_ERROR_CODE", "errorDescription", "errorMessage", "loggerWrapper", "_d", "_e", "_f", "FLOW_REQUESTED_IS_IN_OLD_VERSION_ERROR_CODE", "isRestartOnError", "_DescopeWc_handleFlowRestart", "_h", "_g", "data", "runnerLogs", "forEach", "l", "level", "title", "log", "info", "errorText", "_l", "_k", "p", "_j", "screen", "state", "v", "_m", "code", "description", "message", "authInfo", "lastAuth", "openInNewTabUrl", "storeLastAuthenticatedUser", "setLastAuth", "open", "stepName", "redirect", "webauthn", "samlIdpResponse", "nativeResponse", "reqTimestamp", "m", "_o", "clientScripts", "loadSdkScripts", "redirectIsPopup", "isPopup", "screenId", "id", "screenState", "webauthnTransactionId", "transactionId", "webauthnOptions", "options", "samlIdpResponseUrl", "samlIdpResponseSamlResponse", "samlResponse", "samlIdpResponseRelayState", "relayState", "nativeResponseType", "type", "nativePayload", "payload", "_DescopeWc_getWebauthnConditionalUiStartParams", "withMemCache", "e", "startResp", "signIn", "start", "origin", "_DescopeWc_prevPageShowListener", "_DescopeWc_handleSubmit", "leadingDebounce", "submitter", "getAttribute", "_DescopeWc_validateInputs", "submitterId", "_DescopeWc_handleComponentsLoadingState", "formData", "_DescopeWc_getFormData", "eleDescopeAttrs", "getElementDescopeAttributes", "nextRequestStatus", "isLoading", "toString", "sdkScriptsModules", "loadSdkScriptsModules", "length", "refreshPromises", "filter", "module", "refresh", "map", "SDK_SCRIPTS_LOAD_TIMEOUT", "Promise", "all", "contextArgs", "getComponentsContext", "actionArgs", "Object", "nativeOptions", "_DescopeWc_handleStoreCredentials", "parse", "exchangeCode", "URL", "searchParams", "get", "URL_CODE_PARAM_NAME", "complete", "idpInitiated", "token", "URL_TOKEN_PARAM_NAME", "URL_RUN_IDS_PARAM_NAME", "split", "pop", "undefined", "screenResolve", "override", "screenNext", "interactionId", "form", "scriptElements", "shadowRoot", "querySelectorAll", "Array", "from", "el", "moduleRes", "scripts", "createScriptCallback", "script", "resolve", "result", "dispatchEvent", "CustomEvent", "detail", "getScriptResultPath", "resultKey", "bubbles", "composed", "s", "join", "promises", "scriptElement", "querySelector", "injectNpmLib", "globalThis", "descope", "reject", "initArgs", "baseUrl", "ref", "newScriptElement", "createElement", "setAttribute", "appendChild", "subscribe", "stop", "toPromise", "race", "isDismissScreenErrorOnInput", "init", "descopeBridge", "_init", "lazyInit", "isConnected", "onFlowChange", "_DescopeWc_subscribeStepState", "addEventListener", "_super", "disconnectedCallback", "unsubscribeAll", "abort", "removeEventListener", "locale", "filenameWithLocale", "userLocale", "getUserLocale", "targetLocales", "getTargetLocales", "fallback", "htmlFilename", "htmlLocaleFilename", "body", "fetchStaticResource", "ex", "currentState", "prevState", "isChanged", "projectId", "flowId", "tenant", "redirectUrl", "exchangeError", "redirectAuthCodeChallenge", "redirectAuthCallbackUrl", "redirectAuthBackupCallbackUri", "redirectAuthInitiator", "ssoQueryParams", "__rest", "startScreenId", "startScreenName", "conditionInteractionId", "abTestingKey", "getABTestingKey", "outboundAppId", "outboundAppScopes", "loginId", "getLastUserLoginId", "flowConfig", "getFlowConfig", "projectConfig", "getProjectConfig", "flowVersions", "entries", "flows", "reduce", "acc", "key", "value", "version", "redirectAuth", "callbackUrl", "codeChallenge", "backupCallbackUri", "platform", "oauthProvider", "oauthRedirect", "magicLinkRedirect", "ssoRedirect", "conditionComponentsConfig", "sdkScripts", "conditions", "conditionScripts", "componentsConfig", "calculateConditions", "getLastAuth", "push", "condition", "calculateCondition", "fingerprintEnabled", "fingerprintKey", "ensureFingerprintIds", "clearFingerprintData", "showFirstScreenOnExecutionInit", "client", "formConfigValues", "descopeIdpInitiated", "oidcLoginHint", "externalId", "isCodeChanged", "isExchangeErrorChanged", "channel", "BroadcastChannel", "postMessage", "close", "submit", "loadForm", "some", "samlProp", "injectSamlIdpForm", "submitForm", "popup", "openCenteredPopup", "intervalId", "setInterval", "closed", "clearInterval", "onPostMessage", "event", "eventOrigin", "windowLocationOrigin", "onmessage", "webauthnCreate", "webauthnGet", "failure", "helpers", "create", "name", "nativeBridge", "input", "readyScreenId", "getHtmlFilenameWithLocale", "oidcPrompt", "oidcErrorRedirectUri", "oidcResource", "samlIdpUsername", "stepStateUpdate", "direction", "getAnimationDirection", "getLastUserDisplayName", "inputs", "res", "preview", "transformScreenInputs", "_DescopeWc_handleCustomScreen", "stepTemplate", "getPageContent", "clone", "content", "cloneNode", "loadDescopeUiComponents", "isSupported", "_DescopeWc_handleWebauthnConditionalUi", "disableWebauthnButtons", "n", "email", "updateTemplateFromScreenState", "formConfig", "geo", "getExecutionContext", "setPhoneAutoDetectDefaultCode", "injectNextPage", "o", "rootElement", "setTOTPVariable", "totp", "image", "setNOTPVariable", "notp", "setCssVars", "cssVars", "replaceChildren", "isFirstScreen", "_DescopeWc_updateExternalInputs", "validateOnBlur", "handleReportValidityOnBlur", "updateScreenFromScreenState", "_DescopeWc_dispatchPageEvents", "handleAutoFocus", "autoFocus", "_DescopeWc_hydrate", "ELEMENT_TYPE_ATTRIBUTE", "getInputs", "DESCOPE_ATTRIBUTE_EXCLUDE_FIELD", "be", "we", "Re", "Ae", "_DescopeWc_nativeBeforeScreen", "context", "_DescopeWc_nativeNotifyBridge", "_DescopeWc_handleGlobalErrors", "errorType", "updateGlobalError", "transformedErrorText", "errorTransformer", "text", "replaceElementMessage", "once", "onStepChange", "forceUpdate", "_DescopeWc_handlePasscodeCleanup", "passcodeEle", "prevCompVersion", "getComponentsVersion", "reset", "transformStepStateForCustomScreen", "Boolean", "onScreenUpdate", "currentMode", "prevMode", "sort", "onTransitionEnd", "remove", "add", "Se", "inputEle", "origName", "conditionalUiSupportName", "fragment", "conditionalUiInput", "isConditionalLoginSupported", "_DescopeWc_handleConditionalUiInput", "AbortController", "conditional", "then", "catch", "_DescopeWc_nativeAfterScreen", "screenName", "isValid", "reverse", "localName", "reportValidity", "checkValidity", "val", "enabledElements", "ele", "restoreComponentsState", "removeAttribute", "handleScreenIdUpdates", "persisted", "unsubscribeScreenIdUpdates", "prevScreenId", "unsubscribe", "unsubscribeNextRequestStatus", "getFirstNonEmptyValue", "password", "PasswordCredential", "cred", "navigator", "credentials", "store", "clearPreviousExternalInputs", "xe", "inp", "targetSlot", "slot", "je", "passcode", "Te", "DESCOPE_ATTRIBUTE_EXCLUDE_NEXT_BUTTON", "button", "onclick", "_DescopeWc_addPasscodeAutoSubmitListeners", "eventName", "customElements", "get", "console", "log", "define", "DescopeWc"]
}
