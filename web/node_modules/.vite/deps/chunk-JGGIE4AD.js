import {
  initLifecycleMixin,
  injectStyleMixin,
  loggerMixin,
  observeAttributesMixin
} from "./chunk-PGJ4DCSZ.js";
import {
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  h,
  r,
  s
} from "./chunk-C4K4ZQL2.js";

// node_modules/@descope/sdk-mixins/dist/esm/mixins/createValidateAttributesMixin/commonValidators.js
var missingAttrValidator = (attrName, value) => !value && `${attrName} cannot be empty, please make sure to set this attribute`;

// node_modules/@descope/sdk-mixins/dist/esm/mixins/createValidateAttributesMixin/createValidateAttributesMixin.js
var createValidateAttributesMixin = (mappings) => (superclass) => {
  var _ValidateAttributesMixinClass_instances, _ValidateAttributesMixinClass_handleError, _a;
  const BaseClass = r(loggerMixin, initLifecycleMixin, observeAttributesMixin)(superclass);
  const mappingsNames = Object.keys(mappings);
  return _a = class ValidateAttributesMixinClass extends BaseClass {
    constructor(...args) {
      super(...args);
      _ValidateAttributesMixinClass_instances.add(this);
      this.observeAttributes(mappingsNames, __classPrivateFieldGet(this, _ValidateAttributesMixinClass_instances, "m", _ValidateAttributesMixinClass_handleError).bind(this));
    }
    async init() {
      var _b;
      mappingsNames.forEach((attr) => __classPrivateFieldGet(this, _ValidateAttributesMixinClass_instances, "m", _ValidateAttributesMixinClass_handleError).call(this, attr, this.getAttribute(attr)));
      await ((_b = super.init) === null || _b === void 0 ? void 0 : _b.call(this));
    }
  }, _ValidateAttributesMixinClass_instances = /* @__PURE__ */ new WeakSet(), _ValidateAttributesMixinClass_handleError = function _ValidateAttributesMixinClass_handleError2(attrName, newValue) {
    const onError = mappings[attrName];
    const error = typeof onError === "function" ? onError(attrName, newValue) : onError;
    if (error) {
      this.logger.error(error);
    }
  }, _a;
};
createValidateAttributesMixin.missingAttrValidator = missingAttrValidator;

// node_modules/@descope/sdk-mixins/dist/esm/mixins/projectIdMixin.js
var projectIdMixin = h((superclass) => {
  const BaseClass = r(createValidateAttributesMixin({ "project-id": missingAttrValidator }))(superclass);
  return class ProjectIdMixinClass extends BaseClass {
    get projectId() {
      return this.getAttribute("project-id");
    }
  };
});

// node_modules/@descope/sdk-mixins/dist/esm/mixins/baseUrlMixin.js
var baseUrlMixin = h((superclass) => {
  return class BaseUrlMixinClass extends superclass {
    get baseUrl() {
      return this.getAttribute("base-url") || "";
    }
  };
});

// node_modules/@descope/sdk-mixins/dist/esm/constants.js
var IS_LOCAL_STORAGE = typeof localStorage !== "undefined";

// node_modules/@descope/sdk-mixins/dist/esm/mixins/staticResourcesMixin/constants.js
var BASE_CONTENT_URL_KEY = "base.content.url";
var BASE_CONTENT_URL = "https://static.descope.com/pages";
var OVERRIDE_CONTENT_URL = IS_LOCAL_STORAGE && localStorage.getItem(BASE_CONTENT_URL_KEY) || "";
var ASSETS_FOLDER = "v2-beta";

// node_modules/@descope/sdk-mixins/dist/esm/mixins/staticResourcesMixin/fetchWithFallbacks.js
var notLastMsgSuffix = "Trying the next fallback URL...";
var fetchWithRetry = async (url, init, { logger } = {}) => {
  try {
    return await fetch(url, init);
  } catch (e) {
    logger === null || logger === void 0 ? void 0 : logger.debug(`Network error fetching URL ${url} [${e.message}], retrying...`);
    return fetch(url, init);
  }
};
var fetchWithFallbacks = async (fallbacks, init, { logger, onSuccess } = {}) => {
  const fallbacksArr = Array.isArray(fallbacks) ? fallbacks : [fallbacks];
  for (let index = 0; index < fallbacksArr.length; index++) {
    const url = fallbacksArr[index];
    const isLast = index === fallbacksArr.length - 1;
    try {
      const res = await fetchWithRetry(url.toString(), init, { logger });
      if (res.ok) {
        onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(index);
        logger === null || logger === void 0 ? void 0 : logger.debug(`Successfully fetched URL ${url}`);
        return res;
      }
      const errMsg = `Error fetching URL ${url} [${res.status}]`;
      if (isLast)
        throw new Error(errMsg);
      logger === null || logger === void 0 ? void 0 : logger.debug(`${errMsg}. ${notLastMsgSuffix}`);
    } catch (e) {
      const errMsg = `Error fetching URL ${url} [${e.message}]`;
      if (isLast)
        throw new Error(errMsg);
      logger === null || logger === void 0 ? void 0 : logger.debug(`${errMsg}. ${notLastMsgSuffix}`);
    }
  }
};

// node_modules/@descope/sdk-mixins/dist/esm/mixins/staticResourcesMixin/staticResourcesMixin.js
function getResourceUrl({ projectId, filename, assetsFolder = ASSETS_FOLDER, baseUrl = BASE_CONTENT_URL }) {
  const url = new URL(baseUrl);
  url.pathname = s(url.pathname, projectId, assetsFolder, filename);
  url.baseUrl = baseUrl;
  return url;
}
var staticResourcesMixin = h((superclass) => {
  var _StaticResourcesMixinClass_instances, _StaticResourcesMixinClass_lastBaseUrl, _StaticResourcesMixinClass_workingBaseUrl, _StaticResourcesMixinClass_getResourceUrls, _a;
  const BaseClass = r(loggerMixin, projectIdMixin, baseUrlMixin)(superclass);
  return _a = class StaticResourcesMixinClass extends BaseClass {
    constructor() {
      super(...arguments);
      _StaticResourcesMixinClass_instances.add(this);
      _StaticResourcesMixinClass_lastBaseUrl.set(this, void 0);
      _StaticResourcesMixinClass_workingBaseUrl.set(this, void 0);
    }
    async fetchStaticResource(filename, format) {
      const resourceUrls = __classPrivateFieldGet(this, _StaticResourcesMixinClass_instances, "m", _StaticResourcesMixinClass_getResourceUrls).call(this, filename);
      const onSuccess = !Array.isArray(resourceUrls) ? null : (index) => {
        if (index !== resourceUrls.length - 1) {
          const { baseUrl } = resourceUrls[index];
          __classPrivateFieldSet(this, _StaticResourcesMixinClass_workingBaseUrl, baseUrl, "f");
        }
      };
      try {
        const res = await fetchWithFallbacks(resourceUrls, { cache: "default" }, { logger: this.logger, onSuccess });
        return {
          body: await res[format](),
          headers: Object.fromEntries(res.headers.entries())
        };
      } catch (e) {
        this.logger.error(e.message);
      }
    }
    get baseStaticUrl() {
      return this.getAttribute("base-static-url") || "";
    }
  }, _StaticResourcesMixinClass_lastBaseUrl = /* @__PURE__ */ new WeakMap(), _StaticResourcesMixinClass_workingBaseUrl = /* @__PURE__ */ new WeakMap(), _StaticResourcesMixinClass_instances = /* @__PURE__ */ new WeakSet(), _StaticResourcesMixinClass_getResourceUrls = function _StaticResourcesMixinClass_getResourceUrls2(filename) {
    const overrideUrl = OVERRIDE_CONTENT_URL || this.baseStaticUrl;
    if (overrideUrl) {
      return getResourceUrl({
        projectId: this.projectId,
        filename,
        baseUrl: overrideUrl
      });
    }
    const isBaseUrlUpdated = __classPrivateFieldGet(this, _StaticResourcesMixinClass_lastBaseUrl, "f") !== this.baseUrl;
    const shouldFallbackFetch = isBaseUrlUpdated && !!this.baseUrl;
    if (isBaseUrlUpdated) {
      __classPrivateFieldSet(this, _StaticResourcesMixinClass_lastBaseUrl, this.baseUrl, "f");
      __classPrivateFieldSet(this, _StaticResourcesMixinClass_workingBaseUrl, void 0, "f");
    }
    const resourceUrl = getResourceUrl({
      projectId: this.projectId,
      filename,
      baseUrl: __classPrivateFieldGet(this, _StaticResourcesMixinClass_workingBaseUrl, "f")
    });
    if (!shouldFallbackFetch) {
      return resourceUrl;
    }
    const resourceUrlFromBaseUrl = getResourceUrl({
      projectId: this.projectId,
      filename,
      baseUrl: this.baseUrl + "/pages"
    });
    return [resourceUrlFromBaseUrl, resourceUrl];
  }, _a;
});

// node_modules/@descope/sdk-mixins/dist/esm/mixins/configMixin/constants.js
var CONFIG_FILENAME = "config.json";

// node_modules/@descope/sdk-mixins/dist/esm/mixins/resetMixin.js
var resetMixin = h((superclass) => {
  var _ResetMixinClass_callbacks, _a;
  const BaseClass = r(createValidateAttributesMixin({ "project-id": missingAttrValidator }))(superclass);
  return _a = class ResetMixinClass extends BaseClass {
    constructor() {
      super(...arguments);
      _ResetMixinClass_callbacks.set(this, /* @__PURE__ */ new Map());
    }
    onReset(sectionId, callback) {
      if (!__classPrivateFieldGet(this, _ResetMixinClass_callbacks, "f").has(sectionId)) {
        __classPrivateFieldGet(this, _ResetMixinClass_callbacks, "f").set(sectionId, callback);
        return () => {
          __classPrivateFieldGet(this, _ResetMixinClass_callbacks, "f").delete(sectionId);
        };
      } else {
        throw new Error(`Callback for sectionId ${sectionId} already exists`);
      }
    }
    async reset(...sectionIds) {
      if (sectionIds.length === 0) {
        await Promise.all(Array.from(__classPrivateFieldGet(this, _ResetMixinClass_callbacks, "f").values()).map((callback) => callback()));
      } else {
        await Promise.all(sectionIds.map((sectionId) => {
          var _b;
          if (!__classPrivateFieldGet(this, _ResetMixinClass_callbacks, "f").has(sectionId)) {
            throw new Error(`Callback for sectionId ${sectionId} does not exist`);
          }
          return (_b = __classPrivateFieldGet(this, _ResetMixinClass_callbacks, "f").get(sectionId)) === null || _b === void 0 ? void 0 : _b();
        }));
      }
    }
  }, _ResetMixinClass_callbacks = /* @__PURE__ */ new WeakMap(), _a;
});

// node_modules/@descope/sdk-mixins/dist/esm/mixins/configMixin/configMixin.js
var configMixin = h((superclass) => {
  var _ConfigMixinClass_instances, _ConfigMixinClass_configCacheClear, _ConfigMixinClass__configResource, _ConfigMixinClass_fetchConfig, _a;
  const BaseClass = r(staticResourcesMixin, resetMixin, initLifecycleMixin)(superclass);
  return _a = class ConfigMixinClass extends BaseClass {
    constructor() {
      super(...arguments);
      _ConfigMixinClass_instances.add(this);
      _ConfigMixinClass__configResource.set(this, void 0);
      _ConfigMixinClass_fetchConfig.set(this, async () => {
        try {
          const { body, headers } = await this.fetchStaticResource(CONFIG_FILENAME, "json");
          return {
            projectConfig: body,
            executionContext: { geo: headers["x-geo"] }
          };
        } catch (e) {
          this.logger.error("Cannot fetch config file", "make sure that your projectId & flowId are correct");
        }
        return void 0;
      });
    }
    async init() {
      await super.init();
      this.onReset("config", __classPrivateFieldGet(this, _ConfigMixinClass_instances, "m", _ConfigMixinClass_configCacheClear).bind(this));
    }
    get config() {
      if (!__classPrivateFieldGet(this, _ConfigMixinClass__configResource, "f")) {
        __classPrivateFieldSet(this, _ConfigMixinClass__configResource, __classPrivateFieldGet(this, _ConfigMixinClass_fetchConfig, "f").call(this), "f");
      }
      return __classPrivateFieldGet(this, _ConfigMixinClass__configResource, "f");
    }
  }, _ConfigMixinClass__configResource = /* @__PURE__ */ new WeakMap(), _ConfigMixinClass_fetchConfig = /* @__PURE__ */ new WeakMap(), _ConfigMixinClass_instances = /* @__PURE__ */ new WeakSet(), _ConfigMixinClass_configCacheClear = function _ConfigMixinClass_configCacheClear2() {
    __classPrivateFieldSet(this, _ConfigMixinClass__configResource, void 0, "f");
  }, _a;
});

// node_modules/@descope/sdk-mixins/dist/esm/mixins/injectNpmLibMixin/constants.js
var BASE_URLS = [
  "https://descopecdn.com",
  "https://static.descope.com",
  "https://cdn.jsdelivr.net"
];

// node_modules/@descope/sdk-mixins/dist/esm/mixins/injectNpmLibMixin/helpers.js
var getExistingScript = (scriptId) => {
  return document.querySelector(`script#${scriptId}`);
};
var isScriptLoaded = (script) => {
  return script.getAttribute("status") === "loaded";
};
var isScriptError = (script) => {
  return script.getAttribute("status") === "error";
};
var hashUrl = (url) => {
  let hash = 0;
  const urlStr = url.toString();
  for (let i = 0; i < urlStr.length; i++) {
    const char = urlStr.charCodeAt(i);
    hash = (hash << 5) - hash + char;
    hash = hash & hash;
  }
  return `${Math.abs(hash).toString()}`;
};
var setupScript = (id) => {
  const scriptEle = document.createElement("script");
  scriptEle.id = id;
  return scriptEle;
};
var injectScript = (scriptId, url) => {
  return new Promise((res, rej) => {
    const scriptEle = setupScript(scriptId);
    scriptEle.onerror = (error) => {
      scriptEle.setAttribute("status", "error");
      rej(error);
    };
    scriptEle.onload = () => {
      scriptEle.setAttribute("status", "loaded");
      res(scriptEle);
    };
    scriptEle.src = url.toString();
    document.body.appendChild(scriptEle);
  });
};
var handleExistingScript = (existingScript) => {
  if (isScriptLoaded(existingScript)) {
    return Promise.resolve(existingScript);
  }
  if (isScriptError(existingScript)) {
    return Promise.reject();
  }
  return new Promise((res, rej) => {
    existingScript.addEventListener("load", () => {
      res(existingScript);
    });
    existingScript.addEventListener("error", (error) => {
      rej(error);
    });
  });
};
var injectScriptWithFallbacks = async (scriptsData, onError) => {
  for (const scriptData of scriptsData) {
    const { id, url } = scriptData;
    const existingScript = getExistingScript(id);
    if (existingScript) {
      try {
        await handleExistingScript(existingScript);
        return scriptData;
      } catch (e) {
        onError(scriptData, true);
      }
    } else {
      try {
        await injectScript(id, url);
        return scriptData;
      } catch (e) {
        onError(scriptData, false);
      }
    }
  }
  throw new Error("All scripts failed to load");
};
var generateLibUrls = (baseUrls, libName, version, path = "") => baseUrls.reduce((prev, curr) => {
  const baseUrl = curr;
  if (!baseUrl) {
    return prev;
  }
  let url;
  try {
    url = new URL(baseUrl);
  } catch (e) {
    throw new Error(`Invalid URL: ${baseUrl}`);
  }
  const isUrlIncludesPath = url.pathname !== "/";
  if (!isUrlIncludesPath) {
    url.pathname = `/npm/${libName}@${version}/${path}`;
  }
  return [
    ...prev,
    {
      url,
      id: `npmlib-${libName.replaceAll("@", "").replaceAll("/", "_")}-${hashUrl(url)}`
    }
  ];
}, []);

// node_modules/@descope/sdk-mixins/dist/esm/mixins/injectNpmLibMixin/injectNpmLibMixin.js
var injectNpmLibMixin = h((superclass) => {
  const BaseClass = r(loggerMixin)(superclass);
  return class InjectNpmLibMixinClass extends BaseClass {
    get baseCdnUrl() {
      return this.getAttribute("base-cdn-url") || "";
    }
    injectNpmLib(libName, version, filePath = "", overrides = []) {
      this.logger.debug(`Injecting npm lib: "${libName}" with version: "${version}"`);
      return injectScriptWithFallbacks(generateLibUrls([...overrides, this.baseCdnUrl, ...BASE_URLS], libName, version, filePath), (scriptData, existingScript) => {
        if (existingScript) {
          this.logger.error(`Existing script cannot be loaded: "${scriptData.url}"`);
          return;
        }
        this.logger.error(`Cannot load script from URL, Make sure this URL is valid and return the correct script: "${scriptData.url}"`);
      });
    }
  };
});

// node_modules/@descope/sdk-mixins/dist/esm/mixins/descopeUiMixin/helpers.js
var getDescopeUiComponentsList = (template) => [
  ...Array.from(template.content.querySelectorAll("*")).reduce((acc, el) => el.localName.startsWith("descope-") ? acc.add(el.localName) : acc, /* @__PURE__ */ new Set())
];

// node_modules/@descope/sdk-mixins/dist/esm/mixins/descopeUiMixin/constants.js
var UI_COMPONENTS_URL_KEY = "base.ui.components.url";
var LOCAL_STORAGE_OVERRIDE = IS_LOCAL_STORAGE && localStorage.getItem(UI_COMPONENTS_URL_KEY);
var JS_FILE_PATH = "dist/umd/index.js";
var WEB_COMPONENTS_UI_LIB_NAME = "@descope/web-components-ui";

// node_modules/@descope/sdk-mixins/dist/esm/mixins/descopeUiMixin/descopeUiMixin.js
var descopeUiMixin = h((superclass) => {
  var _DescopeUiMixinClass_instances, _DescopeUiMixinClass_getComponentsVersion, _DescopeUiMixinClass_descopeUi, _DescopeUiMixinClass_loadDescopeUiComponent, _DescopeUiMixinClass_getDescopeUi, _a;
  const BaseClass = r(loggerMixin, configMixin, injectNpmLibMixin)(superclass);
  return _a = class DescopeUiMixinClass extends BaseClass {
    constructor() {
      super(...arguments);
      _DescopeUiMixinClass_instances.add(this);
      _DescopeUiMixinClass_descopeUi.set(this, void 0);
    }
    get descopeUi() {
      if (!__classPrivateFieldGet(this, _DescopeUiMixinClass_descopeUi, "f")) {
        __classPrivateFieldSet(this, _DescopeUiMixinClass_descopeUi, __classPrivateFieldGet(this, _DescopeUiMixinClass_instances, "m", _DescopeUiMixinClass_getDescopeUi).call(this), "f");
      }
      return __classPrivateFieldGet(this, _DescopeUiMixinClass_descopeUi, "f");
    }
    async loadDescopeUiComponents(templateOrComponentNames) {
      const descopeUiComponentsList = Array.isArray(templateOrComponentNames) ? templateOrComponentNames : getDescopeUiComponentsList(templateOrComponentNames);
      return Promise.all(descopeUiComponentsList.map((componentName) => __classPrivateFieldGet(this, _DescopeUiMixinClass_instances, "m", _DescopeUiMixinClass_loadDescopeUiComponent).call(this, componentName)));
    }
  }, _DescopeUiMixinClass_descopeUi = /* @__PURE__ */ new WeakMap(), _DescopeUiMixinClass_instances = /* @__PURE__ */ new WeakSet(), _DescopeUiMixinClass_getComponentsVersion = // eslint-disable-next-line class-methods-use-this
  async function _DescopeUiMixinClass_getComponentsVersion2() {
    var _b;
    const config = await this.config;
    const componentsVersion = (_b = config === null || config === void 0 ? void 0 : config.projectConfig) === null || _b === void 0 ? void 0 : _b.componentsVersion;
    if (!componentsVersion) {
      this.logger.error("Could not get components version");
    } else {
      this.logger.debug(`Got component version "${componentsVersion}"`);
    }
    return componentsVersion;
  }, _DescopeUiMixinClass_loadDescopeUiComponent = async function _DescopeUiMixinClass_loadDescopeUiComponent2(componentName) {
    const isComponentAlreadyDefined = !!customElements.get(componentName);
    if (isComponentAlreadyDefined) {
      this.logger.debug(`Loading component "${componentName}" is skipped as it is already defined`);
      return void 0;
    }
    const descopeUI = await this.descopeUi;
    if (!descopeUI[componentName]) {
      this.logger.error(`Cannot load UI component "${componentName}"`, `Descope UI does not have a component named "${componentName}", available components are: "${Object.keys(descopeUI).join(", ")}"`);
      return void 0;
    }
    try {
      return await descopeUI[componentName]();
    } catch (e) {
      if (e.name === "NotSupportedError") {
        console.debug(`Encountered an error while attempting to define the "${componentName}" component, it is likely that this component is already defined`);
      } else {
        throw e;
      }
    }
    return void 0;
  }, _DescopeUiMixinClass_getDescopeUi = async function _DescopeUiMixinClass_getDescopeUi2() {
    if (globalThis.DescopeUI) {
      return globalThis.DescopeUI;
    }
    try {
      await this.injectNpmLib(WEB_COMPONENTS_UI_LIB_NAME, await __classPrivateFieldGet(this, _DescopeUiMixinClass_instances, "m", _DescopeUiMixinClass_getComponentsVersion).call(this), JS_FILE_PATH, [LOCAL_STORAGE_OVERRIDE]);
      this.logger.debug("DescopeUI was loaded");
      return globalThis.DescopeUI;
    } catch (error) {
      this.logger.error(error);
      throw new Error("DescopeUI was not loaded");
    }
  }, _a;
});

// node_modules/@descope/sdk-mixins/dist/esm/mixins/initElementMixin.js
var CONTENT_ROOT_ID = "content-root";
var ROOT_ID = "root";
var initElementMixin = h((superclass) => {
  const BaseClass = r(injectStyleMixin)(superclass);
  return class InitElementMixinClass extends BaseClass {
    constructor(...rest) {
      var _a, _b;
      super(...rest);
      this.attachShadow({ mode: "open" }).innerHTML = `
          <div id="${ROOT_ID}">
            <div id="${CONTENT_ROOT_ID}"></div>
          </div>
          `;
      this.injectStyle(`
            #${ROOT_ID}, #${CONTENT_ROOT_ID} {
              height: 100%;
            }
            #${ROOT_ID} {
              position: relative;
              height: fit-content;
            }
          `);
      this.contentRootElement = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.getElementById(CONTENT_ROOT_ID);
      this.rootElement = (_b = this.shadowRoot) === null || _b === void 0 ? void 0 : _b.getElementById(ROOT_ID);
    }
  };
});

// node_modules/@descope/sdk-mixins/dist/esm/mixins/themeMixin/constants.js
var DEFAULT_STYLE_ID = "theme";

// node_modules/@descope/sdk-mixins/dist/esm/mixins/themeMixin/helpers.js
var loadFont = (url) => {
  const font = document.createElement("link");
  font.href = url;
  font.rel = "stylesheet";
  document.head.appendChild(font);
};
var loadDevTheme = async () => {
  const componentsUrl = localStorage.getItem(UI_COMPONENTS_URL_KEY);
  const descopeDevUrl = componentsUrl === null || componentsUrl === void 0 ? void 0 : componentsUrl.replace(/[^\/]+$/, "DescopeDev.js");
  console.warn("Trying to load DescopeDev.js from", descopeDevUrl);
  const scriptEle = document.createElement("script");
  scriptEle.src = descopeDevUrl;
  document.body.appendChild(scriptEle);
  await new Promise((resolve, reject) => {
    scriptEle.onload = resolve;
    scriptEle.onerror = reject;
  });
  if (globalThis.DescopeDev) {
    const { themeToStyle, defaultTheme, darkTheme } = globalThis.DescopeDev;
    return {
      light: themeToStyle(defaultTheme),
      dark: themeToStyle(darkTheme)
    };
  }
};

// node_modules/@descope/sdk-mixins/dist/esm/mixins/themeMixin/themeMixin.js
var themeValidation = (_, theme) => (theme || false) && theme !== "light" && theme !== "dark" && 'Supported theme values are "light", "dark", or leave empty for using the OS theme';
var themeMixin = h((superclass) => {
  var _ThemeMixinClass_instances, _ThemeMixinClass_globalStyle, _ThemeMixinClass__themeResource, _ThemeMixinClass_fetchTheme, _ThemeMixinClass_themeResource_get, _ThemeMixinClass_loadGlobalStyle, _ThemeMixinClass_loadComponentsStyle, _ThemeMixinClass_getFontsConfig, _ThemeMixinClass_loadFonts, _ThemeMixinClass_applyTheme, _ThemeMixinClass_onThemeChange, _ThemeMixinClass_loadTheme, _ThemeMixinClass_toggleOsThemeChangeListener, _a;
  const BaseClass = r(createValidateAttributesMixin({ theme: themeValidation }), staticResourcesMixin, initLifecycleMixin, descopeUiMixin, configMixin, initElementMixin, observeAttributesMixin, injectStyleMixin)(superclass);
  return _a = class ThemeMixinClass extends BaseClass {
    constructor() {
      super(...arguments);
      _ThemeMixinClass_instances.add(this);
      _ThemeMixinClass_globalStyle.set(this, void 0);
      _ThemeMixinClass__themeResource.set(this, void 0);
      _ThemeMixinClass_onThemeChange.set(this, () => {
        __classPrivateFieldGet(this, _ThemeMixinClass_instances, "m", _ThemeMixinClass_loadTheme).call(this);
        __classPrivateFieldGet(this, _ThemeMixinClass_toggleOsThemeChangeListener, "f").call(this, this.getAttribute("theme") === "os");
      });
      _ThemeMixinClass_toggleOsThemeChangeListener.set(this, (listen) => {
        var _b, _c, _d;
        const method = listen ? "addEventListener" : "removeEventListener";
        (_d = (_c = (_b = window.matchMedia) === null || _b === void 0 ? void 0 : _b.call(window, "(prefers-color-scheme: dark)")) === null || _c === void 0 ? void 0 : _c[method]) === null || _d === void 0 ? void 0 : _d.call(_c, "change", () => __classPrivateFieldGet(this, _ThemeMixinClass_instances, "m", _ThemeMixinClass_loadTheme).call(this));
      });
    }
    get theme() {
      var _b, _c;
      const theme = this.getAttribute("theme");
      if (theme === "os") {
        const isOsDark = window.matchMedia && ((_c = (_b = window.matchMedia) === null || _b === void 0 ? void 0 : _b.call(window, "(prefers-color-scheme: dark)")) === null || _c === void 0 ? void 0 : _c.matches);
        return isOsDark ? "dark" : "light";
      }
      return theme || "light";
    }
    get styleId() {
      return this.getAttribute("style-id") || DEFAULT_STYLE_ID;
    }
    async init() {
      var _b;
      await ((_b = super.init) === null || _b === void 0 ? void 0 : _b.call(this));
      __classPrivateFieldGet(this, _ThemeMixinClass_onThemeChange, "f").call(this);
      await Promise.all([
        __classPrivateFieldGet(this, _ThemeMixinClass_instances, "m", _ThemeMixinClass_loadGlobalStyle).call(this),
        __classPrivateFieldGet(this, _ThemeMixinClass_instances, "m", _ThemeMixinClass_loadComponentsStyle).call(this)
      ]);
      this.observeAttributes(["theme"], __classPrivateFieldGet(this, _ThemeMixinClass_onThemeChange, "f"));
      this.observeAttributes(["style-id"], () => {
        __classPrivateFieldSet(this, _ThemeMixinClass__themeResource, null, "f");
        __classPrivateFieldGet(this, _ThemeMixinClass_instances, "m", _ThemeMixinClass_loadFonts).call(this);
        __classPrivateFieldGet(this, _ThemeMixinClass_instances, "m", _ThemeMixinClass_loadGlobalStyle).call(this);
        __classPrivateFieldGet(this, _ThemeMixinClass_instances, "m", _ThemeMixinClass_loadComponentsStyle).call(this);
      });
    }
  }, _ThemeMixinClass_globalStyle = /* @__PURE__ */ new WeakMap(), _ThemeMixinClass__themeResource = /* @__PURE__ */ new WeakMap(), _ThemeMixinClass_onThemeChange = /* @__PURE__ */ new WeakMap(), _ThemeMixinClass_toggleOsThemeChangeListener = /* @__PURE__ */ new WeakMap(), _ThemeMixinClass_instances = /* @__PURE__ */ new WeakSet(), _ThemeMixinClass_fetchTheme = async function _ThemeMixinClass_fetchTheme2() {
    try {
      const { body: fetchedTheme } = await this.fetchStaticResource(`${this.styleId}.json`, "json");
      if (true) {
        if (localStorage === null || localStorage === void 0 ? void 0 : localStorage.getItem(UI_COMPONENTS_URL_KEY)) {
          try {
            this.logger.warn("You are in DEV mode, and UI components override URL was found\ntrying to merge project theme with the default theme of the UI components");
            const devTheme = await loadDevTheme();
            if (devTheme) {
              fetchedTheme.light.components = Object.assign(Object.assign({}, fetchedTheme.light.components), devTheme.light.components);
              fetchedTheme.dark.components = Object.assign(Object.assign({}, fetchedTheme.dark.components), devTheme.dark.components);
              this.logger.warn("Theme was merged successfully");
              console.log("%cNOTICE! This is not the theme that will be used in production!\n\nMake sure to test it without the override UI components URL!", "color: black; background-color:yellow; font-size: x-large");
            }
          } catch (e) {
            this.logger.error("Failed to merge UI components theme\n", e);
          }
        }
      }
      return fetchedTheme;
    } catch (e) {
      this.logger.error("Cannot fetch theme file", "make sure that your projectId & flowId are correct");
    }
    return void 0;
  }, _ThemeMixinClass_themeResource_get = function _ThemeMixinClass_themeResource_get2() {
    if (!__classPrivateFieldGet(this, _ThemeMixinClass__themeResource, "f")) {
      __classPrivateFieldSet(this, _ThemeMixinClass__themeResource, __classPrivateFieldGet(this, _ThemeMixinClass_instances, "m", _ThemeMixinClass_fetchTheme).call(this), "f");
      __classPrivateFieldGet(this, _ThemeMixinClass__themeResource, "f").then((theme) => this.logger.debug("Fetched theme", theme));
    }
    return __classPrivateFieldGet(this, _ThemeMixinClass__themeResource, "f");
  }, _ThemeMixinClass_loadGlobalStyle = async function _ThemeMixinClass_loadGlobalStyle2() {
    var _b, _c;
    const theme = await __classPrivateFieldGet(this, _ThemeMixinClass_instances, "a", _ThemeMixinClass_themeResource_get);
    if (!theme)
      return;
    if (!__classPrivateFieldGet(this, _ThemeMixinClass_globalStyle, "f")) {
      __classPrivateFieldSet(this, _ThemeMixinClass_globalStyle, this.injectStyle(""), "f");
    }
    __classPrivateFieldGet(this, _ThemeMixinClass_globalStyle, "f").replaceSync((((_b = theme === null || theme === void 0 ? void 0 : theme.light) === null || _b === void 0 ? void 0 : _b.globals) || "") + (((_c = theme === null || theme === void 0 ? void 0 : theme.dark) === null || _c === void 0 ? void 0 : _c.globals) || ""));
  }, _ThemeMixinClass_loadComponentsStyle = async function _ThemeMixinClass_loadComponentsStyle2() {
    var _b, _c;
    const theme = await __classPrivateFieldGet(this, _ThemeMixinClass_instances, "a", _ThemeMixinClass_themeResource_get);
    if (!theme)
      return;
    const descopeUi = await this.descopeUi;
    if (descopeUi === null || descopeUi === void 0 ? void 0 : descopeUi.componentsThemeManager) {
      descopeUi.componentsThemeManager.themes = {
        light: (_b = theme === null || theme === void 0 ? void 0 : theme.light) === null || _b === void 0 ? void 0 : _b.components,
        dark: (_c = theme === null || theme === void 0 ? void 0 : theme.dark) === null || _c === void 0 ? void 0 : _c.components
      };
    }
  }, _ThemeMixinClass_getFontsConfig = async function _ThemeMixinClass_getFontsConfig2() {
    var _b, _c;
    const { projectConfig } = await this.config || {};
    const newConfig = (_b = projectConfig === null || projectConfig === void 0 ? void 0 : projectConfig.styles) === null || _b === void 0 ? void 0 : _b[this.styleId];
    const oldConfig = projectConfig === null || projectConfig === void 0 ? void 0 : projectConfig.cssTemplate;
    const config = newConfig || oldConfig;
    const fonts = (_c = config === null || config === void 0 ? void 0 : config[this.theme]) === null || _c === void 0 ? void 0 : _c.fonts;
    return fonts;
  }, _ThemeMixinClass_loadFonts = async function _ThemeMixinClass_loadFonts2() {
    const fonts = await __classPrivateFieldGet(this, _ThemeMixinClass_instances, "m", _ThemeMixinClass_getFontsConfig).call(this);
    if (fonts) {
      Object.values(fonts).forEach((font) => {
        if (font.url) {
          this.logger.debug(`Loading font from URL "${font.url}"`);
          loadFont(font.url);
        }
      });
    } else {
      this.logger.debug("No fonts to load");
    }
  }, _ThemeMixinClass_applyTheme = async function _ThemeMixinClass_applyTheme2() {
    this.rootElement.setAttribute("data-theme", this.theme);
    const descopeUi = await this.descopeUi;
    if (descopeUi === null || descopeUi === void 0 ? void 0 : descopeUi.componentsThemeManager) {
      descopeUi.componentsThemeManager.currentThemeName = this.theme;
    }
  }, _ThemeMixinClass_loadTheme = function _ThemeMixinClass_loadTheme2() {
    __classPrivateFieldGet(this, _ThemeMixinClass_instances, "m", _ThemeMixinClass_loadFonts).call(this);
    __classPrivateFieldGet(this, _ThemeMixinClass_instances, "m", _ThemeMixinClass_applyTheme).call(this);
  }, _a;
});

export {
  createValidateAttributesMixin,
  projectIdMixin,
  baseUrlMixin,
  staticResourcesMixin,
  descopeUiMixin,
  initElementMixin,
  themeMixin
};
//# sourceMappingURL=chunk-JGGIE4AD.js.map
